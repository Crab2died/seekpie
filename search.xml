<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多功能工具箱使用手册</title>
      <link href="/20225/10/31/tools-handbook/"/>
      <url>/20225/10/31/tools-handbook/</url>
      
        <content type="html"><![CDATA[<h2 id="1-时间转换工具"><a href="#1-时间转换工具" class="headerlink" title="1. 时间转换工具"></a>1. 时间转换工具</h2><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>时间转换工具支持时区转换、时间戳转换，并能自动识别夏令时，帮助您轻松处理不同时区的时间问题。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>跨时区会议时间安排</li><li>Unix时间戳与人类可读时间的转换</li><li>不同时区之间的时间对照</li><li>夏令时自动计算</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="时区转换"><a href="#时区转换" class="headerlink" title="时区转换"></a>时区转换</h4><ol><li>选择源时区和目标时区</li><li>输入需要转换的时间</li><li>点击”转换”按钮即可得到结果</li><li>系统会自动识别并处理夏令时</li></ol><h4 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h4><ol><li><p><strong>时间戳转日期</strong>：</p><ul><li>输入Unix时间戳（秒或毫秒）</li><li>选择要显示的时区</li><li>点击转换获得可读日期时间</li></ul></li><li><p><strong>日期转时间戳</strong>：</p><ul><li>选择或输入日期和时间</li><li>选择时区</li><li>点击转换获得Unix时间戳</li></ul></li></ol><h3 id="技巧提示"><a href="#技巧提示" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>时间戳支持10位（秒）和13位（毫秒）格式</li><li>支持常见时区快速选择</li><li>可以保存常用时区配置</li></ul><hr><h2 id="2-API调试工具"><a href="#2-API调试工具" class="headerlink" title="2. API调试工具"></a>2. API调试工具</h2><h3 id="功能介绍-1"><a href="#功能介绍-1" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>强大的HTTP API测试工具，支持多种请求方法、参数配置和历史记录，是开发者进行API接口测试的得力助手。</p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>RESTful API接口测试</li><li>第三方API调用验证</li><li>接口文档验证</li><li>HTTP请求调试</li></ul><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="基础请求"><a href="#基础请求" class="headerlink" title="基础请求"></a>基础请求</h4><ol><li><p><strong>选择请求方法</strong>：GET、POST、PUT、DELETE、PATCH等</p></li><li><p><strong>输入API地址</strong>：完整的URL地址</p></li><li><p><strong>配置请求头</strong>（可选）：</p><ul><li>添加Content-Type</li><li>添加Authorization</li><li>自定义其他Header</li></ul></li><li><p><strong>配置请求参数</strong>：</p><ul><li><strong>Query参数</strong>：URL查询字符串参数</li><li><strong>Body参数</strong>：支持JSON、Form-Data、Raw等格式</li></ul></li><li><p><strong>发送请求</strong>：点击”发送”按钮</p></li></ol><h4 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h4><ul><li><strong>历史记录</strong>：自动保存最近的请求历史</li><li><strong>请求复制</strong>：复制为curl命令</li><li><strong>响应格式化</strong>：自动格式化JSON响应</li><li><strong>响应时间</strong>：显示请求耗时</li><li><strong>状态码显示</strong>：清晰显示HTTP状态码</li></ul><h3 id="技巧提示-1"><a href="#技巧提示-1" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>可以保存常用API为模板</li><li>支持环境变量配置</li><li>可导入&#x2F;导出请求配置</li></ul><hr><h2 id="3-汇率转换工具"><a href="#3-汇率转换工具" class="headerlink" title="3. 汇率转换工具"></a>3. 汇率转换工具</h2><h3 id="功能介绍-2"><a href="#功能介绍-2" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>实时汇率查询工具，支持多种货币之间的转换计算，数据准确可靠。</p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>外币购物价格换算</li><li>跨境交易金额计算</li><li>旅游预算规划</li><li>投资理财参考</li></ul><h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="基础转换"><a href="#基础转换" class="headerlink" title="基础转换"></a>基础转换</h4><ol><li>选择源货币类型（如：人民币CNY）</li><li>输入金额</li><li>选择目标货币类型（如：美元USD）</li><li>系统自动显示转换结果</li></ol><h4 id="常见货币"><a href="#常见货币" class="headerlink" title="常见货币"></a>常见货币</h4><ul><li><strong>CNY</strong> - 人民币</li><li><strong>USD</strong> - 美元</li><li><strong>EUR</strong> - 欧元</li><li><strong>JPY</strong> - 日元</li><li><strong>GBP</strong> - 英镑</li><li><strong>HKD</strong> - 港币</li><li><strong>KRW</strong> - 韩元</li><li>等更多货币</li></ul><h3 id="技巧提示-2"><a href="#技巧提示-2" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>汇率数据实时更新</li><li>支持多货币同时对比</li><li>可查看历史汇率趋势</li></ul><hr><h2 id="4-贷款利息计算工具"><a href="#4-贷款利息计算工具" class="headerlink" title="4. 贷款利息计算工具"></a>4. 贷款利息计算工具</h2><h3 id="功能介绍-3"><a href="#功能介绍-3" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>专业的贷款计算器，支持等额本息、等额本金两种还款方式，可计算组合贷款，并生成详细的还款计划表。</p><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>房贷计算</li><li>车贷计算</li><li>消费贷款规划</li><li>还款方式对比</li></ul><h3 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h4><ol><li><strong>输入贷款金额</strong>：贷款本金总额</li><li><strong>选择贷款期限</strong>：年数或月数</li><li><strong>输入贷款利率</strong>：年利率（%）</li><li><strong>选择还款方式</strong>：<ul><li><strong>等额本息</strong>：每月还款额固定</li><li><strong>等额本金</strong>：每月还款本金固定</li></ul></li></ol><h4 id="等额本息"><a href="#等额本息" class="headerlink" title="等额本息"></a>等额本息</h4><ul><li>特点：每月还款金额相同</li><li>适用：收入稳定的工薪族</li><li>计算：月还款额 &#x3D; [贷款本金×月利率×(1+月利率)^还款月数] &#x2F; [(1+月利率)^还款月数-1]</li></ul><h4 id="等额本金"><a href="#等额本金" class="headerlink" title="等额本金"></a>等额本金</h4><ul><li>特点：每月还款本金相同，利息递减</li><li>适用：前期还款能力较强的借款人</li><li>计算：<ul><li>月还本金 &#x3D; 贷款本金 &#x2F; 还款月数</li><li>月还利息 &#x3D; (本金 - 已归还本金累计额) × 月利率</li></ul></li></ul><h4 id="组合贷款"><a href="#组合贷款" class="headerlink" title="组合贷款"></a>组合贷款</h4><ol><li>分别输入商业贷款和公积金贷款金额</li><li>分别设置对应的利率</li><li>系统自动计算总还款额</li></ol><h4 id="查看还款计划"><a href="#查看还款计划" class="headerlink" title="查看还款计划"></a>查看还款计划</h4><ul><li>每月还款明细</li><li>本金和利息分布</li><li>剩余本金</li><li>总利息支出</li></ul><h3 id="技巧提示-3"><a href="#技巧提示-3" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>可对比两种还款方式的总利息</li><li>支持提前还款计算</li><li>可导出还款计划表</li></ul><hr><h2 id="5-个人所得税计算器"><a href="#5-个人所得税计算器" class="headerlink" title="5. 个人所得税计算器"></a>5. 个人所得税计算器</h2><h3 id="功能介绍-4"><a href="#功能介绍-4" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>全面的个税计算工具，支持工资薪金、年终奖、股票所得和偶然所得的个人所得税计算。</p><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>工资个税计算</li><li>年终奖税后收入计算</li><li>股票收益纳税计算</li><li>中奖奖金税后金额</li></ul><h3 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="工资薪金所得"><a href="#工资薪金所得" class="headerlink" title="工资薪金所得"></a>工资薪金所得</h4><ol><li>输入税前月工资</li><li>输入专项扣除（三险一金）</li><li>输入专项附加扣除：<ul><li>子女教育</li><li>继续教育</li><li>大病医疗</li><li>住房贷款利息</li><li>住房租金</li><li>赡养老人</li></ul></li><li>系统自动计算应纳税额和税后工资</li></ol><h4 id="年终奖计算"><a href="#年终奖计算" class="headerlink" title="年终奖计算"></a>年终奖计算</h4><ol><li>选择计税方式：<ul><li><strong>单独计税</strong>：年终奖单独计算（通常更优惠）</li><li><strong>并入综合所得</strong>：与工资合并计算</li></ul></li><li>输入年终奖金额</li><li>查看税后实际所得</li></ol><h4 id="股票所得"><a href="#股票所得" class="headerlink" title="股票所得"></a>股票所得</h4><ol><li>输入股票收益金额</li><li>选择持股期限</li><li>系统计算应纳税额</li></ol><h4 id="偶然所得（中奖等）"><a href="#偶然所得（中奖等）" class="headerlink" title="偶然所得（中奖等）"></a>偶然所得（中奖等）</h4><ol><li>输入所得金额</li><li>系统按20%税率计算应纳税额</li></ol><h3 id="税率表（综合所得）"><a href="#税率表（综合所得）" class="headerlink" title="税率表（综合所得）"></a>税率表（综合所得）</h3><table><thead><tr><th>级数</th><th>累计预扣预缴应纳税所得额</th><th>税率</th><th>速算扣除数</th></tr></thead><tbody><tr><td>1</td><td>不超过36,000元</td><td>3%</td><td>0</td></tr><tr><td>2</td><td>超过36,000元至144,000元</td><td>10%</td><td>2,520</td></tr><tr><td>3</td><td>超过144,000元至300,000元</td><td>20%</td><td>16,920</td></tr><tr><td>4</td><td>超过300,000元至420,000元</td><td>25%</td><td>31,920</td></tr><tr><td>5</td><td>超过420,000元至660,000元</td><td>30%</td><td>52,920</td></tr><tr><td>6</td><td>超过660,000元至960,000元</td><td>35%</td><td>85,920</td></tr><tr><td>7</td><td>超过960,000元</td><td>45%</td><td>181,920</td></tr></tbody></table><h3 id="技巧提示-4"><a href="#技巧提示-4" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>专项附加扣除可显著降低税负</li><li>年终奖单独计税通常更划算</li><li>可保存常用配置方便下次使用</li></ul><hr><h2 id="6-进制转换工具"><a href="#6-进制转换工具" class="headerlink" title="6. 进制转换工具"></a>6. 进制转换工具</h2><h3 id="功能介绍-5"><a href="#功能介绍-5" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>支持2-36进制之间任意进制的数字转换，包含转换历史记录功能。</p><h3 id="使用场景-5"><a href="#使用场景-5" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>程序员进制转换</li><li>二进制、八进制、十六进制互转</li><li>特殊进制数字处理</li><li>学习和教学</li></ul><h3 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="基础转换-1"><a href="#基础转换-1" class="headerlink" title="基础转换"></a>基础转换</h4><ol><li>选择源进制（2-36）</li><li>输入要转换的数字</li><li>选择目标进制（2-36）</li><li>点击转换查看结果</li></ol><h4 id="常用进制"><a href="#常用进制" class="headerlink" title="常用进制"></a>常用进制</h4><ul><li><strong>2进制（Binary）</strong>：0和1</li><li><strong>8进制（Octal）</strong>：0-7</li><li><strong>10进制（Decimal）</strong>：0-9</li><li><strong>16进制（Hexadecimal）</strong>：0-9, A-F</li></ul><h4 id="高级进制"><a href="#高级进制" class="headerlink" title="高级进制"></a>高级进制</h4><ul><li>支持3-36进制的任意进制</li><li>36进制使用0-9和A-Z表示</li></ul><h3 id="转换示例"><a href="#转换示例" class="headerlink" title="转换示例"></a>转换示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">十进制255转换：</span><br><span class="line">- 二进制：11111111</span><br><span class="line">- 八进制：377</span><br><span class="line">- 十六进制：FF</span><br><span class="line"></span><br><span class="line">十六进制FF转换：</span><br><span class="line">- 二进制：11111111</span><br><span class="line">- 八进制：377</span><br><span class="line">- 十进制：255</span><br></pre></td></tr></table></figure><h3 id="技巧提示-5"><a href="#技巧提示-5" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>支持批量转换</li><li>保存转换历史</li><li>支持负数转换</li></ul><hr><h2 id="7-编解码工具"><a href="#7-编解码工具" class="headerlink" title="7. 编解码工具"></a>7. 编解码工具</h2><h3 id="功能介绍-6"><a href="#功能介绍-6" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>支持Base64、URL、HTML、Unicode等多种编码格式的编码和解码操作。</p><h3 id="使用场景-6"><a href="#使用场景-6" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>Base64图片编码</li><li>URL参数编码</li><li>HTML实体转换</li><li>Unicode字符处理</li><li>邮件内容编码</li></ul><h3 id="使用方法-6"><a href="#使用方法-6" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="Base64编解码"><a href="#Base64编解码" class="headerlink" title="Base64编解码"></a>Base64编解码</h4><ol><li><p><strong>编码</strong>：</p><ul><li>输入原始文本或上传文件</li><li>点击”Base64编码”</li><li>获得编码后的字符串</li></ul></li><li><p><strong>解码</strong>：</p><ul><li>输入Base64字符串</li><li>点击”Base64解码”</li><li>获得原始内容</li></ul></li></ol><h4 id="URL编解码"><a href="#URL编解码" class="headerlink" title="URL编解码"></a>URL编解码</h4><ol><li><p><strong>URL编码</strong>：</p><ul><li>输入需要编码的URL或参数</li><li>点击”URL编码”</li><li>特殊字符转换为%xx格式</li></ul></li><li><p><strong>URL解码</strong>：</p><ul><li>输入编码后的URL</li><li>点击”URL解码”</li><li>恢复原始字符</li></ul></li></ol><h4 id="HTML实体编解码"><a href="#HTML实体编解码" class="headerlink" title="HTML实体编解码"></a>HTML实体编解码</h4><ol><li><p><strong>编码</strong>：将特殊字符转换为HTML实体</p><ul><li><code>&lt;</code> → <code>&amp;lt;</code></li><li><code>&gt;</code> → <code>&amp;gt;</code></li><li><code>&amp;</code> → <code>&amp;amp;</code></li><li><code>&quot;</code> → <code>&amp;quot;</code></li></ul></li><li><p><strong>解码</strong>：将HTML实体还原为字符</p></li></ol><h4 id="Unicode编解码"><a href="#Unicode编解码" class="headerlink" title="Unicode编解码"></a>Unicode编解码</h4><ol><li>支持Unicode字符与\uxxxx格式互转</li><li>支持中文等多语言字符</li></ol><h3 id="技巧提示-6"><a href="#技巧提示-6" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>支持批量编解码</li><li>可以链式编码（先Base64再URL）</li><li>支持文件编解码</li></ul><hr><h2 id="8-加解密工具"><a href="#8-加解密工具" class="headerlink" title="8. 加解密工具"></a>8. 加解密工具</h2><h3 id="功能介绍-7"><a href="#功能介绍-7" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>专业的加密工具，支持对称加密、非对称加密、HMAC签名等多种加密算法。</p><h3 id="使用场景-7"><a href="#使用场景-7" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>数据加密存储</li><li>密码加密</li><li>数字签名验证</li><li>API签名计算</li><li>敏感信息保护</li></ul><h3 id="使用方法-7"><a href="#使用方法-7" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="对称加密（AES-DES-3DES）"><a href="#对称加密（AES-DES-3DES）" class="headerlink" title="对称加密（AES&#x2F;DES&#x2F;3DES）"></a>对称加密（AES&#x2F;DES&#x2F;3DES）</h4><p><strong>AES加密（推荐）</strong></p><ol><li>选择AES算法</li><li>选择模式（ECB、CBC、CTR、GCM等）</li><li>输入密钥（Key）</li><li>输入IV向量（CBC&#x2F;CTR&#x2F;GCM模式需要）</li><li>输入要加密的文本</li><li>点击”加密”获得密文</li></ol><p><strong>AES解密</strong></p><ol><li>使用相同的密钥和IV</li><li>输入密文</li><li>点击”解密”获得原文</li></ol><h4 id="非对称加密（RSA）"><a href="#非对称加密（RSA）" class="headerlink" title="非对称加密（RSA）"></a>非对称加密（RSA）</h4><p><strong>RSA加密</strong></p><ol><li>生成或导入RSA密钥对</li><li>使用公钥加密数据</li><li>使用私钥解密数据</li></ol><p><strong>数字签名</strong></p><ol><li>使用私钥对数据签名</li><li>使用公钥验证签名</li></ol><h4 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h4><p>支持多种Hash算法：</p><ul><li><strong>MD5</strong>：128位（已不推荐用于安全场景）</li><li><strong>SHA-1</strong>：160位（已不推荐用于安全场景）</li><li><strong>SHA-256</strong>：256位（推荐）</li><li><strong>SHA-512</strong>：512位（高安全）</li></ul><p>使用方法：</p><ol><li>选择Hash算法</li><li>输入文本</li><li>点击”计算Hash”</li><li>获得Hash值</li></ol><h4 id="HMAC签名"><a href="#HMAC签名" class="headerlink" title="HMAC签名"></a>HMAC签名</h4><ol><li>选择HMAC算法（HMAC-MD5、HMAC-SHA256等）</li><li>输入密钥（Key）</li><li>输入要签名的数据</li><li>点击”生成签名”</li><li>获得HMAC签名值</li></ol><h3 id="加密模式说明"><a href="#加密模式说明" class="headerlink" title="加密模式说明"></a>加密模式说明</h3><ul><li><strong>ECB模式</strong>：简单但不推荐，相同明文产生相同密文</li><li><strong>CBC模式</strong>：需要IV，更安全，广泛使用</li><li><strong>CTR模式</strong>：流加密模式，可并行处理</li><li><strong>GCM模式</strong>：提供加密和认证，最安全</li></ul><h3 id="技巧提示-7"><a href="#技巧提示-7" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>AES-256-GCM是最安全的对称加密方式</li><li>密钥长度：AES支持128&#x2F;192&#x2F;256位</li><li>IV向量必须随机生成，不可重复使用</li><li>保存好密钥和IV，丢失将无法解密</li></ul><hr><h2 id="9-JWT解析工具"><a href="#9-JWT解析工具" class="headerlink" title="9. JWT解析工具"></a>9. JWT解析工具</h2><h3 id="功能介绍-8"><a href="#功能介绍-8" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>解析和验证JSON Web Token，支持Header、Payload和Signature分析，是Web开发者的必备工具。</p><h3 id="使用场景-8"><a href="#使用场景-8" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>JWT令牌解析</li><li>Token有效期验证</li><li>Token签名验证</li><li>调试认证问题</li></ul><h3 id="使用方法-8"><a href="#使用方法-8" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a>JWT结构</h4><p>JWT由三部分组成，用<code>.</code>分隔：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure><h4 id="解析JWT"><a href="#解析JWT" class="headerlink" title="解析JWT"></a>解析JWT</h4><ol><li>粘贴JWT令牌到输入框</li><li>系统自动解析并显示：<ul><li><strong>Header</strong>：算法和令牌类型</li><li><strong>Payload</strong>：载荷数据</li><li><strong>Signature</strong>：签名信息</li></ul></li></ol><h4 id="查看Header"><a href="#查看Header" class="headerlink" title="查看Header"></a>查看Header</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>alg</code>：签名算法（HS256、RS256等）</li><li><code>typ</code>：令牌类型</li></ul><h4 id="查看Payload"><a href="#查看Payload" class="headerlink" title="查看Payload"></a>查看Payload</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1516242622</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>常见字段：</p><ul><li><code>sub</code>：主题（用户ID）</li><li><code>iat</code>：签发时间</li><li><code>exp</code>：过期时间</li><li><code>iss</code>：签发者</li><li><code>aud</code>：接收者</li></ul><h4 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h4><ol><li>输入密钥（Secret）</li><li>点击”验证签名”</li><li>系统显示签名是否有效</li></ol><h4 id="生成JWT"><a href="#生成JWT" class="headerlink" title="生成JWT"></a>生成JWT</h4><ol><li>输入Header内容</li><li>输入Payload内容</li><li>输入密钥</li><li>选择算法</li><li>点击”生成JWT”</li></ol><h3 id="技巧提示-8"><a href="#技巧提示-8" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>JWT令牌不加密，只是Base64编码</li><li>不要在Payload中存储敏感信息</li><li>注意检查过期时间（exp）</li><li>签名验证需要正确的密钥</li></ul><hr><h2 id="10-单位转换工具"><a href="#10-单位转换工具" class="headerlink" title="10. 单位转换工具"></a>10. 单位转换工具</h2><h3 id="功能介绍-9"><a href="#功能介绍-9" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>全面的单位转换工具，支持长度、重量、面积、体积、密度、温度、时间、速度、数据存储等各类单位转换。</p><h3 id="使用场景-9"><a href="#使用场景-9" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>日常生活单位换算</li><li>工程计算</li><li>烹饪配方转换</li><li>科学研究</li><li>数据存储计算</li></ul><h3 id="使用方法-9"><a href="#使用方法-9" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><ol><li>选择单位类型（如：长度）</li><li>输入数值</li><li>选择源单位</li><li>选择目标单位</li><li>系统自动显示转换结果</li></ol><h3 id="支持的单位类型"><a href="#支持的单位类型" class="headerlink" title="支持的单位类型"></a>支持的单位类型</h3><h4 id="1-长度单位"><a href="#1-长度单位" class="headerlink" title="1. 长度单位"></a>1. 长度单位</h4><ul><li>毫米（mm）</li><li>厘米（cm）</li><li>分米（dm）</li><li>米（m）</li><li>千米（km）</li><li>英寸（inch）</li><li>英尺（foot）</li><li>码（yard）</li><li>英里（mile）</li><li>海里（nautical mile）</li></ul><h4 id="2-重量单位"><a href="#2-重量单位" class="headerlink" title="2. 重量单位"></a>2. 重量单位</h4><ul><li>毫克（mg）</li><li>克（g）</li><li>千克（kg）</li><li>吨（t）</li><li>盎司（oz）</li><li>磅（lb）</li><li>英吨（ton）</li></ul><h4 id="3-面积单位"><a href="#3-面积单位" class="headerlink" title="3. 面积单位"></a>3. 面积单位</h4><ul><li>平方毫米（mm²）</li><li>平方厘米（cm²）</li><li>平方米（m²）</li><li>公顷（ha）</li><li>平方千米（km²）</li><li>平方英寸（in²）</li><li>平方英尺（ft²）</li><li>英亩（acre）</li><li>平方英里（mi²）</li></ul><h4 id="4-体积单位"><a href="#4-体积单位" class="headerlink" title="4. 体积单位"></a>4. 体积单位</h4><ul><li>毫升（ml）</li><li>升（L）</li><li>立方米（m³）</li><li>立方厘米（cm³）</li><li>加仑（gallon）</li><li>盎司（fl oz）</li><li>品脱（pint）</li><li>夸脱（quart）</li></ul><h4 id="5-温度单位"><a href="#5-温度单位" class="headerlink" title="5. 温度单位"></a>5. 温度单位</h4><ul><li>摄氏度（℃）</li><li>华氏度（℉）</li><li>开尔文（K）</li></ul><p>温度转换公式：</p><ul><li>℃ to ℉: F &#x3D; C × 9&#x2F;5 + 32</li><li>℉ to ℃: C &#x3D; (F - 32) × 5&#x2F;9</li><li>℃ to K: K &#x3D; C + 273.15</li></ul><h4 id="6-时间单位"><a href="#6-时间单位" class="headerlink" title="6. 时间单位"></a>6. 时间单位</h4><ul><li>毫秒（ms）</li><li>秒（s）</li><li>分钟（min）</li><li>小时（h）</li><li>天（day）</li><li>周（week）</li><li>月（month）</li><li>年（year）</li></ul><h4 id="7-速度单位"><a href="#7-速度单位" class="headerlink" title="7. 速度单位"></a>7. 速度单位</h4><ul><li>米&#x2F;秒（m&#x2F;s）</li><li>千米&#x2F;小时（km&#x2F;h）</li><li>英里&#x2F;小时（mph）</li><li>节（knot）</li><li>马赫（Mach）</li></ul><h4 id="8-数据存储单位"><a href="#8-数据存储单位" class="headerlink" title="8. 数据存储单位"></a>8. 数据存储单位</h4><ul><li>位（bit）</li><li>字节（Byte）</li><li>KB（Kilobyte）</li><li>MB（Megabyte）</li><li>GB（Gigabyte）</li><li>TB（Terabyte）</li><li>PB（Petabyte）</li></ul><p>注意：</p><ul><li>1 Byte &#x3D; 8 bits</li><li>1 KB &#x3D; 1024 Bytes</li><li>1 MB &#x3D; 1024 KB</li></ul><h3 id="技巧提示-9"><a href="#技巧提示-9" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>支持常用单位快速转换</li><li>保存常用转换配置</li><li>支持批量转换</li></ul><hr><h2 id="11-正则表达式工具"><a href="#11-正则表达式工具" class="headerlink" title="11. 正则表达式工具"></a>11. 正则表达式工具</h2><h3 id="功能介绍-10"><a href="#功能介绍-10" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>强大的正则表达式测试、匹配和替换工具，支持常用模板和历史记录，是开发者的利器。</p><h3 id="使用场景-10"><a href="#使用场景-10" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>文本匹配和搜索</li><li>数据验证（邮箱、手机号等）</li><li>文本替换和处理</li><li>日志分析</li><li>爬虫数据提取</li></ul><h3 id="使用方法-10"><a href="#使用方法-10" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="正则测试"><a href="#正则测试" class="headerlink" title="正则测试"></a>正则测试</h4><ol><li><strong>输入正则表达式</strong>：在正则输入框中输入表达式</li><li><strong>输入测试文本</strong>：在文本框中输入要匹配的内容</li><li><strong>设置匹配选项</strong>：<ul><li><code>g</code>（global）：全局匹配</li><li><code>i</code>（ignoreCase）：忽略大小写</li><li><code>m</code>（multiline）：多行匹配</li><li><code>s</code>（dotAll）：.匹配任意字符包括换行符</li></ul></li><li><strong>查看匹配结果</strong>：系统高亮显示匹配的部分</li></ol><h4 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h4><ol><li>输入正则表达式</li><li>输入替换模式</li><li>输入原始文本</li><li>查看替换结果</li></ol><p>替换示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原文：Hello World</span><br><span class="line">正则：(\w+)\s(\w+)</span><br><span class="line">替换：$2 $1</span><br><span class="line">结果：World Hello</span><br></pre></td></tr></table></figure><h3 id="常用正则模板"><a href="#常用正则模板" class="headerlink" title="常用正则模板"></a>常用正则模板</h3><h4 id="1-邮箱验证"><a href="#1-邮箱验证" class="headerlink" title="1. 邮箱验证"></a>1. 邮箱验证</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$</span><br></pre></td></tr></table></figure><h4 id="2-手机号（中国）"><a href="#2-手机号（中国）" class="headerlink" title="2. 手机号（中国）"></a>2. 手机号（中国）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^1[3-9]\d&#123;9&#125;$</span><br></pre></td></tr></table></figure><h4 id="3-身份证号（中国）"><a href="#3-身份证号（中国）" class="headerlink" title="3. 身份证号（中国）"></a>3. 身份证号（中国）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^[1-9]\d&#123;5&#125;(18|19|20)\d&#123;2&#125;(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;[\dXx]$</span><br></pre></td></tr></table></figure><h4 id="4-URL"><a href="#4-URL" class="headerlink" title="4. URL"></a>4. URL</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$</span><br></pre></td></tr></table></figure><h4 id="5-IP地址"><a href="#5-IP地址" class="headerlink" title="5. IP地址"></a>5. IP地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]?\d\d?)$</span><br></pre></td></tr></table></figure><h4 id="6-日期（YYYY-MM-DD）"><a href="#6-日期（YYYY-MM-DD）" class="headerlink" title="6. 日期（YYYY-MM-DD）"></a>6. 日期（YYYY-MM-DD）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^\d&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$</span><br></pre></td></tr></table></figure><h4 id="7-整数"><a href="#7-整数" class="headerlink" title="7. 整数"></a>7. 整数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^-?\d+$</span><br></pre></td></tr></table></figure><h4 id="8-小数"><a href="#8-小数" class="headerlink" title="8. 小数"></a>8. 小数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^-?\d+\.\d+$</span><br></pre></td></tr></table></figure><h4 id="9-中文字符"><a href="#9-中文字符" class="headerlink" title="9. 中文字符"></a>9. 中文字符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^[\u4e00-\u9fa5]+$</span><br></pre></td></tr></table></figure><h4 id="10-密码强度（8位以上，包含大小写字母和数字）"><a href="#10-密码强度（8位以上，包含大小写字母和数字）" class="headerlink" title="10. 密码强度（8位以上，包含大小写字母和数字）"></a>10. 密码强度（8位以上，包含大小写字母和数字）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]&#123;8,&#125;$</span><br></pre></td></tr></table></figure><h3 id="正则语法速查"><a href="#正则语法速查" class="headerlink" title="正则语法速查"></a>正则语法速查</h3><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><ul><li><code>.</code> - 匹配任意字符（除换行符）</li><li><code>\d</code> - 匹配数字 [0-9]</li><li><code>\D</code> - 匹配非数字</li><li><code>\w</code> - 匹配字母数字下划线 [a-zA-Z0-9_]</li><li><code>\W</code> - 匹配非字母数字下划线</li><li><code>\s</code> - 匹配空白字符</li><li><code>\S</code> - 匹配非空白字符</li></ul><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><ul><li><code>*</code> - 0次或多次</li><li><code>+</code> - 1次或多次</li><li><code>?</code> - 0次或1次</li><li><code>{n}</code> - 恰好n次</li><li><code>{n,}</code> - 至少n次</li><li><code>{n,m}</code> - n到m次</li></ul><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><ul><li><code>^</code> - 字符串开始</li><li><code>$</code> - 字符串结束</li><li><code>\b</code> - 单词边界</li><li><code>\B</code> - 非单词边界</li></ul><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><ul><li><code>(...)</code> - 捕获组</li><li><code>(?:...)</code> - 非捕获组</li><li><code>(?=...)</code> - 正向前瞻</li><li><code>(?!...)</code> - 负向前瞻</li></ul><h3 id="技巧提示-10"><a href="#技巧提示-10" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>使用模板库快速选择常用正则</li><li>保存常用正则表达式</li><li>导出&#x2F;导入正则配置</li><li>查看匹配详情和捕获组</li></ul><hr><h2 id="12-Cron表达式生成工具"><a href="#12-Cron表达式生成工具" class="headerlink" title="12. Cron表达式生成工具"></a>12. Cron表达式生成工具</h2><h3 id="功能介绍-11"><a href="#功能介绍-11" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>可视化配置定时任务Cron表达式，支持Quartz和Spring格式，让复杂的Cron表达式变得简单易懂。</p><h3 id="使用场景-11"><a href="#使用场景-11" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>定时任务配置</li><li>任务调度设置</li><li>自动化脚本执行</li><li>系统维护任务</li></ul><h3 id="使用方法-11"><a href="#使用方法-11" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="Cron表达式结构"><a href="#Cron表达式结构" class="headerlink" title="Cron表达式结构"></a>Cron表达式结构</h4><p><strong>标准Cron（5位）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * *</span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ └─ 星期几 (0-7, 0和7都表示周日)</span><br><span class="line">│ │ │ └─── 月份 (1-12)</span><br><span class="line">│ │ └───── 日期 (1-31)</span><br><span class="line">│ └─────── 小时 (0-23)</span><br><span class="line">└───────── 分钟 (0-59)</span><br></pre></td></tr></table></figure><p><strong>Quartz&#x2F;Spring Cron（6-7位）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * * * *</span><br><span class="line">│ │ │ │ │ │ │</span><br><span class="line">│ │ │ │ │ │ └─ 年份 (可选)</span><br><span class="line">│ │ │ │ │ └─── 星期几 (1-7, 1=周日)</span><br><span class="line">│ │ │ │ └───── 月份 (1-12)</span><br><span class="line">│ │ │ └─────── 日期 (1-31)</span><br><span class="line">│ │ └───────── 小时 (0-23)</span><br><span class="line">│ └─────────── 分钟 (0-59)</span><br><span class="line">└───────────── 秒 (0-59)</span><br></pre></td></tr></table></figure><h4 id="可视化配置"><a href="#可视化配置" class="headerlink" title="可视化配置"></a>可视化配置</h4><ol><li><p><strong>秒&#x2F;分钟&#x2F;小时</strong>：</p><ul><li>每秒&#x2F;分钟&#x2F;小时</li><li>指定时间</li><li>时间范围</li><li>间隔执行</li></ul></li><li><p><strong>日期</strong>：</p><ul><li>每天</li><li>指定日期</li><li>工作日</li><li>最后一天</li></ul></li><li><p><strong>月份</strong>：</p><ul><li>每月</li><li>指定月份</li><li>月份范围</li></ul></li><li><p><strong>星期</strong>：</p><ul><li>每天</li><li>指定星期几</li><li>工作日（周一至周五）</li><li>周末</li></ul></li><li><p><strong>年份</strong>（可选）：</p><ul><li>每年</li><li>指定年份</li><li>年份范围</li></ul></li></ol><h4 id="特殊字符说明"><a href="#特殊字符说明" class="headerlink" title="特殊字符说明"></a>特殊字符说明</h4><ul><li><code>*</code> - 所有值</li><li><code>?</code> - 不指定值（仅用于日期和星期）</li><li><code>-</code> - 范围（如 1-5）</li><li><code>,</code> - 列表（如 1,3,5）</li><li><code>/</code> - 增量（如 0&#x2F;5 表示从0开始每5个单位）</li><li><code>L</code> - 最后（如 L 表示月份最后一天）</li><li><code>W</code> - 工作日（如 15W 表示最近的工作日）</li><li><code>#</code> - 第几个星期几（如 6#3 表示第3个星期五）</li></ul><h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><h4 id="1-每天上午10-15执行"><a href="#1-每天上午10-15执行" class="headerlink" title="1. 每天上午10:15执行"></a>1. 每天上午10:15执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 15 10 * * ?</span><br><span class="line">0 15 10 ? * *</span><br></pre></td></tr></table></figure><h4 id="2-每隔5分钟执行"><a href="#2-每隔5分钟执行" class="headerlink" title="2. 每隔5分钟执行"></a>2. 每隔5分钟执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 */5 * * * ?</span><br></pre></td></tr></table></figure><h4 id="3-每天9-00-17-00每小时执行"><a href="#3-每天9-00-17-00每小时执行" class="headerlink" title="3. 每天9:00-17:00每小时执行"></a>3. 每天9:00-17:00每小时执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 9-17 * * ?</span><br></pre></td></tr></table></figure><h4 id="4-每周一上午9-00执行"><a href="#4-每周一上午9-00执行" class="headerlink" title="4. 每周一上午9:00执行"></a>4. 每周一上午9:00执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 9 ? * MON</span><br><span class="line">0 0 9 ? * 2</span><br></pre></td></tr></table></figure><h4 id="5-每月1号凌晨0-00执行"><a href="#5-每月1号凌晨0-00执行" class="headerlink" title="5. 每月1号凌晨0:00执行"></a>5. 每月1号凌晨0:00执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 0 1 * ?</span><br></pre></td></tr></table></figure><h4 id="6-每月最后一天23-59执行"><a href="#6-每月最后一天23-59执行" class="headerlink" title="6. 每月最后一天23:59执行"></a>6. 每月最后一天23:59执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 59 23 L * ?</span><br></pre></td></tr></table></figure><h4 id="7-工作日上午10-00执行"><a href="#7-工作日上午10-00执行" class="headerlink" title="7. 工作日上午10:00执行"></a>7. 工作日上午10:00执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 10 ? * MON-FRI</span><br></pre></td></tr></table></figure><h4 id="8-每季度第一天执行"><a href="#8-每季度第一天执行" class="headerlink" title="8. 每季度第一天执行"></a>8. 每季度第一天执行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 0 0 1 1,4,7,10 ?</span><br></pre></td></tr></table></figure><h3 id="执行时间预览"><a href="#执行时间预览" class="headerlink" title="执行时间预览"></a>执行时间预览</h3><p>工具会显示接下来10次执行的具体时间，帮助您验证配置是否正确。</p><h3 id="技巧提示-11"><a href="#技巧提示-11" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>日期和星期不能同时使用，其中一个必须为<code>?</code></li><li>使用可视化配置避免语法错误</li><li>查看执行时间预览验证配置</li><li>保存常用Cron表达式</li></ul><hr><h2 id="13-解压缩工具"><a href="#13-解压缩工具" class="headerlink" title="13. 解压缩工具"></a>13. 解压缩工具</h2><h3 id="功能介绍-12"><a href="#功能介绍-12" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>支持Gzip、Deflate、LZ-String等多种压缩算法的压缩和解压操作，可用于文本压缩和数据传输优化。</p><h3 id="使用场景-12"><a href="#使用场景-12" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>文本数据压缩</li><li>HTTP响应压缩</li><li>本地存储优化</li><li>数据传输优化</li><li>日志文件压缩</li></ul><h3 id="使用方法-12"><a href="#使用方法-12" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="Gzip压缩-解压"><a href="#Gzip压缩-解压" class="headerlink" title="Gzip压缩&#x2F;解压"></a>Gzip压缩&#x2F;解压</h4><p><strong>压缩</strong></p><ol><li>选择Gzip压缩</li><li>输入原始文本</li><li>设置压缩级别（1-9，9为最高压缩）</li><li>点击”压缩”</li><li>获得压缩后的数据（Base64编码）</li></ol><p><strong>解压</strong></p><ol><li>选择Gzip解压</li><li>输入压缩数据（Base64格式）</li><li>点击”解压”</li><li>获得原始文本</li></ol><h4 id="Deflate压缩-解压"><a href="#Deflate压缩-解压" class="headerlink" title="Deflate压缩&#x2F;解压"></a>Deflate压缩&#x2F;解压</h4><p>使用方法与Gzip类似，Deflate是Gzip的底层算法，不包含文件头和校验和。</p><h4 id="LZ-String压缩"><a href="#LZ-String压缩" class="headerlink" title="LZ-String压缩"></a>LZ-String压缩</h4><p><strong>特点</strong></p><ul><li>专为文本优化</li><li>压缩率高</li><li>适合浏览器环境</li><li>支持UTF-16编码</li></ul><p><strong>压缩模式</strong></p><ol><li><strong>标准压缩</strong>：适用于一般场景</li><li><strong>UTF16压缩</strong>：针对Unicode字符优化</li><li><strong>Base64压缩</strong>：输出Base64格式</li><li><strong>URI编码压缩</strong>：适用于URL传输</li></ol><p><strong>使用步骤</strong></p><ol><li>选择LZ-String算法</li><li>选择压缩模式</li><li>输入文本</li><li>点击压缩&#x2F;解压</li></ol><h3 id="压缩效果对比"><a href="#压缩效果对比" class="headerlink" title="压缩效果对比"></a>压缩效果对比</h3><h4 id="文本示例"><a href="#文本示例" class="headerlink" title="文本示例"></a>文本示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原文: &quot;Hello World! This is a test message for compression.&quot;</span><br><span class="line">长度: 53字符</span><br><span class="line"></span><br><span class="line">Gzip压缩后: 约35字节（Base64编码）</span><br><span class="line">Deflate压缩后: 约33字节（Base64编码）</span><br><span class="line">LZ-String压缩后: 约40字符</span><br></pre></td></tr></table></figure><h3 id="压缩级别说明（Gzip-Deflate）"><a href="#压缩级别说明（Gzip-Deflate）" class="headerlink" title="压缩级别说明（Gzip&#x2F;Deflate）"></a>压缩级别说明（Gzip&#x2F;Deflate）</h3><ul><li><strong>1-3</strong>：快速压缩，压缩率较低</li><li><strong>4-6</strong>：平衡模式（推荐）</li><li><strong>7-9</strong>：最大压缩，速度较慢</li></ul><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><h4 id="选择Gzip-Deflate适用于："><a href="#选择Gzip-Deflate适用于：" class="headerlink" title="选择Gzip&#x2F;Deflate适用于："></a>选择Gzip&#x2F;Deflate适用于：</h4><ul><li>HTTP响应压缩</li><li>文件存储压缩</li><li>需要跨平台解压</li><li>标准化压缩需求</li></ul><h4 id="选择LZ-String适用于："><a href="#选择LZ-String适用于：" class="headerlink" title="选择LZ-String适用于："></a>选择LZ-String适用于：</h4><ul><li>浏览器本地存储（localStorage）</li><li>URL参数传递</li><li>JavaScript环境</li><li>快速压缩需求</li></ul><h3 id="技巧提示-12"><a href="#技巧提示-12" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>压缩前后大小对比</li><li>显示压缩率</li><li>支持文件上传压缩</li><li>批量压缩功能</li></ul><hr><h2 id="14-代码格式化工具"><a href="#14-代码格式化工具" class="headerlink" title="14. 代码格式化工具"></a>14. 代码格式化工具</h2><h3 id="功能介绍-13"><a href="#功能介绍-13" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>专业的代码格式化工具，支持JSON、XML、HTML、CSS、SQL、JavaScript、Python等多种语言和格式。</p><h3 id="使用场景-13"><a href="#使用场景-13" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>代码美化</li><li>压缩代码还原</li><li>代码标准化</li><li>代码审查</li><li>学习和调试</li></ul><h3 id="使用方法-13"><a href="#使用方法-13" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="JSON格式化"><a href="#JSON格式化" class="headerlink" title="JSON格式化"></a>JSON格式化</h4><p><strong>格式化</strong></p><ol><li>粘贴JSON字符串</li><li>选择缩进（2空格&#x2F;4空格&#x2F;Tab）</li><li>点击”格式化”</li><li>获得美化后的JSON</li></ol><p><strong>压缩</strong></p><ol><li>粘贴格式化的JSON</li><li>点击”压缩”</li><li>获得压缩的单行JSON</li></ol><p><strong>JSON验证</strong></p><ul><li>自动检测JSON语法错误</li><li>高亮显示错误位置</li><li>提供错误提示</li></ul><p><strong>高级功能</strong></p><ul><li>排序键名</li><li>转义&#x2F;反转义Unicode</li><li>移除注释</li><li>树形视图展示</li></ul><h4 id="XML格式化"><a href="#XML格式化" class="headerlink" title="XML格式化"></a>XML格式化</h4><p><strong>格式化XML</strong></p><ol><li>粘贴XML文本</li><li>选择缩进大小</li><li>点击”格式化”</li><li>获得格式化的XML</li></ol><p><strong>压缩XML</strong></p><ul><li>移除所有空白和换行</li><li>生成单行XML</li></ul><p><strong>验证XML</strong></p><ul><li>检查XML格式是否正确</li><li>显示语法错误</li></ul><h4 id="HTML格式化"><a href="#HTML格式化" class="headerlink" title="HTML格式化"></a>HTML格式化</h4><p><strong>格式化HTML</strong></p><ol><li>粘贴HTML代码</li><li>选择缩进方式</li><li>点击”格式化”</li><li>获得美化的HTML</li></ol><p><strong>压缩HTML</strong></p><ul><li>移除空白字符</li><li>移除注释（可选）</li><li>压缩inline样式</li></ul><p><strong>HTML美化选项</strong></p><ul><li>保留属性引号</li><li>换行规则自定义</li><li>保留&#x2F;移除注释</li></ul><h4 id="CSS格式化"><a href="#CSS格式化" class="headerlink" title="CSS格式化"></a>CSS格式化</h4><p><strong>格式化CSS</strong></p><ol><li>粘贴CSS代码</li><li>选择格式化风格</li><li>点击”格式化”</li></ol><p><strong>CSS压缩</strong></p><ul><li>移除空白和注释</li><li>合并选择器</li><li>简化颜色值</li><li>移除无用代码</li></ul><p><strong>CSS美化选项</strong></p><ul><li>属性排序</li><li>添加浏览器前缀</li><li>颜色格式转换</li></ul><h4 id="SQL格式化"><a href="#SQL格式化" class="headerlink" title="SQL格式化"></a>SQL格式化</h4><p><strong>格式化SQL</strong></p><ol><li>粘贴SQL语句</li><li>选择数据库类型（MySQL&#x2F;PostgreSQL&#x2F;SQL Server等）</li><li>点击”格式化”</li></ol><p><strong>SQL美化选项</strong></p><ul><li>关键字大写&#x2F;小写</li><li>缩进样式</li><li>换行规则</li></ul><p><strong>SQL示例</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 格式化前</span></span><br><span class="line"><span class="keyword">select</span> id,name,age <span class="keyword">from</span> users <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">18</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span> limit <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式化后</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    users</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    age <span class="operator">&gt;</span> <span class="number">18</span></span><br><span class="line">    <span class="keyword">AND</span> status <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    id <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript格式化"><a href="#JavaScript格式化" class="headerlink" title="JavaScript格式化"></a>JavaScript格式化</h4><p><strong>格式化JS</strong></p><ol><li>粘贴JavaScript代码</li><li>选择编码风格（Standard&#x2F;Airbnb&#x2F;Google）</li><li>点击”格式化”</li></ol><p><strong>JS压缩&#x2F;混淆</strong></p><ul><li>变量名缩短</li><li>移除注释和空白</li><li>代码优化</li></ul><h4 id="Python格式化"><a href="#Python格式化" class="headerlink" title="Python格式化"></a>Python格式化</h4><p><strong>格式化Python</strong></p><ol><li>粘贴Python代码</li><li>选择PEP 8标准</li><li>点击”格式化”</li></ol><p><strong>Python格式化特点</strong></p><ul><li>符合PEP 8规范</li><li>自动调整缩进（4空格）</li><li>行长度控制（79&#x2F;120字符）</li></ul><h3 id="格式化配置"><a href="#格式化配置" class="headerlink" title="格式化配置"></a>格式化配置</h3><h4 id="通用选项"><a href="#通用选项" class="headerlink" title="通用选项"></a>通用选项</h4><ul><li>缩进大小：2&#x2F;4&#x2F;8空格或Tab</li><li>行宽限制：80&#x2F;100&#x2F;120字符</li><li>引号风格：单引号&#x2F;双引号</li><li>分号：保留&#x2F;移除&#x2F;添加</li></ul><h4 id="特定语言选项"><a href="#特定语言选项" class="headerlink" title="特定语言选项"></a>特定语言选项</h4><p>各语言有专门的配置选项，可保存预设配置。</p><h3 id="技巧提示-13"><a href="#技巧提示-13" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>支持语法高亮</li><li>代码diff对比</li><li>导入&#x2F;导出配置</li><li>批量格式化文件</li><li>保存常用配置</li></ul><hr><h2 id="15-CSV展示工具"><a href="#15-CSV展示工具" class="headerlink" title="15. CSV展示工具"></a>15. CSV展示工具</h2><h3 id="功能介绍-14"><a href="#功能介绍-14" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>强大的CSV文件查看器，支持表格展示、分页、搜索和排序功能，让CSV数据一目了然。</p><h3 id="使用场景-14"><a href="#使用场景-14" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>查看CSV数据文件</li><li>数据预览和分析</li><li>导出数据查看</li><li>数据库导出文件查看</li><li>Excel转CSV查看</li></ul><h3 id="使用方法-14"><a href="#使用方法-14" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="导入CSV文件"><a href="#导入CSV文件" class="headerlink" title="导入CSV文件"></a>导入CSV文件</h4><p><strong>方式1：上传文件</strong></p><ol><li>点击”选择文件”或拖拽文件</li><li>选择CSV文件</li><li>系统自动解析并显示</li></ol><p><strong>方式2：粘贴文本</strong></p><ol><li>点击”粘贴CSV文本”</li><li>粘贴CSV格式的文本</li><li>点击”解析”</li></ol><h4 id="CSV解析选项"><a href="#CSV解析选项" class="headerlink" title="CSV解析选项"></a>CSV解析选项</h4><p><strong>分隔符设置</strong></p><ul><li>逗号（,）- 标准CSV</li><li>分号（;）- 欧洲格式</li><li>制表符（\t）- TSV格式</li><li>自定义分隔符</li></ul><p><strong>编码设置</strong></p><ul><li>UTF-8（推荐）</li><li>GBK&#x2F;GB2312（中文）</li><li>ISO-8859-1</li><li>自动检测</li></ul><p><strong>高级选项</strong></p><ul><li>首行作为表头</li><li>跳过空行</li><li>去除引号</li><li>字段修剪（去除首尾空格）</li></ul><h4 id="数据展示功能"><a href="#数据展示功能" class="headerlink" title="数据展示功能"></a>数据展示功能</h4><p><strong>表格视图</strong></p><ul><li>清晰的表格展示</li><li>固定表头</li><li>斑马纹行</li><li>响应式布局</li></ul><p><strong>分页功能</strong></p><ul><li>设置每页显示行数（10&#x2F;25&#x2F;50&#x2F;100）</li><li>上一页&#x2F;下一页</li><li>跳转到指定页</li><li>显示总行数和当前页</li></ul><p><strong>搜索功能</strong></p><ul><li>全表搜索</li><li>列搜索</li><li>大小写敏感&#x2F;不敏感</li><li>正则表达式搜索</li></ul><p><strong>排序功能</strong></p><ul><li>点击列头排序</li><li>升序&#x2F;降序切换</li><li>多列排序</li><li>数字&#x2F;文本&#x2F;日期智能排序</li></ul><p><strong>筛选功能</strong></p><ul><li>列值筛选</li><li>条件筛选（等于&#x2F;不等于&#x2F;包含&#x2F;不包含）</li><li>范围筛选</li><li>多条件组合</li></ul><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><p><strong>列管理</strong></p><ul><li>显示&#x2F;隐藏列</li><li>调整列宽</li><li>列顺序调整</li><li>列重命名</li></ul><p><strong>数据编辑</strong></p><ul><li>单元格编辑</li><li>批量修改</li><li>复制单元格</li><li>复制行&#x2F;列</li></ul><p><strong>数据导出</strong></p><ul><li>导出为CSV</li><li>导出为Excel</li><li>导出为JSON</li><li>导出为SQL</li><li>导出选中数据</li><li>导出筛选后数据</li></ul><h4 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h4><ul><li>总行数&#x2F;列数</li><li>数字列统计（总和&#x2F;平均&#x2F;最大&#x2F;最小）</li><li>列数据类型识别</li><li>空值统计</li></ul><h3 id="CSV格式说明"><a href="#CSV格式说明" class="headerlink" title="CSV格式说明"></a>CSV格式说明</h3><h4 id="标准CSV格式"><a href="#标准CSV格式" class="headerlink" title="标准CSV格式"></a>标准CSV格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名,年龄,城市</span><br><span class="line">张三,25,北京</span><br><span class="line">李四,30,上海</span><br><span class="line">王五,28,深圳</span><br></pre></td></tr></table></figure><h4 id="包含逗号的字段（需要引号）"><a href="#包含逗号的字段（需要引号）" class="headerlink" title="包含逗号的字段（需要引号）"></a>包含逗号的字段（需要引号）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名,公司,薪资</span><br><span class="line">张三,&quot;ABC科技有限公司&quot;,15000</span><br><span class="line">李四,&quot;XYZ集团&quot;,20000</span><br></pre></td></tr></table></figure><h4 id="包含换行的字段"><a href="#包含换行的字段" class="headerlink" title="包含换行的字段"></a>包含换行的字段</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名,地址</span><br><span class="line">张三,&quot;北京市朝阳区</span><br><span class="line">三里屯街道&quot;</span><br></pre></td></tr></table></figure><h3 id="技巧提示-14"><a href="#技巧提示-14" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>大文件支持（可处理几十万行）</li><li>虚拟滚动优化性能</li><li>支持快捷键操作</li><li>保存列配置</li><li>数据对比功能</li></ul><hr><h2 id="16-JSON数组展示工具"><a href="#16-JSON数组展示工具" class="headerlink" title="16. JSON数组展示工具"></a>16. JSON数组展示工具</h2><h3 id="功能介绍-15"><a href="#功能介绍-15" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>专业的JSON数据查看器，解析JSON数组数据并以表格形式展示，支持列管理、筛选和数据导出。</p><h3 id="使用场景-15"><a href="#使用场景-15" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>API响应数据查看</li><li>JSON文件分析</li><li>数据库导出JSON查看</li><li>JSON数据格式转换</li><li>数据抽取和分析</li></ul><h3 id="使用方法-15"><a href="#使用方法-15" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="导入JSON数据"><a href="#导入JSON数据" class="headerlink" title="导入JSON数据"></a>导入JSON数据</h4><p><strong>方式1：粘贴JSON</strong></p><ol><li>在输入框粘贴JSON数组</li><li>点击”解析”</li><li>系统自动转换为表格</li></ol><p><strong>方式2：上传JSON文件</strong></p><ol><li>点击”上传文件”</li><li>选择.json文件</li><li>自动解析并显示</li></ol><p><strong>方式3：从URL加载</strong></p><ol><li>输入JSON数据URL</li><li>点击”加载”</li><li>自动获取并解析</li></ol><h4 id="JSON格式要求"><a href="#JSON格式要求" class="headerlink" title="JSON格式要求"></a>JSON格式要求</h4><p><strong>数组格式</strong>（推荐）</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><strong>对象格式</strong>（自动转换）</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="表格展示功能"><a href="#表格展示功能" class="headerlink" title="表格展示功能"></a>表格展示功能</h4><p><strong>自动表格化</strong></p><ul><li>JSON字段自动转为表格列</li><li>嵌套对象展开或折叠显示</li><li>数组字段特殊处理</li><li>数据类型自动识别</li></ul><p><strong>列管理</strong></p><ul><li>显示&#x2F;隐藏列</li><li>列宽调整</li><li>列顺序拖拽</li><li>列固定（左侧&#x2F;右侧）</li></ul><p><strong>数据处理</strong></p><ul><li>自动展平嵌套结构</li><li>数组字段格式化</li><li>日期格式化</li><li>数字格式化</li></ul><h4 id="高级功能-1"><a href="#高级功能-1" class="headerlink" title="高级功能"></a>高级功能</h4><p><strong>JSONPath查询</strong></p><ol><li>输入JSONPath表达式</li><li>点击”查询”</li><li>显示匹配的数据</li></ol><p>JSONPath示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.data[*].name         // 获取所有name字段</span><br><span class="line">$..price              // 递归获取所有price字段</span><br><span class="line">$.data[?(@.age&gt;25)]   // 条件查询</span><br></pre></td></tr></table></figure><p><strong>树形视图</strong></p><ul><li>切换到树形展示</li><li>展开&#x2F;折叠节点</li><li>显示数据层级</li><li>复制节点路径</li></ul><p><strong>比较视图</strong></p><ul><li>比较两个JSON</li><li>高亮显示差异</li><li>并排对比</li><li>导出差异报告</li></ul><h4 id="数据筛选和排序"><a href="#数据筛选和排序" class="headerlink" title="数据筛选和排序"></a>数据筛选和排序</h4><p><strong>筛选功能</strong></p><ul><li>按列值筛选</li><li>高级筛选条件</li><li>多条件组合</li><li>正则表达式筛选</li></ul><p><strong>排序功能</strong></p><ul><li>单列排序</li><li>多列排序</li><li>自定义排序规则</li><li>恢复原始顺序</li></ul><h4 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h4><p><strong>导出格式</strong></p><ol><li><strong>CSV格式</strong>：适合Excel打开</li><li><strong>Excel格式</strong>：直接生成.xlsx文件</li><li><strong>HTML表格</strong>：网页展示</li><li><strong>SQL语句</strong>：生成INSERT语句</li><li><strong>JSON格式</strong>：导出处理后的JSON</li><li><strong>Markdown表格</strong>：文档展示</li></ol><p><strong>导出选项</strong></p><ul><li>导出全部数据</li><li>导出当前页</li><li>导出选中行</li><li>导出筛选后数据</li></ul><h4 id="数据编辑"><a href="#数据编辑" class="headerlink" title="数据编辑"></a>数据编辑</h4><p><strong>单元格编辑</strong></p><ol><li>双击单元格</li><li>修改内容</li><li>回车保存</li></ol><p><strong>批量编辑</strong></p><ul><li>批量替换</li><li>批量修改</li><li>批量删除</li></ul><p><strong>数据添加</strong></p><ul><li>添加新行</li><li>复制行</li><li>插入行</li></ul><h3 id="JSON数据示例"><a href="#JSON数据示例" class="headerlink" title="JSON数据示例"></a>JSON数据示例</h3><h4 id="简单数组"><a href="#简单数组" class="headerlink" title="简单数组"></a>简单数组</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;产品A&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">99.99</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;产品B&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">149.99</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="嵌套对象"><a href="#嵌套对象" class="headerlink" title="嵌套对象"></a>嵌套对象</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan@example.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;001&quot;</span><span class="punctuation">,</span> <span class="string">&quot;002&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>展示为：</p><table><thead><tr><th>id</th><th>user.name</th><th>user.email</th><th>orders</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td><a href="mailto:&#122;&#104;&#x61;&#110;&#103;&#x73;&#97;&#110;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#x6d;">zhangsan@example.com</a></td><td>001,002</td></tr></tbody></table><h3 id="技巧提示-15"><a href="#技巧提示-15" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>支持大数据量（10万+记录）</li><li>虚拟滚动优化性能</li><li>快捷键快速操作</li><li>保存视图配置</li><li>分享数据链接</li></ul><hr><h2 id="17-报表展示工具"><a href="#17-报表展示工具" class="headerlink" title="17. 报表展示工具"></a>17. 报表展示工具</h2><h3 id="功能介绍-16"><a href="#功能介绍-16" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>强大的数据可视化工具，支持柱状图、折线图、饼图、雷达图等多种图表类型，让数据分析更直观。</p><h3 id="使用场景-16"><a href="#使用场景-16" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>数据可视化展示</li><li>业务报表生成</li><li>数据分析报告</li><li>趋势分析</li><li>统计图表制作</li></ul><h3 id="使用方法-16"><a href="#使用方法-16" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h4><p><strong>方式1：Excel数据</strong></p><ol><li>从Excel复制数据</li><li>粘贴到输入框</li><li>系统自动识别</li></ol><p><strong>方式2：CSV数据</strong></p><ol><li>上传CSV文件</li><li>或粘贴CSV文本</li><li>自动解析</li></ol><p><strong>方式3：JSON数据</strong></p><ol><li>粘贴JSON格式数据</li><li>系统自动转换</li><li>配置图表</li></ol><p><strong>方式4：手动输入</strong></p><ol><li>使用表格编辑器</li><li>直接输入数据</li><li>添加&#x2F;删除行列</li></ol><h3 id="图表类型"><a href="#图表类型" class="headerlink" title="图表类型"></a>图表类型</h3><h4 id="1-柱状图（Bar-Chart）"><a href="#1-柱状图（Bar-Chart）" class="headerlink" title="1. 柱状图（Bar Chart）"></a>1. 柱状图（Bar Chart）</h4><p><strong>适用场景</strong></p><ul><li>数据对比</li><li>分类统计</li><li>排名展示</li></ul><p><strong>配置选项</strong></p><ul><li>垂直&#x2F;水平柱状图</li><li>分组柱状图</li><li>堆叠柱状图</li><li>柱子宽度</li><li>柱子颜色</li><li>数据标签</li></ul><p><strong>示例数据</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">产品类别,销量</span><br><span class="line">产品A,120</span><br><span class="line">产品B,150</span><br><span class="line">产品C,90</span><br><span class="line">产品D,180</span><br></pre></td></tr></table></figure><h4 id="2-折线图（Line-Chart）"><a href="#2-折线图（Line-Chart）" class="headerlink" title="2. 折线图（Line Chart）"></a>2. 折线图（Line Chart）</h4><p><strong>适用场景</strong></p><ul><li>趋势分析</li><li>时间序列数据</li><li>多指标对比</li></ul><p><strong>配置选项</strong></p><ul><li>单线&#x2F;多线</li><li>折线平滑</li><li>数据点样式</li><li>区域填充</li><li>堆叠折线</li></ul><p><strong>示例数据</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">月份,销售额,成本</span><br><span class="line">1月,10000,7000</span><br><span class="line">2月,12000,8000</span><br><span class="line">3月,15000,9000</span><br></pre></td></tr></table></figure><h4 id="3-饼图（Pie-Chart）"><a href="#3-饼图（Pie-Chart）" class="headerlink" title="3. 饼图（Pie Chart）"></a>3. 饼图（Pie Chart）</h4><p><strong>适用场景</strong></p><ul><li>占比分析</li><li>构成展示</li><li>份额对比</li></ul><p><strong>配置选项</strong></p><ul><li>标准饼图</li><li>环形图</li><li>玫瑰图</li><li>半饼图</li><li>显示百分比</li><li>图例位置</li></ul><p><strong>示例数据</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类别,数值</span><br><span class="line">一线城市,35</span><br><span class="line">二线城市,40</span><br><span class="line">三线城市,15</span><br><span class="line">其他,10</span><br></pre></td></tr></table></figure><h4 id="4-雷达图（Radar-Chart）"><a href="#4-雷达图（Radar-Chart）" class="headerlink" title="4. 雷达图（Radar Chart）"></a>4. 雷达图（Radar Chart）</h4><p><strong>适用场景</strong></p><ul><li>多维度评估</li><li>能力分析</li><li>综合对比</li></ul><p><strong>配置选项</strong></p><ul><li>多边形样式</li><li>填充透明度</li><li>指标个数</li><li>最大值设置</li></ul><p><strong>示例数据</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指标,张三,李四</span><br><span class="line">销售,90,75</span><br><span class="line">技术,70,95</span><br><span class="line">沟通,85,80</span><br><span class="line">管理,75,88</span><br></pre></td></tr></table></figure><h4 id="5-散点图（Scatter-Chart）"><a href="#5-散点图（Scatter-Chart）" class="headerlink" title="5. 散点图（Scatter Chart）"></a>5. 散点图（Scatter Chart）</h4><p><strong>适用场景</strong></p><ul><li>相关性分析</li><li>分布展示</li><li>异常值检测</li></ul><h4 id="6-面积图（Area-Chart）"><a href="#6-面积图（Area-Chart）" class="headerlink" title="6. 面积图（Area Chart）"></a>6. 面积图（Area Chart）</h4><p><strong>适用场景</strong></p><ul><li>累积趋势</li><li>数量变化</li><li>堆叠对比</li></ul><h4 id="7-仪表盘（Gauge-Chart）"><a href="#7-仪表盘（Gauge-Chart）" class="headerlink" title="7. 仪表盘（Gauge Chart）"></a>7. 仪表盘（Gauge Chart）</h4><p><strong>适用场景</strong></p><ul><li>KPI展示</li><li>完成度显示</li><li>进度展示</li></ul><h4 id="8-漏斗图（Funnel-Chart）"><a href="#8-漏斗图（Funnel-Chart）" class="headerlink" title="8. 漏斗图（Funnel Chart）"></a>8. 漏斗图（Funnel Chart）</h4><p><strong>适用场景</strong></p><ul><li>转化率分析</li><li>流程分析</li><li>业务漏斗</li></ul><h3 id="图表配置"><a href="#图表配置" class="headerlink" title="图表配置"></a>图表配置</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p><strong>标题设置</strong></p><ul><li>主标题</li><li>副标题</li><li>标题位置</li><li>字体大小和颜色</li></ul><p><strong>图例设置</strong></p><ul><li>显示&#x2F;隐藏图例</li><li>图例位置（上&#x2F;下&#x2F;左&#x2F;右）</li><li>图例样式</li><li>图例选择交互</li></ul><p><strong>坐标轴配置</strong></p><ul><li>X轴&#x2F;Y轴标题</li><li>刻度间隔</li><li>轴范围</li><li>网格线样式</li></ul><h4 id="样式配置"><a href="#样式配置" class="headerlink" title="样式配置"></a>样式配置</h4><p><strong>颜色主题</strong></p><ul><li>预设主题（商务&#x2F;科技&#x2F;清新等）</li><li>自定义颜色</li><li>渐变色</li><li>透明度</li></ul><p><strong>字体配置</strong></p><ul><li>字体家族</li><li>字体大小</li><li>字体粗细</li><li>字体颜色</li></ul><p><strong>动画效果</strong></p><ul><li>初始动画</li><li>更新动画</li><li>动画时长</li><li>动画缓动</li></ul><h4 id="交互功能"><a href="#交互功能" class="headerlink" title="交互功能"></a>交互功能</h4><p><strong>数据提示（Tooltip）</strong></p><ul><li>悬停显示详情</li><li>自定义提示内容</li><li>提示框样式</li></ul><p><strong>数据缩放</strong></p><ul><li>区域缩放</li><li>滑块缩放</li><li>鼠标滚轮缩放</li></ul><p><strong>图表联动</strong></p><ul><li>多图表联动</li><li>点击筛选</li><li>高亮显示</li></ul><h3 id="图表导出"><a href="#图表导出" class="headerlink" title="图表导出"></a>图表导出</h3><p><strong>导出格式</strong></p><ol><li><p><strong>图片格式</strong>：</p><ul><li>PNG（推荐，透明背景）</li><li>JPG（小文件）</li><li>SVG（矢量图，可编辑）</li></ul></li><li><p><strong>PDF格式</strong>：适合打印和报告</p></li><li><p><strong>数据导出</strong>：</p><ul><li>CSV格式</li><li>Excel格式</li><li>JSON格式</li></ul></li></ol><p><strong>导出选项</strong></p><ul><li>分辨率设置</li><li>背景颜色</li><li>尺寸设置</li></ul><h3 id="高级功能-2"><a href="#高级功能-2" class="headerlink" title="高级功能"></a>高级功能</h3><h4 id="动态数据源"><a href="#动态数据源" class="headerlink" title="动态数据源"></a>动态数据源</h4><ul><li>API数据接口</li><li>实时数据更新</li><li>数据刷新间隔</li></ul><h4 id="多图表仪表板"><a href="#多图表仪表板" class="headerlink" title="多图表仪表板"></a>多图表仪表板</h4><ul><li>创建多个图表</li><li>自由布局</li><li>响应式设计</li><li>分组管理</li></ul><h4 id="数据计算"><a href="#数据计算" class="headerlink" title="数据计算"></a>数据计算</h4><ul><li>聚合计算（求和&#x2F;平均&#x2F;最大&#x2F;最小）</li><li>同比&#x2F;环比</li><li>数据透视</li><li>自定义公式</li></ul><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><ol><li>确保数据格式正确</li><li>第一行作为列名</li><li>数值类型正确</li><li>日期格式统一</li></ol><h4 id="图表选择"><a href="#图表选择" class="headerlink" title="图表选择"></a>图表选择</h4><ul><li>对比数据 → 柱状图</li><li>趋势数据 → 折线图</li><li>占比数据 → 饼图</li><li>多维度数据 → 雷达图</li></ul><h4 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h4><ul><li>数据点不宜过多（&lt;100）</li><li>颜色不宜过多（&lt;7）</li><li>图表不要过于复杂</li><li>保持视觉清晰</li></ul><h3 id="技巧提示-16"><a href="#技巧提示-16" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>保存图表配置</li><li>图表模板库</li><li>快速配置向导</li><li>响应式图表</li><li>移动端优化</li></ul><hr><h2 id="18-二维码与条形码工具"><a href="#18-二维码与条形码工具" class="headerlink" title="18. 二维码与条形码工具"></a>18. 二维码与条形码工具</h2><h3 id="功能介绍-17"><a href="#功能介绍-17" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>快速生成二维码和多种格式的条形码，支持自定义样式、Logo嵌入和批量生成，并可直接下载使用。</p><h3 id="使用场景-17"><a href="#使用场景-17" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>网址分享</li><li>名片制作</li><li>产品标签</li><li>活动签到</li><li>支付码生成</li><li>商品条码</li></ul><h3 id="使用方法-17"><a href="#使用方法-17" class="headerlink" title="使用方法"></a>使用方法</h3><h3 id="二维码生成"><a href="#二维码生成" class="headerlink" title="二维码生成"></a>二维码生成</h3><h4 id="基础生成"><a href="#基础生成" class="headerlink" title="基础生成"></a>基础生成</h4><ol><li><p><strong>输入内容</strong>：</p><ul><li>文本</li><li>网址</li><li>电话号码</li><li>邮箱</li><li>WiFi信息</li><li>地理位置</li><li>名片信息</li></ul></li><li><p><strong>点击生成</strong>：系统自动生成二维码</p></li><li><p><strong>下载使用</strong>：</p><ul><li>PNG格式</li><li>SVG格式</li><li>JPG格式</li></ul></li></ol><h4 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h4><p><strong>容错级别</strong></p><ul><li><strong>L级</strong>：约7%容错率（默认）</li><li><strong>M级</strong>：约15%容错率</li><li><strong>Q级</strong>：约25%容错率（推荐）</li><li><strong>H级</strong>：约30%容错率（可添加Logo）</li></ul><p><strong>尺寸设置</strong></p><ul><li>小：200x200像素</li><li>中：300x300像素</li><li>大：500x500像素</li><li>自定义：任意尺寸</li></ul><p><strong>颜色配置</strong></p><ul><li>前景色（二维码颜色）</li><li>背景色</li><li>渐变色</li><li>透明背景</li></ul><p><strong>样式定制</strong></p><ul><li>圆角设置</li><li>码点样式（方形&#x2F;圆形&#x2F;点状）</li><li>眼睛样式（三个定位点）</li><li>外边距</li></ul><h4 id="Logo嵌入"><a href="#Logo嵌入" class="headerlink" title="Logo嵌入"></a>Logo嵌入</h4><ol><li>上传Logo图片</li><li>设置Logo大小（建议不超过20%）</li><li>边框设置</li><li>圆角设置</li></ol><h4 id="特殊二维码类型"><a href="#特殊二维码类型" class="headerlink" title="特殊二维码类型"></a>特殊二维码类型</h4><p><strong>WiFi二维码</strong></p><ul><li>SSID（网络名称）</li><li>密码</li><li>加密方式（WPA&#x2F;WEP&#x2F;无）</li><li>隐藏网络选项</li></ul><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WIFI:T:WPA;S:网络名称;P:密码;;</span><br></pre></td></tr></table></figure><p><strong>名片二维码（vCard）</strong></p><ul><li>姓名</li><li>公司</li><li>职位</li><li>电话</li><li>邮箱</li><li>网址</li><li>地址</li></ul><p><strong>电话二维码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TEL:+86138****8888</span><br></pre></td></tr></table></figure><p><strong>短信二维码</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SMSTO:138****8888:消息内容</span><br></pre></td></tr></table></figure><p><strong>地理位置</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geo:39.9042,116.4074</span><br></pre></td></tr></table></figure><h3 id="条形码生成"><a href="#条形码生成" class="headerlink" title="条形码生成"></a>条形码生成</h3><h4 id="支持的条形码类型"><a href="#支持的条形码类型" class="headerlink" title="支持的条形码类型"></a>支持的条形码类型</h4><p><strong>1. EAN-13</strong></p><ul><li>用途：国际商品条码</li><li>长度：13位数字</li><li>适用：零售商品</li></ul><p><strong>2. EAN-8</strong></p><ul><li>用途：小商品条码</li><li>长度：8位数字</li><li>适用：小包装商品</li></ul><p><strong>3. UPC-A</strong></p><ul><li>用途：美国商品条码</li><li>长度：12位数字</li><li>适用：北美市场</li></ul><p><strong>4. Code 128</strong></p><ul><li>用途：物流和仓储</li><li>长度：可变</li><li>内容：数字、字母、符号</li></ul><p><strong>5. Code 39</strong></p><ul><li>用途：工业、医疗</li><li>长度：可变</li><li>内容：数字、大写字母、符号</li></ul><p><strong>6. ITF-14</strong></p><ul><li>用途：物流运输</li><li>长度：14位数字</li><li>适用：外箱条码</li></ul><p><strong>7. Codabar</strong></p><ul><li>用途：血库、图书馆</li><li>长度：可变</li><li>特点：开始&#x2F;结束字符</li></ul><p><strong>8. ISBN</strong></p><ul><li>用途：图书编号</li><li>长度：10或13位</li><li>适用：出版行业</li></ul><h4 id="条形码配置"><a href="#条形码配置" class="headerlink" title="条形码配置"></a>条形码配置</h4><p><strong>基础设置</strong></p><ul><li>条码内容</li><li>条码类型</li><li>宽度</li><li>高度</li></ul><p><strong>显示设置</strong></p><ul><li>显示文本（条码下方）</li><li>文本位置（上&#x2F;下）</li><li>字体大小</li><li>字体样式</li></ul><p><strong>颜色设置</strong></p><ul><li>条码颜色（通常为黑色）</li><li>背景颜色（通常为白色）</li></ul><p><strong>边距设置</strong></p><ul><li>左右边距</li><li>上下边距</li><li>静区（Quiet Zone）</li></ul><h3 id="批量生成"><a href="#批量生成" class="headerlink" title="批量生成"></a>批量生成</h3><h4 id="批量二维码"><a href="#批量二维码" class="headerlink" title="批量二维码"></a>批量二维码</h4><ol><li>准备数据（CSV&#x2F;Excel）</li><li>上传文件或粘贴数据</li><li>选择模板</li><li>批量生成</li><li>打包下载</li></ol><p><strong>批量数据格式</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内容,文件名</span><br><span class="line">https://example.com/page1,qr1</span><br><span class="line">https://example.com/page2,qr2</span><br><span class="line">https://example.com/page3,qr3</span><br></pre></td></tr></table></figure><h4 id="批量条形码"><a href="#批量条形码" class="headerlink" title="批量条形码"></a>批量条形码</h4><ol><li>准备条码数据列表</li><li>选择条码类型</li><li>设置统一样式</li><li>批量生成</li><li>下载压缩包</li></ol><h3 id="扫描识别"><a href="#扫描识别" class="headerlink" title="扫描识别"></a>扫描识别</h3><p><strong>二维码扫描</strong></p><ol><li>点击”扫描二维码”</li><li>上传图片或开启摄像头</li><li>系统自动识别内容</li><li>显示解析结果</li></ol><p><strong>条形码识别</strong></p><ul><li>上传条形码图片</li><li>自动识别类型和内容</li><li>显示条码信息</li></ul><h3 id="使用技巧-1"><a href="#使用技巧-1" class="headerlink" title="使用技巧"></a>使用技巧</h3><h4 id="二维码优化"><a href="#二维码优化" class="headerlink" title="二维码优化"></a>二维码优化</h4><ul><li>内容越少，二维码越简单</li><li>高容错级别适合添加Logo</li><li>确保足够的对比度</li><li>预留适当的静区（边距）</li><li>测试扫描效果</li></ul><h4 id="条形码规范"><a href="#条形码规范" class="headerlink" title="条形码规范"></a>条形码规范</h4><ul><li>使用标准的条码类型</li><li>确保条码可读性</li><li>保持正确的宽高比</li><li>打印时注意分辨率（300dpi以上）</li><li>静区不可忽略</li></ul><h4 id="打印建议"><a href="#打印建议" class="headerlink" title="打印建议"></a>打印建议</h4><ul><li>矢量格式（SVG）用于印刷</li><li>高分辨率PNG（600dpi）</li><li>避免过度压缩</li><li>测试扫描后再大量打印</li><li>注意材质和环境影响</li></ul><h3 id="技巧提示-17"><a href="#技巧提示-17" class="headerlink" title="技巧提示"></a>技巧提示</h3><ul><li>保存常用配置</li><li>模板管理</li><li>历史记录</li><li>在线预览</li><li>多格式导出</li></ul><hr><h2 id="🎯-常见问题解答（FAQ）"><a href="#🎯-常见问题解答（FAQ）" class="headerlink" title="🎯 常见问题解答（FAQ）"></a>🎯 常见问题解答（FAQ）</h2><h3 id="1-工具是否免费？"><a href="#1-工具是否免费？" class="headerlink" title="1. 工具是否免费？"></a>1. 工具是否免费？</h3><p>是的，所有工具完全免费使用，无需注册登录。</p><h3 id="2-数据是否安全？"><a href="#2-数据是否安全？" class="headerlink" title="2. 数据是否安全？"></a>2. 数据是否安全？</h3><p>所有工具都在浏览器本地运行，不会上传您的数据到服务器，完全保护您的隐私安全。</p><h3 id="3-是否支持移动端？"><a href="#3-是否支持移动端？" class="headerlink" title="3. 是否支持移动端？"></a>3. 是否支持移动端？</h3><p>是的，所有工具都采用响应式设计，完美支持手机和平板设备访问。</p><h3 id="4-是否需要安装？"><a href="#4-是否需要安装？" class="headerlink" title="4. 是否需要安装？"></a>4. 是否需要安装？</h3><p>不需要，这是一个在线工具集，通过浏览器即可直接使用。</p><h3 id="5-支持哪些浏览器？"><a href="#5-支持哪些浏览器？" class="headerlink" title="5. 支持哪些浏览器？"></a>5. 支持哪些浏览器？</h3><p>推荐使用现代浏览器：</p><ul><li>Chrome&#x2F;Edge（推荐）</li><li>Firefox</li><li>Safari</li><li>Opera</li></ul><h3 id="6-能否离线使用？"><a href="#6-能否离线使用？" class="headerlink" title="6. 能否离线使用？"></a>6. 能否离线使用？</h3><p>部分工具支持PWA离线使用，可以将网页添加到主屏幕。</p><h3 id="7-数据会保存吗？"><a href="#7-数据会保存吗？" class="headerlink" title="7. 数据会保存吗？"></a>7. 数据会保存吗？</h3><p>部分工具支持本地保存配置和历史记录，存储在浏览器localStorage中。</p><h3 id="8-如何反馈问题？"><a href="#8-如何反馈问题？" class="headerlink" title="8. 如何反馈问题？"></a>8. 如何反馈问题？</h3><p>您可以通过网站的反馈功能或联系方式提交问题和建议。</p><hr><h2 id="📞-技术支持"><a href="#📞-技术支持" class="headerlink" title="📞 技术支持"></a>📞 技术支持</h2><p>如果您在使用过程中遇到任何问题，或有功能建议，欢迎联系我们：</p><ul><li><strong>网站</strong>：<a href="https://www.seekpie.com/">https://www.seekpie.com/</a></li><li><strong>邮箱</strong>：<a href="mailto:&#115;&#117;&#x70;&#x70;&#x6f;&#114;&#x74;&#x40;&#115;&#101;&#101;&#x6b;&#112;&#x69;&#101;&#x2e;&#x63;&#x6f;&#x6d;">support@seekpie.com</a></li><li><strong>更新日志</strong>：查看工具箱首页获取最新更新</li></ul><hr><h2 id="📝-更新日志"><a href="#📝-更新日志" class="headerlink" title="📝 更新日志"></a>📝 更新日志</h2><h3 id="最新版本"><a href="#最新版本" class="headerlink" title="最新版本"></a>最新版本</h3><ul><li>新增18种实用工具</li><li>优化移动端体验</li><li>增强数据安全性</li><li>支持更多格式和算法</li></ul><hr><h2 id="⭐-使用提示"><a href="#⭐-使用提示" class="headerlink" title="⭐ 使用提示"></a>⭐ 使用提示</h2><ol><li><strong>快捷键支持</strong>：多数工具支持键盘快捷键，提高操作效率</li><li><strong>配置保存</strong>：常用配置可保存，下次自动加载</li><li><strong>历史记录</strong>：自动保存使用历史，方便查找</li><li><strong>批量操作</strong>：支持批量处理，提高工作效率</li><li><strong>数据导出</strong>：支持多种格式导出，满足不同需求</li></ol><hr><h2 id="🌟-特色功能"><a href="#🌟-特色功能" class="headerlink" title="🌟 特色功能"></a>🌟 特色功能</h2><ul><li>✅ <strong>完全免费</strong>：所有功能永久免费</li><li>✅ <strong>无需登录</strong>：开箱即用，简单方便</li><li>✅ <strong>数据安全</strong>：本地处理，隐私保护</li><li>✅ <strong>响应式设计</strong>：完美支持各种设备</li><li>✅ <strong>持续更新</strong>：不断添加新工具和功能</li><li>✅ <strong>开放源代码</strong>：透明可信赖</li></ul><hr><p><em>本手册最后更新时间：2025年10月31日</em></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Performance Optimization</title>
      <link href="/2019/01/02/elasticsearch-optimize/"/>
      <url>/2019/01/02/elasticsearch-optimize/</url>
      
        <content type="html"><![CDATA[<h2 id="一-部署配置优化篇"><a href="#一-部署配置优化篇" class="headerlink" title="一 部署配置优化篇"></a>一 部署配置优化篇</h2><h3 id="1-Master-Node和Data-Node设置"><a href="#1-Master-Node和Data-Node设置" class="headerlink" title="1. Master Node和Data Node设置"></a>1. Master Node和Data Node设置</h3><p>  条件允许的情况下Master节点和Data节点分开。  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.yml内配置一个true一个false</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span> <span class="comment"># 该节点是否参与master节点选举，master节点最好大于等于3的奇数</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span>   <span class="comment"># 该节点是否存储数据</span></span><br></pre></td></tr></table></figure></p><h3 id="2-Data-Node不开启HTTP服务"><a href="#2-Data-Node不开启HTTP服务" class="headerlink" title="2. Data Node不开启HTTP服务"></a>2. Data Node不开启HTTP服务</h3><p>  如果Master节点和Data节点分开，建议Data接点不开启HTTP服务。  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.yml内配置</span></span><br><span class="line"><span class="attr">http.enabled:</span> <span class="literal">false</span>  <span class="comment"># 默认开启</span></span><br></pre></td></tr></table></figure></p><h3 id="3-使用固态硬盘-SSD"><a href="#3-使用固态硬盘-SSD" class="headerlink" title="3. 使用固态硬盘(SSD)"></a>3. 使用固态硬盘(SSD)</h3><p>  使用SSD可以显著提高Elasticsearch性能。</p><h3 id="4-避免使用swapping"><a href="#4-避免使用swapping" class="headerlink" title="4. 避免使用swapping"></a>4. 避免使用swapping</h3><p>  swapping是内存不足时使用硬盘设置的交换空间，因为是硬盘的读写，所以性能较差。这个时候不仅仅es效率低，整个系统都效率降低。  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.yml内配置JVM启动参数,锁定Heap size</span></span><br><span class="line"><span class="attr">bootstrap.mlockall:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><blockquote><p>这个配置生效要root用户执行<code>ulimit -l unlimited</code>后，再启动&#x2F;重启Elasticsearch</p></blockquote><h3 id="5-堆内存配置"><a href="#5-堆内存配置" class="headerlink" title="5. 堆内存配置"></a>5. 堆内存配置</h3><p>  堆内存建议为系统可用内存的50%，但不要超过32G(32G会引起Java指针膨胀)，剩余的50%会被Lucene使用来做索引缓存(Lucene使用堆外内存来存储索引)，提高查询效率。   </p><h3 id="6-设置字段缓存fileddata"><a href="#6-设置字段缓存fileddata" class="headerlink" title="6. 设置字段缓存fileddata"></a>6. 设置字段缓存<code>fileddata</code></h3><p>  字段数据缓存主要用于排序字段和计算聚合。将所有的字段值加载到内存中，以便提供基于文档快速访问这些值。  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.yml内配置</span></span><br><span class="line"><span class="attr">indices.fielddata.cache.size:</span> <span class="number">40</span><span class="string">%</span>          <span class="comment"># 也可以是具体的值，如4gb。默认是无限制</span></span><br><span class="line"><span class="attr">indices.breaker.fielddata.limit:</span> <span class="number">60</span><span class="string">%</span>       <span class="comment"># field数据使用内存限制，默认为JVM堆的60%</span></span><br><span class="line"><span class="attr">indices.breaker.fielddata.overhead:</span> <span class="number">1.03</span>　 <span class="comment"># Elasticsearch使用这个常数乘以所有fielddata的实际值作field的估算值。默认为 1.03</span></span><br></pre></td></tr></table></figure></p><h3 id="7-禁止删除delete-all-indices"><a href="#7-禁止删除delete-all-indices" class="headerlink" title="7. 禁止删除delete_all_indices"></a>7. 禁止删除<code>delete_all_indices</code></h3><p>  防止误删索引。  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.yml内配置</span></span><br><span class="line"><span class="attr">action.disable_delete_all_indices:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="二-开发使用优化篇"><a href="#二-开发使用优化篇" class="headerlink" title="二. 开发使用优化篇"></a>二. 开发使用优化篇</h2><h3 id="1-设置refresh-interval"><a href="#1-设置refresh-interval" class="headerlink" title="1. 设置refresh_interval"></a>1. 设置<code>refresh_interval</code></h3>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可通过setting api设置 </span></span><br><span class="line">curl -XPUT /index_name/_settings -d </span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string"> &#123;</span></span><br><span class="line"><span class="string">     &quot;index&quot; : &#123;</span></span><br><span class="line"><span class="string">         &quot;refresh_interval&quot; : &quot;30s&quot;</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string"> &#125;  </span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或在mapping的settings中加入设置</span></span><br><span class="line"><span class="string">&quot;settings&quot;</span>: &#123;<span class="string">&quot;refresh_interval&quot;</span>: <span class="string">&quot;30s&quot;</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ES默认是1s</p></blockquote><h3 id="2-允许的情况下禁用-all"><a href="#2-允许的情况下禁用-all" class="headerlink" title="2. 允许的情况下禁用_all"></a>2. 允许的情况下禁用<code>_all</code></h3><p>  <code>_all</code>字段是一个很少用到的字段，它连接所有字段的值构成一个用空格分隔的大string，该string被analyzed和index，但是不被store。当你不知道不清楚document结构的时候，  可以用<code>_all</code>查询等。<code>_all</code>字段需要额外的CPU周期和更多的磁盘。所以，如果不需要<code>_all</code>，最好将其禁用！  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在mapping的settings中加入设置</span></span><br><span class="line"><span class="string">&quot;_all&quot;</span>: &#123;<span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-允许的情况下禁用-source"><a href="#3-允许的情况下禁用-source" class="headerlink" title="3. 允许的情况下禁用_source"></a>3. 允许的情况下禁用<code>_source</code></h3><p>  <code>_source</code>会存储文档的原始字段内容，在查询的时候会返回<code>_source</code>内容，如果禁用查询将只返回<code>_id</code>，但不影响聚合与索引。在特定场景下Elasticsearch只是作为索引时(原始  内容存于其他地方，如HBase)，再根据ID获取内容，可以禁用<code>_source</code>。  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在mapping的settings中加入设置</span></span><br><span class="line"><span class="string">&quot;_source&quot;</span>: &#123;<span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-批处理-bulk"><a href="#4-批处理-bulk" class="headerlink" title="4. 批处理_bulk"></a>4. 批处理<code>_bulk</code></h3><p>  使用批处理可以提高Elasticsearch的QPS，提高性能。</p><h3 id="5-Script脚本使用"><a href="#5-Script脚本使用" class="headerlink" title="5. Script脚本使用"></a>5. Script脚本使用</h3><p>  尽量避免使用Script，如需使用建议使用painless脚本。</p><h3 id="6-合理的分片数"><a href="#6-合理的分片数" class="headerlink" title="6. 合理的分片数"></a>6. 合理的分片数</h3><p>  Elasticsearch创建index后分片数就不可更改，建议每个分片大小在20~30G左右，每GB堆内存的分片数最大控制在20个左右(如堆内存为8G的Node最多存放160个分片)，在存储log这种  读少写多的场景可适当调高。</p><h3 id="7-设计路由-Routing"><a href="#7-设计路由-Routing" class="headerlink" title="7. 设计路由(Routing)"></a>7. 设计路由(Routing)</h3><p>  一个好的路由规则可以极大地提高Elasticsearch的查询效率。默认是<code>_id</code>字段。</p><h3 id="8-避免深分页查询"><a href="#8-避免深分页查询" class="headerlink" title="8. 避免深分页查询"></a>8. 避免深分页查询</h3><p>  Elasticsearch深分页是非常低效的，Elasticsearch查询时会讲匹配的所有分片的查询获取from + size条记录，最后从所有结果集中取size条记录。<br>  Elasticsearch参数<code>max_result_window</code>会限制from + size的最大数，如果大于这个值会抛出异常。该值默认为1000，可以通过setting设置(建议不要设置过大)。  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可通过setting api设置 </span></span><br><span class="line">curl -XPUT /index_name/_settings -d </span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string"> &#123;</span></span><br><span class="line"><span class="string">     &quot;index&quot; : &#123;</span></span><br><span class="line"><span class="string">         &quot;max_result_window&quot; : 20000</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string"> &#125;  </span></span><br><span class="line"><span class="string">&#x27;</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment"># 或在mapping的settings中加入设置</span></span><br><span class="line"><span class="string">&quot;settings&quot;</span>: &#123;<span class="string">&quot;max_result_window&quot;</span>: 20000&#125;</span><br></pre></td></tr></table></figure>  如需深分页，可通过<code>scroll</code>api实现滚动分页。</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pseudo Distributed Hbase Install</title>
      <link href="/2018/10/26/pseudo-distributed-hbase-install/"/>
      <url>/2018/10/26/pseudo-distributed-hbase-install/</url>
      
        <content type="html"><![CDATA[<h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一. 环境准备"></a>一. 环境准备</h2><h3 id="1-Ubuntu、JDK8、Hadoop2-8-5、HBase2-1-0"><a href="#1-Ubuntu、JDK8、Hadoop2-8-5、HBase2-1-0" class="headerlink" title="1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0"></a>1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0</h3><ul><li><a href="https://www.ubuntu.com/download/desktop">安装Ubuntu https://www.ubuntu.com/download/desktop</a>  </li><li><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html</a>  </li><li><a href="http://hadoop.apache.org/">安装Hadoop2.8.5 http://hadoop.apache.org/</a>  </li><li><a href="http://hbase.apache.org/">下载HBase2.1.0 http://hbase.apache.org/</a></li></ul><h3 id="2-其他准备"><a href="#2-其他准备" class="headerlink" title="2. 其他准备"></a>2. 其他准备</h3><p>   部署Hadoop详见: <a href="/2018/10/26/pseudo-distributed-hadoop-install/">Hadoop 伪分布式部署</a></p><h2 id="二-部署HBase"><a href="#二-部署HBase" class="headerlink" title="二. 部署HBase"></a>二. 部署HBase</h2><h3 id="1-解压HBase"><a href="#1-解压HBase" class="headerlink" title="1. 解压HBase"></a>1. 解压HBase</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">sudo</span> tar -zxf ~/Downloads/hbase-2.1.0-bin.tar.gz -C /usr/local <span class="comment"># 解压到/usr/local中</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/                                              </span><br><span class="line"><span class="built_in">chmod</span> -R 777 ./hbase-2.1.0                                     <span class="comment"># 设置权限</span></span><br></pre></td></tr></table></figure><h3 id="2-配置HBase环境变量"><a href="#2-配置HBase环境变量" class="headerlink" title="2. 配置HBase环境变量"></a>2. 配置HBase环境变量</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HBASE_HOME=/usr/local/hbase-2.1.0</span><br><span class="line"><span class="built_in">export</span> HBASE_CONF_DIR=<span class="variable">$&#123;HBASE_HOME&#125;</span>/conf</span><br><span class="line"><span class="built_in">export</span> HBASE_CLASS_PATH=<span class="variable">$&#123;HBASE_CONF_DIR&#125;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;HBASE_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure><h3 id="3-修改环境-HBASE-HOME-conf-hbase-evn-sh配置"><a href="#3-修改环境-HBASE-HOME-conf-hbase-evn-sh配置" class="headerlink" title="3. 修改环境${HBASE_HOME}&#x2F;conf&#x2F;hbase-evn.sh配置"></a>3. 修改环境${HBASE_HOME}&#x2F;conf&#x2F;hbase-evn.sh配置</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加以下配置</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0_181  <span class="comment"># JDK根目录</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span>              <span class="comment"># 使用HBase自带zookeeper</span></span><br></pre></td></tr></table></figure><h3 id="4-修改配置文件-HBASE-HOME-conf-hbase-site-xml"><a href="#4-修改配置文件-HBASE-HOME-conf-hbase-site-xml" class="headerlink" title="4. 修改配置文件${HBASE_HOME}&#x2F;conf&#x2F;hbase-site.xml"></a>4. 修改配置文件${HBASE_HOME}&#x2F;conf&#x2F;hbase-site.xml</h3>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://crab2died:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-修改文件-HBASE-HOME-conf-regionservers"><a href="#5-修改文件-HBASE-HOME-conf-regionservers" class="headerlink" title="5. 修改文件${HBASE_HOME}&#x2F;conf&#x2F;regionservers"></a>5. 修改文件${HBASE_HOME}&#x2F;conf&#x2F;regionservers</h3><p>   将<code>localhost</code>改为<code>crab2died</code></p><h3 id="6-解决HBase-master启动错误"><a href="#6-解决HBase-master启动错误" class="headerlink" title="6. 解决HBase master启动错误"></a>6. 解决HBase master启动错误</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行cp </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/hbase-2.1.0</span><br><span class="line"><span class="built_in">cp</span> ./lib/client-facing-thirdparty/htrace-core-3.1.0-incubating.jar ./lib</span><br></pre></td></tr></table></figure><h3 id="7-验证版本"><a href="#7-验证版本" class="headerlink" title="7. 验证版本"></a>7. 验证版本</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hbase version</span><br><span class="line"><span class="comment"># 成功则会返回版本信息</span></span><br></pre></td></tr></table></figure><h2 id="三-启动HBase"><a href="#三-启动HBase" class="headerlink" title="三. 启动HBase"></a>三. 启动HBase</h2><h3 id="1-先启动Hadoop-详见-Hadoop-伪分布式部署"><a href="#1-先启动Hadoop-详见-Hadoop-伪分布式部署" class="headerlink" title="1. 先启动Hadoop,详见: Hadoop 伪分布式部署"></a>1. 先启动Hadoop,详见: <a href="/2018/10/26/pseudo-distributed-hadoop-install/">Hadoop 伪分布式部署</a></h3><h3 id="2-启动HBase"><a href="#2-启动HBase" class="headerlink" title="2. 启动HBase"></a>2. 启动HBase</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start-hbase.sh </span><br></pre></td></tr></table></figure><h3 id="3-jps查看进程"><a href="#3-jps查看进程" class="headerlink" title="3. jps查看进程"></a>3. jps查看进程</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jps</span><br><span class="line">1257 HQuorumPeer</span><br><span class="line">1285 HMaster</span><br><span class="line">1312 HRegionServer</span><br></pre></td></tr></table></figure><h3 id="4-查看HBase管理界面"><a href="#4-查看HBase管理界面" class="headerlink" title="4. 查看HBase管理界面"></a>4. 查看HBase管理界面</h3><p>   <a href="http://crab2died:16030/">http://crab2died:16030</a></p><h3 id="5-进入命令行管理"><a href="#5-进入命令行管理" class="headerlink" title="5. 进入命令行管理"></a>5. 进入命令行管理</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pseudo Distributed Hadoop Install</title>
      <link href="/2018/10/26/pseudo-distributed-hadoop-install/"/>
      <url>/2018/10/26/pseudo-distributed-hadoop-install/</url>
      
        <content type="html"><![CDATA[<h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一. 环境准备"></a>一. 环境准备</h2><h3 id="准备Ubuntu、JDK8、Hadoop2-8-5"><a href="#准备Ubuntu、JDK8、Hadoop2-8-5" class="headerlink" title="准备Ubuntu、JDK8、Hadoop2.8.5"></a>准备Ubuntu、JDK8、Hadoop2.8.5</h3><ul><li><a href="https://www.ubuntu.com/download/desktop">安装Ubuntu https://www.ubuntu.com/download/desktop</a>   </li><li><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html</a>  </li><li><a href="http://hadoop.apache.org/">下载Hadoop2.8.5 http://hadoop.apache.org/</a></li></ul><h3 id="其他准备"><a href="#其他准备" class="headerlink" title="其他准备"></a>其他准备</h3><h4 id="1-更新apt-sudo-apt-get-update"><a href="#1-更新apt-sudo-apt-get-update" class="headerlink" title="1. 更新apt sudo apt-get update"></a>1. 更新apt <code>sudo apt-get update</code></h4><h4 id="2-SSH安装，配置无密码SSH登入"><a href="#2-SSH安装，配置无密码SSH登入" class="headerlink" title="2. SSH安装，配置无密码SSH登入"></a>2. SSH安装，配置无密码SSH登入</h4><h5 id="2-1-SSH安装-sudo-apt-get-install-openssh-server"><a href="#2-1-SSH安装-sudo-apt-get-install-openssh-server" class="headerlink" title="2.1. SSH安装 sudo apt-get install openssh-server"></a>2.1. SSH安装 <code>sudo apt-get install openssh-server</code></h5><h5 id="2-2-配置SSH无密码登入"><a href="#2-2-配置SSH无密码登入" class="headerlink" title="2.2. 配置SSH无密码登入"></a>2.2. 配置SSH无密码登入</h5>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/                            <span class="comment"># 若没有该目录，请先执行一次ssh crab2died</span></span><br><span class="line">ssh-keygen -t rsa                     <span class="comment"># 会有提示，都按回车就可以</span></span><br><span class="line"><span class="built_in">cat</span> ./id_rsa.pub &gt;&gt; ./authorized_keys <span class="comment"># 加入授权</span></span><br><span class="line">ssh crab2died                         <span class="comment"># 验证无密码登入</span></span><br></pre></td></tr></table></figure><h4 id="3-修改hosts"><a href="#3-修改hosts" class="headerlink" title="3. 修改hosts"></a>3. 修改hosts</h4>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/hosts</span><br><span class="line"><span class="comment"># 添加 </span></span><br><span class="line">本机ip   crab2died</span><br></pre></td></tr></table></figure><h2 id="二-安装Hadoop"><a href="#二-安装Hadoop" class="headerlink" title="二. 安装Hadoop"></a>二. 安装Hadoop</h2><h3 id="1-解压Hadoop"><a href="#1-解压Hadoop" class="headerlink" title="1. 解压Hadoop"></a>1. 解压Hadoop</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">sudo</span> tar -zxf ~/Downloads/hadoop-2.8.5.tar.gz -C /usr/local <span class="comment"># 解压到/usr/local中</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/                                              </span><br><span class="line"><span class="built_in">chmod</span> -R 777 ./hadoop-2.8.5                                 <span class="comment"># 设置权限</span></span><br></pre></td></tr></table></figure><h3 id="2-设置Hadoop环境变量"><a href="#2-设置Hadoop环境变量" class="headerlink" title="2. 设置Hadoop环境变量"></a>2. 设置Hadoop环境变量</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/profile</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/local/hadoop-2.8.5 </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;HADOOP_HOME&#125;</span>/sbin:<span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin</span><br><span class="line"><span class="comment"># 保存执行</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="3-验证Hadoop版本"><a href="#3-验证Hadoop版本" class="headerlink" title="3. 验证Hadoop版本"></a>3. 验证Hadoop版本</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop version    <span class="comment"># 成功会返回版本信息</span></span><br></pre></td></tr></table></figure><h3 id="4-伪分布式配置"><a href="#4-伪分布式配置" class="headerlink" title="4. 伪分布式配置"></a>4. 伪分布式配置</h3><h4 id="4-1-进入-HADOOP-HOME-etc-hadoop目录中，修改以下文件"><a href="#4-1-进入-HADOOP-HOME-etc-hadoop目录中，修改以下文件" class="headerlink" title="4.1. 进入${HADOOP_HOME}/etc/hadoop目录中，修改以下文件"></a>4.1. 进入<code>${HADOOP_HOME}/etc/hadoop</code>目录中，修改以下文件</h4><h5 id="4-1-1-修改-hadoop-env-sh"><a href="#4-1-1-修改-hadoop-env-sh" class="headerlink" title="4.1.1. 修改 hadoop-env.sh"></a>4.1.1. 修改 hadoop-env.sh</h5><p>   将<code>export JAVA_HOME=${JAVA_HOME}</code>改成<code>export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录</code></p><h5 id="4-1-2-修改-core-site-xml"><a href="#4-1-2-修改-core-site-xml" class="headerlink" title="4.1.2. 修改 core-site.xml"></a>4.1.2. 修改 core-site.xml</h5>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/crab2died/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://crab2died:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-3-修改-hdfs-site-xml"><a href="#4-1-3-修改-hdfs-site-xml" class="headerlink" title="4.1.3. 修改 hdfs-site.xml"></a>4.1.3. 修改 hdfs-site.xml</h5>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-cluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span>      </span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/snn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/snn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/dn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-4-先复制cp-mapred-site-xml-template-mapred-site-xml-再修改-mapred-site-xml"><a href="#4-1-4-先复制cp-mapred-site-xml-template-mapred-site-xml-再修改-mapred-site-xml" class="headerlink" title="4.1.4. 先复制cp mapred-site.xml.template mapred-site.xml,再修改 mapred-site.xml"></a>4.1.4. 先复制<code>cp mapred-site.xml.template mapred-site.xml</code>,再修改 mapred-site.xml</h5>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-5-修改-yarn-site-xml"><a href="#4-1-5-修改-yarn-site-xml" class="headerlink" title="4.1.5. 修改 yarn-site.xml"></a>4.1.5. 修改 yarn-site.xml</h5>   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>crab2died<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/crab2died/hadoop/yarn/nm<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-格式化HDFS-NameNode"><a href="#5-格式化HDFS-NameNode" class="headerlink" title="5. 格式化HDFS NameNode"></a>5. 格式化HDFS NameNode</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><h3 id="6-启动集群"><a href="#6-启动集群" class="headerlink" title="6. 启动集群"></a>6. 启动集群</h3><h4 id="6-1-启动HDFS集群"><a href="#6-1-启动HDFS集群" class="headerlink" title="6.1. 启动HDFS集群"></a>6.1. 启动HDFS集群</h4>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">hadoop-daemon.sh start secondarynamenode  <span class="comment"># 伪分布式才有</span></span><br></pre></td></tr></table></figure><h4 id="6-2-启动YARN"><a href="#6-2-启动YARN" class="headerlink" title="6.2. 启动YARN"></a>6.2. 启动YARN</h4>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn-daemon.sh start resourcemanager</span><br><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure><h3 id="7-jps查看进程"><a href="#7-jps查看进程" class="headerlink" title="7. jps查看进程"></a>7. jps查看进程</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jps</span><br><span class="line">1213 NameNOde</span><br><span class="line">1261 NodeManager</span><br><span class="line">1521 ResourceManager</span><br><span class="line">1722 DataNode</span><br><span class="line">1732 SecondrayNameNode     </span><br></pre></td></tr></table></figure><h3 id="8-查看HDFS管理界面"><a href="#8-查看HDFS管理界面" class="headerlink" title="8. 查看HDFS管理界面"></a>8. 查看HDFS管理界面</h3><p>   <a href="http://crab2died:50070/">http://crab2died:50070</a></p><h3 id="9-查看YARN管理界面"><a href="#9-查看YARN管理界面" class="headerlink" title="9. 查看YARN管理界面"></a>9. 查看YARN管理界面</h3><p>   <a href="http://crab2died:8088/">http://crab2died:8088</a></p>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful HTTP</title>
      <link href="/2018/08/27/restful-http/"/>
      <url>/2018/08/27/restful-http/</url>
      
        <content type="html"><![CDATA[<h2 id="一-REST由来"><a href="#一-REST由来" class="headerlink" title="一. REST由来"></a>一. REST由来</h2><ol><li>REST(Representational State Transfer 表征性状态转移)</li><li>2000年Roy Fielding的博士论文中首次提出</li><li>REST是架构风格，是设计思想，不是标准也不是协议</li><li>REST强调组件交互的可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件</li></ol><h2 id="二-REST特点"><a href="#二-REST特点" class="headerlink" title="二. REST特点"></a>二. REST特点</h2><ol><li>服务端(server)与客户端(client)解耦<ul><li>简化服务端的可伸缩性，提高客户端便捷性</li></ul></li><li>面向资源，每一个资源都有唯一(CRUD等操作不会变)的标识符</li><li>无状态(Stateless)，请求必须包含所有处理该请求的全部信息<ul><li>提高可见性，每个请求都是独立的，无需其他依赖的</li><li>提高可靠性，故障恢复更容易</li><li>提升扩展性，减少了服务器资源消耗</li></ul></li><li>可缓存(Cachable)<ul><li>减少交互次数，减少网络延时</li></ul></li><li>分层系统(Layered System)<ul><li>允许Client与Server中间层(代理，网关等)代替Server端处理请求，客户端无需关心与他交互组件的其他之外的事</li><li>提高了系统可扩展性，简化系统复杂度</li></ul></li><li>统一接口(Uniform Interface)<ul><li>服务端与客户端统一化的方法(GET&#x2F;PUT&#x2F;POST&#x2F;DELETE)通信</li><li>提高了接口的可见性</li></ul></li><li>按需代码(Code-On-Demand)<ul><li>提升系统可扩展性</li></ul></li></ol><h2 id="三-为什么要遵循REST"><a href="#三-为什么要遵循REST" class="headerlink" title="三. 为什么要遵循REST"></a>三. 为什么要遵循REST</h2><ol><li>可更高效利用缓存来提高响应速度</li><li>通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性</li><li>浏览器即可作为客户端，简化软件需求</li><li>相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小</li><li>不需要额外的资源发现机制</li><li>在软件技术演进中的长期的兼容性更好</li></ol><h2 id="四-RESTful最佳实践"><a href="#四-RESTful最佳实践" class="headerlink" title="四. RESTful最佳实践"></a>四. RESTful最佳实践</h2><ol><li>URI规则<ul><li>版本化(其一)   如: &#x2F;api&#x2F;v1</li><li>使用名词，而不是动词  如: blog</li><li>使用小写，用 _做词连接，而不用-</li><li>表示资源集合时，使用复数形式     如: blogs</li><li>子资源关系表示   示例: &#x2F;blog&#x2F;100&#x2F;comments</li><li>为减少URI层级深度,引入适当的参数查询</li></ul></li><li>Request Method  (资源的CRUD)<ul><li>GET&#x2F;HEAD : 查询资源<ul><li>GET &#x2F;blog&#x2F;100</li><li>GET &#x2F;blog&#x2F;100&#x2F;comments</li></ul></li><li>POST: 创建资源<ul><li>POST &#x2F;blog</li><li>POST &#x2F;blog&#x2F;100&#x2F;comment</li></ul></li><li>PUT&#x2F;PATCH: 更新资源<ul><li>PUT &#x2F;blog&#x2F;100</li><li>PUT &#x2F;blog&#x2F;100&#x2F;comment&#x2F;1</li></ul></li><li>DELETE: 删除资源<ul><li>DELETE &#x2F;blog&#x2F;100</li><li>DELETE &#x2F;blog&#x2F;100&#x2F;comment&#x2F;1</li></ul></li></ul></li><li>Response<ul><li>一般地，返回JSON数据而不是XML</li><li>不过滤API返回的空格，支持gzip&#x2F;deflate压缩,Content-Encoding: gzip&#x2F;deflate</li><li>统一的返回格式，错误码信息等</li><li>常见HTTP status<ul><li><strong>200   OK</strong> - 对成功的GET、PUT、PATCH或DELETE操作进行响应。也可以被用在不创建新资源的POST操作上</li><li><strong>201   Created</strong> - 对创建新资源的POST操作进行响应。应该带着指向新资源地址的Location header</li><li><strong>204   No Content</strong> - 对不会返回响应体的成功请求进行响应（比如DELETE请求）</li><li><strong>304   Not Modified</strong> - HTTP缓存header生效的时候用</li><li><strong>400   Bad Request</strong> - 请求异常，比如请求中的body无法解析</li><li><strong>401   Unauthorized</strong> - 没有进行认证或者认证非法。当API通过浏览器访问的时候，可以用来弹出一个认证对话框</li><li><strong>403   Forbidden</strong> - 当认证成功，但是认证过的用户没有访问资源的权限</li><li><strong>404   Not Found</strong> - 当一个不存在的资源被请求</li><li><strong>405   Method Not Allowed</strong> - 所请求的HTTP方法不允许当前认证用户访问</li><li><strong>410   Gone</strong> - 表示当前请求的资源不再可用。当调用老版本API的时候很有用</li><li><strong>415   Unsupported Media Type</strong> - 如果请求中的内容类型是错误的</li><li><strong>422   Unprocessable Entity</strong> - 用来表示校验错误</li><li><strong>429   Too Many Requests</strong> - 由于请求频次达到上限而被拒绝访问</li></ul></li></ul></li><li>认证<ul><li>RESTful API无状态的，每个请求都要自带凭证。</li><li>使用基于SSL来保证传输安全的OAauth 2</li></ul></li><li>缓存<ul><li>强制缓存<ul><li><strong>Cache-Control</strong>与<strong>Expires</strong></li></ul></li><li>比对缓存<ul><li>1、<strong>Last-Modified</strong>与<strong>If-Modified-Since</strong></li><li>2、<strong>Etag</strong>与<strong>If-None-Match</strong></li></ul></li></ul></li><li>HATEOAS (Hypermedia as the Engine of Application State)<ul><li>超媒体作为应用状态的引擎，即在返回结果中提供链接,指向其他API,为用户调用提供指引信息。如: 当调用<a href="http://api.blog.com/">http://api.blog.com</a> 时返回<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;rel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;collection https://www.blog.com/blogs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.blog.com/blogs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;List of blogs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.yourformat+json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>rel 表示与该API的关系，href表示指引API的链接，title表示API的标题，type表示接受类型</li></ul></li><li>HTTP Request Method覆盖<ul><li>一些老的HTTP Client只支持GET、POST请求，为了兼容这些Client，API需要覆盖HTTP方法，一般做法是HTTP POST请求会有一个<strong>X-HTTP-Method-Override</strong>请求头，其值为PUT,PATCH,DELETE之一,以此兼容请求。</li></ul></li><li>限制速度<ul><li>避免请求泛滥，HTTP引入状态码429(Too Many Requests)</li><li>一般地，是返回头信息(依照twitter的命名规则)<ul><li><strong>X-Rate-Limit-Limit</strong>: 当前时间段允许的并发请求数</li><li><strong>X-Rate-Limit-Remaining</strong>: 当前时间段保留的请求数。</li><li><strong>X-Rate-Limit-Reset</strong>: 重置时间(秒)</li><li><strong>Retry-After</strong>: 下一次访问应该等待的时间(秒)</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Integration Websocket</title>
      <link href="/2018/08/27/spring-intergration-websocket/"/>
      <url>/2018/08/27/spring-intergration-websocket/</url>
      
        <content type="html"><![CDATA[<h1 id="一-依赖（这里只列举了websocket相关依赖）"><a href="#一-依赖（这里只列举了websocket相关依赖）" class="headerlink" title="一. 依赖（这里只列举了websocket相关依赖）"></a>一. 依赖（这里只列举了websocket相关依赖）</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring webSocket依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-messaging --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.websocket<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.websocket-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- websocket客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.tyrus.bundles<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tyrus-standalone-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二-WebSocket服务端"><a href="#二-WebSocket服务端" class="headerlink" title="二. WebSocket服务端"></a>二. WebSocket服务端</h1><h4 id="2-1-核心代码"><a href="#2-1-核心代码" class="headerlink" title="2.1. 核心代码"></a>2.1. 核心代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.websocket.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.github.CommonConstant;</span><br><span class="line"><span class="keyword">import</span> com.github.session.SObject;</span><br><span class="line"><span class="keyword">import</span> com.github.websocket.configuration.HttpSessionConfigurator;</span><br><span class="line"><span class="keyword">import</span> com.github.websocket.msg.Msg;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DESC</span> : &lt;p&gt;注解&#123;<span class="doctag">@link</span> ServerEndpoint&#125;声明websocket 服务端&lt;/p&gt;&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2017/5/25  9:43&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/chat&quot;, configurator = HttpSessionConfigurator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WSServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(WSServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在线人数 线程安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">onlineCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接集合 userId =&gt; server 键值对 线程安全</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">final</span> ConcurrentMap&lt;String, WSServer&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前会话的httpsession</span></span><br><span class="line">    <span class="keyword">private</span> HttpSession httpSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session websocket连接sesson</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config  &#123;<span class="doctag">@link</span> com.github.websocket.configuration.HttpSessionConfigurator&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@DESC</span> &lt;p&gt;注解&#123;<span class="doctag">@link</span> OnOpen&#125; 声明客户端连接进入的方法&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, EndpointConfig config)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到httpSession</span></span><br><span class="line">        <span class="built_in">this</span>.httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取session对象 SObject(这个就是java web登入后的保存的session对象，此处为用户信息，包含了userId)</span></span><br><span class="line">        <span class="type">SObject</span> <span class="variable">user</span> <span class="operator">=</span> (SObject) <span class="built_in">this</span>.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.session = session;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将连接session对象存入map</span></span><br><span class="line">        map.put(user.getUid(), <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数+1</span></span><br><span class="line">        addOnlineCount();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;有新的连接，当前连接数为：&quot;</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&#123;<span class="doctag">@link</span> OnClose&#125; 关闭连接&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取当前连接信息 &#123;<span class="doctag">@code</span> CommonConstant.USER_LOGIN_SESSION&#125; 为Http session 名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SObject</span> <span class="variable">user</span> <span class="operator">=</span> (SObject) <span class="built_in">this</span>.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除连接</span></span><br><span class="line">        map.remove(user.getUid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接数-1</span></span><br><span class="line">        subOnlineCount();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;有一连接断开，当前连接数为：&quot;</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&#123;<span class="doctag">@link</span> OnMessage&#125; 消息监听处理方法&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息对象&#123;<span class="doctag">@link</span> com.github.websocket.msg.Msg&#125;的JSON对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将消息转Msg对象</span></span><br><span class="line">        <span class="type">Msg</span> <span class="variable">msg</span> <span class="operator">=</span> JSON.parseObject(message, Msg.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 可以对msg做些处理...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据Msg消息对象获取定点发送人的userId</span></span><br><span class="line">        <span class="type">WSServer</span> <span class="variable">_client</span> <span class="operator">=</span> map.get(msg.getToUid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定点发送</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(msg.getToUid())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != _client) &#123;</span><br><span class="line">                <span class="comment">// 是否连接判断</span></span><br><span class="line">                <span class="keyword">if</span> (_client.session.isOpen())</span><br><span class="line">                    <span class="comment">// 消息发送</span></span><br><span class="line">                    _client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 群发</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(msg.getToUid())) &#123;</span><br><span class="line">            <span class="comment">// 群发已连接用户</span></span><br><span class="line">            <span class="keyword">for</span> (WSServer client : map.values()) &#123;</span><br><span class="line">                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&#123;<span class="doctag">@link</span> OnError&#125; websocket系统异常处理&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">        logger.error(t);</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;系统主动推送 这是个静态方法在web启动后可在程序的其他合适的地方和时间调用，这就实现了系统的主动推送&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息对象&#123;<span class="doctag">@link</span> com.github.websocket.msg.Msg&#125;的JSON对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushBySys</span><span class="params">(Msg msg)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 也可以实现定点推送</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 群发</span></span><br><span class="line">        <span class="keyword">for</span> (WSServer client : map.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> WSServer.onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加连接数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        WSServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 减少连接数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">subOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        WSServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2-HttpSessionConfigurator类"><a href="#2-2-HttpSessionConfigurator类" class="headerlink" title="2.2. HttpSessionConfigurator类"></a>2.2. HttpSessionConfigurator类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.websocket.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.HandshakeResponse;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.HandshakeRequest;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpointConfig;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpointConfig.Configurator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DESC</span> : &lt;p&gt;讲http request的session 存入websocket的session内&lt;/p&gt;&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2017/5/25  16:08&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpSessionConfigurator</span> <span class="keyword">extends</span> <span class="title class_">Configurator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyHandshake</span><span class="params">(ServerEndpointConfig sec,</span></span><br><span class="line"><span class="params">                                HandshakeRequest request, HandshakeResponse response)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前Http连接的session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">httpSession</span> <span class="operator">=</span> (HttpSession) request.getHttpSession();</span><br><span class="line">        <span class="comment">// 将http session信息注入websocket session</span></span><br><span class="line">        sec.getUserProperties().put(HttpSession.class.getName(), httpSession);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-3-Msg消息体"><a href="#2-3-Msg消息体" class="headerlink" title="2.3. Msg消息体"></a>2.3. Msg消息体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.websocket.msg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DESC</span> : &lt;p&gt;WebSocket消息模型&lt;/p&gt;&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2017/5/25  9:43&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Msg</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 推送人ID</span></span><br><span class="line">    <span class="keyword">private</span> String fromUid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定点推送人ID</span></span><br><span class="line">    <span class="keyword">private</span> String toUid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定点推送单位ID</span></span><br><span class="line">    <span class="keyword">private</span> String toOrgId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息体</span></span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 推送时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Date</span> <span class="variable">createDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Msg</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Msg</span><span class="params">(String fromUid, String toUid, String toOrgId, String data, Date createDate, Integer flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fromUid = fromUid;</span><br><span class="line">        <span class="built_in">this</span>.toUid = toUid;</span><br><span class="line">        <span class="built_in">this</span>.toOrgId = toOrgId;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.createDate = createDate;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFromUid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fromUid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFromUid</span><span class="params">(String fromUid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fromUid = fromUid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getToUid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toUid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setToUid</span><span class="params">(String toUid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.toUid = toUid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getToOrgId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toOrgId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setToOrgId</span><span class="params">(String toOrgId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.toOrgId = toOrgId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getCreateDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateDate</span><span class="params">(Date createDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createDate = createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(Integer flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Msg&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;fromUid=&#x27;&quot;</span> + fromUid + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, toUid=&#x27;&quot;</span> + toUid + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, toOrgId=&#x27;&quot;</span> + toOrgId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&#x27;&quot;</span> + data + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createDate=&quot;</span> + createDate +</span><br><span class="line">                <span class="string">&quot;, flag=&quot;</span> + flag +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三-客户端（HTML5）"><a href="#三-客户端（HTML5）" class="headerlink" title="三. 客户端（HTML5）"></a>三. 客户端（HTML5）</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建websocket实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080/chat&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     *监听三种状态的变化js会回调</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    ws.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 连接回调</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    ws.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 断开连接回调</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 消息监听</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showMessage</span>(message.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        ws.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//关闭连接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">closeWebSocket</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        ws.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = input.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 消息体JSON 对象 对应JAVA 的 Msg对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定点发送给其他用户的userId</span></span></span><br><span class="line"><span class="language-javascript">toUid : <span class="string">&quot;3d535429-5fcb-4490-bcf7-96fd84bb17b6&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">data : text</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">showMessage</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(message).<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> br = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;showChatMessage&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">appendChild</span>(text);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">appendChild</span>(br);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        style=&quot;width: 600px; height: 240px; overflow-y: auto; border: 1px solid #333;&quot;</span><br><span class="line">        id=&quot;show&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;showChatMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;80&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入聊天内容&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendBn&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sendBn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web Socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Web Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Cache Summarize</title>
      <link href="/2018/07/16/redis-cache-summarize/"/>
      <url>/2018/07/16/redis-cache-summarize/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul><li>Redis全称: Remote Dictionary Server</li><li>基于内存的Key-Value存储系统，单线程实现  </li><li>多样的数据类型，支持的数据类型有：string(字符串)、hash(哈希)、list(链表)、set(集合)、zset(sorted set有序集合) </li><li>redis的value大小可达到1GB(memcach只能达到1MB)</li><li>持久化，redis会周期性的将更新的数据写入磁盘  </li><li>master-slave(主从)同步  </li><li>3.0后支持分布式存储，去中心化，具有线性伸缩功能</li><li><a href="http://redisdoc.com/index.html">Redis命令大全</a></li></ul><h2 id="2-Redis数据持久化"><a href="#2-Redis数据持久化" class="headerlink" title="2. Redis数据持久化"></a>2. Redis数据持久化</h2><h3 id="2-1-RDB-Redis-DataBase"><a href="#2-1-RDB-Redis-DataBase" class="headerlink" title="2.1. RDB(Redis DataBase)"></a>2.1. RDB(Redis DataBase)</h3><ul><li>SNAPSHOT(快照): <code>save 秒数 写操作次数</code>如<code>save 9000 1</code>表示900s(15min)有一次写操作生成快照，也可<code>save &quot;&quot;</code>表示每次写操作即生成快照</li><li>配置<code>stop-writes-on-bgsave-error yes/no</code>当后台生成快照错误是否中断redis写操作的支持</li><li>配置<code>rdbcompression yes/no</code>表示是否压缩RDB文件</li><li>每次会fork一份来重启另一个进程进行持久化</li></ul><h3 id="2-2-AOF-Append-Only-File"><a href="#2-2-AOF-Append-Only-File" class="headerlink" title="2.2. AOF(Append Only File)"></a>2.2. AOF(Append Only File)</h3><ul><li>配置<code>appendonly no/yes</code>启用AOF，启动时会触发全量写文件，后面写操作是增量写文件</li><li>同步策略配置<code>appendfsync always(每次写操作都触发同步)/everysec(每秒同步一次)/no(不同步)</code></li><li>重写(rewrite): 满足条件后触发重写，会对AOF文件内容优化，减少文件大小<br><strong>auto-aof-rewrite-percentage 100 (表示超过文件的百分比)</strong><br><strong>auto-aof-rewrite-min-size 64mb (触发重写的最小文件大小)</strong></li><li>AOF文件修复: <code>redis-check-aof --fix appendonly.aof</code></li></ul><h3 id="2-3-比较"><a href="#2-3-比较" class="headerlink" title="2.3. 比较"></a>2.3. 比较</h3><ul><li>RDB安全性较差、容易丢失最近一次缓存内容，但文件较小，恢复速度较快，是Master&#x2F;Slave主从复制模式下的最好补充</li><li>AOF更加安全、数据的完整性较强、但文件较大、恢复速度较慢，IO开支较大，比较影响性能</li><li>Redis启用默认是脚在AOF文件恢复数据</li></ul><h3 id="2-4-缓存驱逐策略"><a href="#2-4-缓存驱逐策略" class="headerlink" title="2.4. 缓存驱逐策略"></a>2.4. 缓存驱逐策略</h3><ul><li><strong>volatile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li><strong>allkeys-lru</strong>：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li><strong>no-enviction</strong>：禁止驱逐数据</li></ul><h2 id="3-Redis集群"><a href="#3-Redis集群" class="headerlink" title="3. Redis集群"></a>3. Redis集群</h2><h3 id="3-1-分片策略"><a href="#3-1-分片策略" class="headerlink" title="3.1. 分片策略"></a>3.1. 分片策略</h3><ul><li>Redis集群被分为16384(2<sup>14</sup>)个hash slot(hash槽)，集群内每个节点都拥有部分hash槽，使用数据键的CRC16编码对16384取模来计算数据对应的hash槽，Redis最大节点数为16384</li><li>Redis集群新增节点只用把集群中每个节点的部分hash槽移动到新节点中即可</li><li>Redis集群移除节点也只用把该节点的hash槽移动到其他节点即可</li><li>Redis集群之间是异步复制</li></ul><h3 id="3-2-架构分析"><a href="#3-2-架构分析" class="headerlink" title="3.2. 架构分析"></a>3.2. 架构分析</h3><ul><li>所有的redis节点彼此互联(PING-PONG 机制),内部使用二进制协议优化传输速度和带宽.</li><li>节点的fail是通过集群中超过半数的节点检测失效时才生效  </li><li>客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database</title>
      <link href="/2018/07/06/database/"/>
      <url>/2018/07/06/database/</url>
      
        <content type="html"><![CDATA[<h2 id="一-四大特性-CIAD"><a href="#一-四大特性-CIAD" class="headerlink" title="一. 四大特性(CIAD)"></a>一. 四大特性(CIAD)</h2><ol><li><strong>原子性(Atomicity)</strong>: 要么全成功，要么全失败，失败会回滚。</li><li><strong>一致性(Consistency)</strong>: 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</li><li><strong>隔离性(Isolation)</strong>: 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li><li><strong>持久性(Durability)</strong>: 一旦事物提交成功，那么数据库中的数据就是永久改变的，即使系统故障也不会丢失提交的事物。</li></ol><h2 id="二-数据库隔离级别"><a href="#二-数据库隔离级别" class="headerlink" title="二. 数据库隔离级别"></a>二. 数据库隔离级别</h2><h3 id="1-不考虑隔离级别造成的问题"><a href="#1-不考虑隔离级别造成的问题" class="headerlink" title="1. 不考虑隔离级别造成的问题"></a>1. 不考虑隔离级别造成的问题</h3><ol><li>更新丢失: 2个事物同时更新一条数据会有一个事物把另一个事物的更新覆盖了，这是因为系统没有任何操作隔离导致的.</li><li>脏读: 一个事物读取了另一个事物还未提交事物的数据</li><li>不可重复读: 一个事务对同一行数据重复读取两次，但是却得到了不同的结果<ul><li>虚读: 一个事物去改变数据改变后发现还有数据为按要求改变，是因为另一事物也做了改变的缘故</li><li>幻读: 同一个事物内多次查询返回的结果不一致，是因为另一事物对数据进行了改变</li></ul></li></ol><h3 id="2-隔离级别-低-高"><a href="#2-隔离级别-低-高" class="headerlink" title="2. 隔离级别(低 -&gt; 高)"></a>2. 隔离级别(低 -&gt; 高)</h3><ol><li><strong>Read uncommitted(未授权读取、读未提交)</strong><ul><li>当一个事物在执行写操作时，则不允许另一事物执行写操作，可执行其他操作，可由排他锁来实现</li><li>解决了更新丢失问题，但会出现脏读</li></ul></li><li><strong>Read committed(授权读取、读提交)</strong><ul><li>读取数据事物允许其他事物继续访问该数据，但未提交的数据禁止其他事物访问</li><li>避免了脏读，但可能会出现幻读</li></ul></li><li><strong>Repeatable read(可重复读取)</strong><ul><li>读数据的事物将禁止写事物(可以读事物),写事物将禁止所有其他事物</li><li>避免了脏读和不可重复读，但可能会出现幻读</li></ul></li><li><strong>Serializable(序列化)</strong><ul><li>事物严格按照顺序一个一个执行</li><li>能避免所有情况，但会极大影响系统性能</li></ul></li></ol><h3 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h3><ol><li>大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。<br>  Mysql的默认隔离级别就是Repeatable read。 </li><li>MySQL数据库隔离级别管理  <ul><li>查看隔离级别: <code>select @@tx_isolation</code>  </li><li>修改隔离级别:<br><code>set [glogal | session] transaction isolation level 隔离级别名称</code>如<code>set transaction isolation level read-committed</code><br>或者<code>set tx_isolation=&#39;隔离级别名称&#39;</code> 如 <code>set tx_isolation = &#39;read-committed&#39;</code></li></ul></li><li>隔离级别的设置只对当前连接有效</li></ol><h3 id="4-MySQL悲观锁、乐观锁、共享锁与排他锁"><a href="#4-MySQL悲观锁、乐观锁、共享锁与排他锁" class="headerlink" title="4. MySQL悲观锁、乐观锁、共享锁与排他锁"></a>4. MySQL悲观锁、乐观锁、共享锁与排他锁</h3><ol><li><strong>悲观锁</strong>: 在操作数据时都认为会出现数据冲突，所以每次都会去获取锁，只有获取锁后才能对数据操作。</li><li><strong>乐观锁</strong>: 在操作数据都认为不会发生数据冲突，可以直接操作，一般由用户通过版本号自己实现。</li><li><strong>共享锁</strong>: 共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。在SQL后面加上<code>lock in share mode</code>表示使用共享锁。</li><li><strong>排他锁</strong>: 排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类型，在需要执行的语句后面加上<code>for update</code>就可以了。</li></ol><h2 id="三-数据库的三大范式-Normal-Form"><a href="#三-数据库的三大范式-Normal-Form" class="headerlink" title="三. 数据库的三大范式(Normal Form)"></a>三. 数据库的三大范式(Normal Form)</h2><ol><li><strong>第一范式(1NF)</strong>：强调的是列的原子性，即列不能够再分成其他几列。</li><li><strong>第二范式(2NF)</strong>：一个表必须有一个主键，二是其他列必须完全依赖于主键，而不能依赖主键一部分</li><li><strong>第三范式(3NF)</strong>：非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。</li></ol><h2 id="四-数据库数据结构"><a href="#四-数据库数据结构" class="headerlink" title="四. 数据库数据结构"></a>四. 数据库数据结构</h2><ol><li>B+ Tree<ul><li>相较于B Tree多了一层，只有树的叶子节点存储实际数据，方便了range查询操作</li></ul></li></ol><h2 id="五-mysql的MyISAM与InnoDB"><a href="#五-mysql的MyISAM与InnoDB" class="headerlink" title="五. mysql的MyISAM与InnoDB"></a>五. mysql的MyISAM与InnoDB</h2><ol><li><code>show engines</code> 查看当前引擎与默认引擎</li><li>设置表引擎 CREATE后面加<code>CREATE TABLE &quot;&quot; () ENGINE=MyISAM</code> 或 <code>alter table 表名 ENGINE = InnoDB</code></li><li>比较  <ul><li>MyISAM不支持事物,InnoDB支持  </li><li>InnoDB支持行锁定,MyISAM不支持，只支持表锁定   </li><li>InnoDB支持外键,MyISAM不支持  </li><li>MyISAM支持全文检索,InnoDB不支持  </li><li>MyISAM内置一个数据计数器，能很容易得出<code>SELECT COUNT(*) FROM TABLE_NAME</code>结果  </li><li>MyISAM索引数据与表数据分离，而InnoDB索引与表数据紧密关联</li></ul></li></ol><h2 id="六-SQL功能"><a href="#六-SQL功能" class="headerlink" title="六. SQL功能"></a>六. SQL功能</h2><ol><li><strong>数据定义(DDL)</strong>：用于定义SQL模式、基本表、视图和索引的创建和撤消操作</li><li><strong>数据操纵(DML)</strong>：数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作</li><li><strong>数据控制</strong>：包括对基本表和视图的授权，完整性规则的描述，事务控制等内容</li><li><strong>嵌入式SQL使用规定</strong>：涉及到SQL语句嵌入在宿主语言程序中使用的规则</li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Classloader</title>
      <link href="/2018/06/25/java-classloader/"/>
      <url>/2018/06/25/java-classloader/</url>
      
        <content type="html"><![CDATA[<h2 id="1-类加载时机"><a href="#1-类加载时机" class="headerlink" title="1. 类加载时机"></a>1. 类加载时机</h2><h3 id="1-1-生命周期"><a href="#1-1-生命周期" class="headerlink" title="1.1. 生命周期"></a>1.1. 生命周期</h3><p>   <img src="/images/java/class_loader.png" alt="生命周期"></p><h3 id="1-2-立即初始化-主动引用"><a href="#1-2-立即初始化-主动引用" class="headerlink" title="1.2. 立即初始化(主动引用)"></a>1.2. 立即初始化(主动引用)</h3><ol><li>遇到<code>new</code>、 <code>getstatic</code>、 <code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时</li><li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用的时候,如果类没有进行过初始化,则需要先触发其初始化.</li><li>当初始化一个类的时候,如果发现其父类还没有进行过初始化,则需要先触发其父类的初始化.</li><li>当虚拟机启动时,用户需要指定一个要执行的主类(包含<code>main()</code>方法的那个类),虚拟机会先初始化这个主类.</li><li>当使用JDK 1.7的动态语言支持时,如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果<strong>REF_getStatic</strong>、<strong>REF_putStatic</strong>、<strong>REF_invokeStatic</strong>的方法句柄,并且这个方法句柄所对应的类没有进行过初始化,则需要先触发其初始化.</li></ol><h3 id="1-3-被动加载"><a href="#1-3-被动加载" class="headerlink" title="1.3. 被动加载"></a>1.3. 被动加载</h3><ol><li>子类调用父类静态方法,子类不会被初始化</li><li>引用类型定义不初始化加载</li><li>常量调用不会初始化类(编译期已进入常量池)</li></ol><h3 id="1-4-接口初始化"><a href="#1-4-接口初始化" class="headerlink" title="1.4. 接口初始化"></a>1.4. 接口初始化</h3><p>   &emsp;&emsp;当一个类在初始化时,要求其父类全部都已经初始化过了,但是一个接口在初始化时,并不要求其父接口全部都完成了初始化,   只有在真正使用到父接口的时候(如引用接口中定义的常量)才会初始化.</p><h2 id="2-类加载过程"><a href="#2-类加载过程" class="headerlink" title="2. 类加载过程"></a>2. 类加载过程</h2><h3 id="2-2-加载"><a href="#2-2-加载" class="headerlink" title="2.2. 加载"></a>2.2. 加载</h3><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流(这一条玩出了很多技术,如:jsp(从其他文件中生成),Applet(从网络中获取),Proxy(运行时计算)).</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构.</li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象,作为方法区这个类的各种数据的访问入口.<br>   **   注:<br>   &emsp;&emsp;加载阶段完成后,虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中,方法区中的数据存储格式由虚拟机实现自行定义,   虚拟机规范未规定此区域的具体数据结构. 然后在内存中实例化一个<code>java.lang.Class</code>类的对象(并没有明确规定是在Java堆中,   对于HotSpot虚拟机而言,Class对象比较特殊,它虽然是对象,但是存放在方法区里面),这个对象将作为程序访问方法区中的这些类型数据的外部接口.   **</li></ol><h3 id="2-3-验证"><a href="#2-3-验证" class="headerlink" title="2.3. 验证"></a>2.3. 验证</h3><p>   &emsp;&emsp;确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机自身的安全.   <code>-Xverify:none</code>   参数来关闭大部分的类验证措施,以缩短虚拟机类加载的时间.  </p><ol><li>文件格式验证<ul><li>魔数<strong>0xCAFEBABE</strong>验证</li><li>主、次版本号验证</li><li>常量池常量验证</li><li>UTF-8编码验证</li><li>…</li></ul></li><li>元数据验证<ul><li>这个类是否有父类</li><li>该类是否继承了不能继承的类(如:<code>final类</code>)</li><li>…</li></ul></li><li>字节码验证<br>第三阶段是整个验证过程中最复杂的一个阶段,主要目的是通过数据流和控制流分析,确定程序语义是合法的、 符合逻辑的.<ul><li>保证跳转指令不会跳转到方法体以外的字节码指令上.</li><li>保证方法体中的类型转换是有效的</li><li>…</li></ul></li><li>符号引用验证<ul><li>符号引用中通过字符串描述的全限定名是否能找到对应的类.</li><li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段.</li><li>符号引用中的类、 字段、 方法的访问性(<code>private</code>、 <code>protected</code>、 <code>public</code>、 <code>default</code>)是否可被当前类访问(不通过将抛一个IncompatibleClassChangeError异常子类).</li><li>…</li></ul></li></ol><h3 id="2-4-准备"><a href="#2-4-准备" class="headerlink" title="2.4. 准备"></a>2.4. 准备</h3><p>   &emsp;&emsp;准备阶段是正式为类变量分配内存并设置类变量初始值的阶段,这些变量所使用的内存都将在方法区中进行分配.   注:内存分配仅包括类变量(static修饰),不包括实例变量;初始值通常是指零值(如:<code>public static int v = 123;</code> 初始值v为0而非123,   但如<code>public static final int v = 123;</code>时将被初始化为123)</p><h3 id="2-5-解析"><a href="#2-5-解析" class="headerlink" title="2.5. 解析"></a>2.5. 解析</h3><p>   &emsp;&emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程</p><ul><li>符号引用(Symbolic References)</li><li>直接引用(Direct References)</li><li>虚拟机对除invokedynamic(动态调用点限定符)指令外的操作进行缓存</li><li>解析动作主要针对类或接口、 字段、 类方法、 接口方法、 方法类型、 方法句柄和调用点限定符7类符号引用进行,分别对应于常量池的<strong>CONSTANT_Class_info</strong>、<strong>CONSTANT_Fieldref_info</strong>、 <strong>CONSTANT_Methodref_info</strong>、<strong>CONSTANT_InterfaceMethodref_info</strong>、 <strong>CONSTANT_MethodType_info</strong>、<strong>CONSTANT_MethodHandle_info</strong>和<strong>CONSTANT_InvokeDynamic_info</strong> 7种常量类型<ul><li>1)类或接口解析</li><li>2)字段解析</li><li>3)类方法解析</li><li>4)接口方法解析</li></ul></li></ul><h3 id="2-6-初始化"><a href="#2-6-初始化" class="headerlink" title="2.6. 初始化"></a>2.6. 初始化</h3><p>   &emsp;&emsp;类加载的最后一步,真正执行java的字节码<code>.&lt;clinit&gt;()</code>方法保证在子类执行之前父类的<code>&lt;clinit&gt;()</code>已执行完毕.虚拟机中第一个被执   行的<code>&lt;clinit&gt;()</code>方法的类肯定是<code>java.lang.Object.&lt;clinit&gt;()</code>虚拟机保证只执行一次,多线程时只会有一条线程执行,其他线程阻塞等待.</p><h3 id="2-7-卸载"><a href="#2-7-卸载" class="headerlink" title="2.7. 卸载"></a>2.7. 卸载</h3><h2 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3. 类加载器"></a>3. 类加载器</h2><p>   <strong>描述:</strong><br>   通过一个类的全限定名来获取描述此类的二进制字节流   <strong>应用:</strong>    类层次划分、热部署、OSGi(面向Java的动态模型系统)、代码加密等</p><h3 id="3-1-类与类加载器"><a href="#3-1-类与类加载器" class="headerlink" title="3.1. 类与类加载器"></a>3.1. 类与类加载器</h3><p>   相同的类被不同的类加载器加载他们必不相等.</p><h3 id="3-2-双亲委派模型-Parents-Delegation-Model"><a href="#3-2-双亲委派模型-Parents-Delegation-Model" class="headerlink" title="3.2. 双亲委派模型(Parents Delegation Model)"></a>3.2. 双亲委派模型(Parents Delegation Model)</h3><h4 id="3-2-1-类加载器"><a href="#3-2-1-类加载器" class="headerlink" title="3.2.1. 类加载器"></a>3.2.1. 类加载器</h4><ol><li>启动类加载器(Bootstrap ClassLoader)C++实现、虚拟机一部分<ul><li>又称 引导类加载器</li><li>按名识别,如:rt.jar</li><li>负责加载&lt;JAVA_HOME&gt;\lib目录或被参数<code>-Xbootclasspth</code>指定的目录</li></ul></li><li>其他类加载器, java实现,独立与虚拟机外部,全部继承抽象类java.lang.ClassLoader<ul><li>扩展类加载器(Extension ClassLoader)<ul><li>由sun.misc.Launcher$ExtClassLoader类实现</li><li>负责加载&lt;JAVA_HOME&gt;\lib\ext目录或参数<code>-Djava.ext.dirs</code>所指定目录下的类</li></ul></li><li>应用程序类加载器(Application ClassLoader)<ul><li>又称 系统类加载器</li><li>由sun.misc.Launcher$AppClassLoader实现</li><li>它负责加载用户类路径(ClassPath)上所指定的类库,开发者可以直接使用这个类加载器,是程序中默认的类加载器</li></ul></li></ul></li></ol><h4 id="3-2-2-双亲委派模型图"><a href="#3-2-2-双亲委派模型图" class="headerlink" title="3.2.2. 双亲委派模型图"></a>3.2.2. 双亲委派模型图</h4>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                                  自定义类加载器(CustomClassLoader)</span><br><span class="line">                                                 /</span><br><span class="line">启动类加载器 &lt;-- 扩展类加载器 &lt;-- 应用程序加载器 &lt;--</span><br><span class="line">                                                 \</span><br><span class="line">                                                  自定义类加载器(CustomClassLoader)</span><br></pre></td></tr></table></figure><p>   &emsp;&emsp;双亲委派模型的工作过程是:如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加载这个类,而   是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,因此所有的加载请求最终都应该传送到顶层的启动类加载器中,   只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时,子加载器才会尝试自己去加载</p><h3 id="3-3-破坏双亲委派模型"><a href="#3-3-破坏双亲委派模型" class="headerlink" title="3.3. 破坏双亲委派模型"></a>3.3. 破坏双亲委派模型</h3><h2 id="4-问题"><a href="#4-问题" class="headerlink" title="4. 问题"></a>4. 问题</h2><h3 id="4-1-为什么要用双亲委派类加载"><a href="#4-1-为什么要用双亲委派类加载" class="headerlink" title="4.1. 为什么要用双亲委派类加载"></a>4.1. 为什么要用双亲委派类加载</h3><p>   &emsp;&emsp;双亲委派模型可以防止内存中出现多分同样的字节码，如果没有双亲委派模型的话如果用户编写了一个<code>java.lang.Object</code>的同   名类放在classpath中，多个类加载器去加载这个类到内存中系统会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法   保证，而且如果不使用这种模型将给虚拟机带来安全隐患。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> Classloader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Compile and Optimize</title>
      <link href="/2018/06/17/java-compile-and-optimize/"/>
      <url>/2018/06/17/java-compile-and-optimize/</url>
      
        <content type="html"><![CDATA[<h2 id="1-早期-编译期-优化"><a href="#1-早期-编译期-优化" class="headerlink" title="1. 早期(编译期)优化"></a>1. 早期(编译期)优化</h2><h3 id="1-1-概论"><a href="#1-1-概论" class="headerlink" title="1.1. 概论"></a>1.1. 概论</h3><ol><li>前端编译器:Sun的Javac、 Eclipse JDT中的增量式编译器(ECJ)<ul><li>JIT编译器:HotSpot VM的C1、 C2编译器</li><li>AOT编译器:GNU Compiler for the Java(GCJ)、 Excelsior JET</li></ul></li><li>javac这类编译器几乎不对代码进行性能优化,把性能优化放到了JIT即时编译器内,可为JRuby、Groovy这类语言的代码也同等享有优化带来的好处</li></ol><h3 id="1-2-javac编译"><a href="#1-2-javac编译" class="headerlink" title="1.2. javac编译"></a>1.2. javac编译</h3><h4 id="1-2-1-编译过程"><a href="#1-2-1-编译过程" class="headerlink" title="1.2.1. 编译过程"></a>1.2.1. 编译过程</h4><ol><li>解析与填充符号表过程</li></ol><ul><li>词法、语法分析<ul><li>词法分析是将源代码的字符流转变为标记(Token)集合,单个字符是程序编写过程的最小元素,而标记则是编译过程的最小元素,关键字、 变量名、 字面量、 运算符都可以成为标记</li><li>语法分析是根据Token序列构造抽象语法树的过程,抽象语法树(Abstract Syntax Tree,AST)是一种用来描述程序代码语法结构的树形表示方式,语法树的每一个节点都代表着程序代码中的一个语法结构(Construct),例如包、 类型、 修饰符、 运算符、 接口、 返回值甚至代码注释等都可以是一个语法结构.</li></ul></li><li>填充符号表<ul><li>符号表(Symbol Table)是由一组符号地址和符号信息构成的表格</li><li>在语义分析中,符号表所登记的内容将用于语义检查(如检查一个名字的使用和原先的说明是否一致)和产生中间代码.在目标代码生成阶段,当对符号名进行地址分配时,符号表是地址分配的依据.</li></ul></li></ul><ol start="2"><li>插入式注解处理器的注解处理过程</li><li>分析与字节码生成过程</li></ol><ul><li>标注检查<ul><li>检查的内容包括诸如变量使用前是否已被声明、 变量与赋值之间的数据类型是否能够匹配等</li><li>常量折叠 如定义了<code>int a = 1 + 2</code>会被编译为<code>int a = 3</code></li></ul></li><li>数据及控制流分析<ul><li>数据及控制流分析是对程序上下文逻辑更进一步的验证,它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、 是否所有的受查异常都被正确处理了等问题.</li></ul></li><li>语法糖<ul><li>语法糖:也称糖衣语法,是由英国计算机科学家彼得·约翰·兰达(Peter J.Landin)发明的一个术语,指在计算机语言中添加的某种语法,这种语法对语言的功能并没有影响,但是更方便程序员使用.通常来说,使用语法糖能够增加程序的可读性,从而减少程序代码出错的机会.</li><li>java语法糖:泛型、变长参数、 自动装箱&#x2F;拆箱等 内部类、 枚举类、 断言语句、 对枚举和字符串(在JDK 1.7中支持)的switch支持、 try语句中定义和关闭资源(在JDK 1.7中支持)等</li><li>泛型:编译器会进行解泛,所以泛型不能进行方法重载</li><li>自动装箱、 拆箱与遍历循环</li><li>条件编译 if 的条件为常量时编译期会被执行</li></ul></li><li>字节码生成<ul><li>字节码生成阶段不仅仅是把前面各个步骤所生成的信息(语法树、 符号表)转化成字节码写到磁盘中,编译器还进行了少量的代码添加和转换工作.</li></ul></li></ul><h2 id="2-晚期-运行期-优化"><a href="#2-晚期-运行期-优化" class="headerlink" title="2. 晚期(运行期)优化"></a>2. 晚期(运行期)优化</h2><h3 id="2-1-即时编译器-JIT"><a href="#2-1-即时编译器-JIT" class="headerlink" title="2.1. 即时编译器(JIT)"></a>2.1. 即时编译器(JIT)</h3><ol><li>为了提高热点代码的执行效率,在运行时,虚拟机将会把这些代码编译成与本地平台相关的机器码,并进行各种层次的优化,完成这个任务的编译器称为即时编译器(Just In Time Compiler)</li><li>解释器与编译器(sun HotSpot虚拟机为例)</li></ol><ul><li>交互模型 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   +---------------即时编译-----------↓</span><br><span class="line">   ↓                         Client Compiler(C1编译器)</span><br><span class="line">解释器(Interpreter)               编译器</span><br><span class="line">   ↑                         Server Compiler(C2编译器)</span><br><span class="line">   +----------------逆优化------------↑</span><br></pre></td></tr></table></figure></li><li>HotSpot虚拟机同时由解释器与编译器搭配使用(成为混合模式(Mixed Model)),可添加参数-Xint强制虚拟机使用解释模式(Interpreted Mode),可添加参数<code>-Xcomp</code>强制虚拟机使用编译模式(Compiled Mode)</li><li>启动参数<code>-client</code>启用Client Compiler编译器 参数<code>-server</code>启用Server Compiler编译器</li><li>HotSpot虚拟机还会逐渐启用分层编译(Tiered Compilation)的策略,分层编译的概念在JDK 1.6时期出现,JDK1.7中Server模式中默认开启,之前需配参数<code>-XX:+TieredCompilation</code>启用</li></ul><ol start="3"><li>编译对象与触发条件</li></ol><ul><li>触发条件<ul><li>被多次调用的方法</li><li>被多次执行的循环体,这个称为栈上替换(On Stack Replacement,简称为OSR编译)</li></ul></li><li>热点代码判定<ul><li>基于采样的热点探测,周期性检测个线程的栈顶,若某个方法经常在栈顶,则认为是热点方法；优点是实现简单简单,高效,容易获取方法调用关系,缺点是不能准确判定一个方法的热度</li><li>基于计数器的热点探测,虚拟机为每个方法设定计数器,统计方法执行次数,若超过一定阈值则认为是热点方法；优点是能准确判定一个方法的热度,缺点是要为每个方法建立计数器并维护,实现麻烦,也不能获取方法的调用关系</li></ul></li><li>HotSpot虚拟机是基于计数器的热点探测,有2个计数器:方法调用计数器(Invocation Counter)和回边计数器(Back Edge Counter)<ul><li>方法调用计数器,Client模式下阈值为1500次,Server模式下阈值为1000次,可由参数<code>-XX:CompileThreshold</code>来设置<code>-XX:-UseCounterDecay</code>设置关闭热度衰减,<code>-XX:CounterHalfLifeTime</code>参数设置半衰周期的时间,单位是秒</li><li>回边计数器,参数<code>-XX:OnStackReplacePercentage</code>来间接调整回边计数器的阈值<br>Client模式下阈值计算公式:<br><code>方法调用计数器阈值(CompileThreshold)×OSR比率(OnStackReplacePercentage)[默认值为933]/100</code> 默认情况下为13995<br>Server模式下阈值计算公式:<br><code>方法调用计数器阈值(CompileThreshold)×(OSR比率(OnStackReplacePercentage)[默认值140]-解释器监控比率(InterpreterProfilePercentage)[默认值33]/100</code>默认情况下为10700</li></ul></li></ul><ol start="4"><li>编译过程</li></ol><ul><li>Client模式下编译过程<br>   <img src="/images/java/java_client_compiler.png" alt="Client Compiler编译过程"></li><li>Server模式下编译过程<br>相当复杂</li></ul><ol start="5"><li>优化技术</li></ol><ul><li>公共子表达式消除<ul><li>经典优化技术,如果一个表达式E已经计算过了,并且从先前的计算到现在E中所有变量的值都没有发生变化,那么E的这次出现就成为了公共子表达式. 对于这种表达式,没有必要花时间再对它进行计算,只需要直接用前面计算过的表达式结果代替E就可以了</li></ul></li><li>数组边界检查消除<ul><li>语言相关的其他消除操作还有不少,如自动装箱消除(Autobox Elimination)、 安全点消除(Safepoint Elimination)、消除反射(Dereflection)等</li></ul></li><li>方法内联<ul><li>虚拟机最重要的优化手段之一,除了消除方法调用的成本之外,它更重要的意义是为其他优化手段建立良好的基础</li><li>非虚方法直接内联,虚方法引入了一种名为“类型继承关系分析”(Class Hierarchy Analysis,CHA)的技术,检查发现没有多个目标版本可供选择,则也可内联,但需准备一个逃生门,即使有多个版本目标也会默认内联,但在调用时要检查,发现版本目标不一致在取消内联,会从“逃生门”回到解释状态重新执行</li></ul></li><li>逃逸分析(JDK1.6)<ul><li>当下java最前沿的优化技术</li><li>逃逸分析的基本行为就是分析对象动态作用域:当一个对象在方法中被定义后,它可能被外部方法所引用,例如作为调用参数传递到其他方法中,称为方法逃逸. 甚至还有可能被外部线程访问到,譬如赋值给类变量或可以在其他线程中访问的实例变量,称为线程逃逸.</li><li>栈上分配(Stack Allocation),如果证明一个对象不会逃逸到方法之外,则可以将对象分配到方法栈帧内存,这样随着栈帧出栈而销毁,极大地降低了GC系统压力</li><li>同步消除(Synchronization Elimination),如果能证明一个变量不会逃逸出线程,那就可以消除掉同步措施,消除同步带来的消耗</li><li>标量替换(Scalar Replacement)标量(Scalar),是指一个数据已经无法再分解成更小的数据来表示了,如:<code>int</code>,<code>long</code>,<code>double</code>等聚合量(Aggregate),是指一个数据可以被分解,典型的java对象如果证明一个对象不被外界访问,又可拆散的话,那程序在调用的时候就不创建该变量,改为创建多个成员变量来代替,将对象拆分后,除了可以让对象的成员变量在栈上(栈上存储的数据,有很大的概率会被虚拟机分配至物理机器的高速寄存器中存储)分配和读写之外,还可以为后续进一步的优化手段创建条件</li><li>逃逸分析尚不成熟</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JIT </tag>
            
            <tag> Optimize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Collection Frame</title>
      <link href="/2018/06/15/java-collection-frame/"/>
      <url>/2018/06/15/java-collection-frame/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JAVA集合框架图"><a href="#1-JAVA集合框架图" class="headerlink" title="1. JAVA集合框架图"></a>1. JAVA集合框架图</h2><ul><li>集合框架<br>   <img src="/images/java/java_collection.png" alt="集合框架"></li><li>集合框架-简图<br>   <img src="/images/java/java_collection_sample.jpg" alt="集合框架-简图"></li></ul><h2 id="2-ArrayList、LinkedList、Vector、Stack"><a href="#2-ArrayList、LinkedList、Vector、Stack" class="headerlink" title="2. ArrayList、LinkedList、Vector、Stack"></a>2. ArrayList、LinkedList、Vector、Stack</h2><ol><li>都是java的可存储重复元素的集合容器,都实现了Collection、List接口</li><li>ArrayList是基于数组的可动态扩展的、可存储重复元素的、有默认顺序的集合，非线程安全的，最大元素个数为<code>Integer.MAX_VALUE</code>个由于是基于数组的所以add(E)、get(i)效率较高，set(i,E)、remove(i)、add(i,E)效率较低</li><li>LinkedList是基于双向链表的可动态扩展的、可存储重复元素的、非线程安全的有序集合。由于是基于链表的所以add(E)、add(i,E)、set(i,E)、remove(i)效率较高，get(i)效率较低</li><li>Vector是基于数组的可动态扩展的、可存储重复元素的、线程安全的有序集合由于是线程安全的所以效率比上诉的都要低</li><li>Stack(栈),继承了Vector,只有push(入栈)、pop(出栈)、peek(查看)等方法实现</li></ol><h2 id="3-HashSet、LinkedHashSet、TreeSet"><a href="#3-HashSet、LinkedHashSet、TreeSet" class="headerlink" title="3. HashSet、LinkedHashSet、TreeSet"></a>3. HashSet、LinkedHashSet、TreeSet</h2><ol><li>都是java的不可存储重复元素的集合容器,都实现了Collection、Set接口</li><li>HashSet是不重复的(hashcode去重)、非线程安全的无序集合只能放一个null</li><li>LinkedHashSet是不重复的(hashcode去重)、非线程安全的有序集合</li><li>TreeSet是SortedSet唯一实现类，TreeSet可实现自定义排序(实现Comparable接口)</li></ol><h2 id="4-HashMap、HashTable、ConcurrentHashMap、IdentityHashMap"><a href="#4-HashMap、HashTable、ConcurrentHashMap、IdentityHashMap" class="headerlink" title="4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap"></a>4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap</h2><ol><li>都是存储形如key-value集合的容器，都实现了Map接口</li><li>HashMap是非线程安全的、按key值得hashcode去重的、无序的集合, 能接受key为null</li><li>HashTable与HashTable类似，区别在于其实现了同步，效率也相较于HashMap低，不能接受key为null的情况</li><li>ConcurrentHashMap是线程安全的、引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需要等到迭代完成才能访问map。简而言之在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map,所以ConcurrentHashMap效率高于HashTable, 不能接受key为null的情况<br>ConcurrentHashMap实现锁分段技术是通过可重入锁ReentrantLock实现Segment[]分锁，每个Segment内部存放一个或多个HashEntry[]每个HashEntry又是一个链表，具体的数据结构如图：<br><img src="/images/java-collection-frame/ConcurrentHashMap.png" alt="ConcurrentHashMap结构图"></li><li>IdentityHashMap基于数组的、区别于HashMap的是比较key值是比较引用相等(形如<code>object1 == object2</code>)的，HashMap是equals()判断是否相等的，能接受key为null</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java GC</title>
      <link href="/2018/06/15/java-gc/"/>
      <url>/2018/06/15/java-gc/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Java虚拟机内存区域"><a href="#一-Java虚拟机内存区域" class="headerlink" title="一. Java虚拟机内存区域"></a>一. Java虚拟机内存区域</h2><h3 id="1-运行时数据区"><a href="#1-运行时数据区" class="headerlink" title="1. 运行时数据区"></a>1. 运行时数据区</h3><p>   <img src="/images/java/java_runtime.png" alt="java运行时数据区"></p><h3 id="2-程序计数器-Program-Counter-Register"><a href="#2-程序计数器-Program-Counter-Register" class="headerlink" title="2. 程序计数器(Program Counter Register)"></a>2. 程序计数器(Program Counter Register)</h3><ul><li>1、程序计数器是线程内(每个线程都有唯一的、封闭的)一小块内存区域</li><li>2、计数器指定的是当前虚拟机执行指令的地址</li><li>3、当虚拟机执行的是Native方法时,计数器值为空(Undefined),此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code>   情况的区域.</li></ul><h3 id="3-Java虚拟机栈-Java-Virtual-Machine-Stacks"><a href="#3-Java虚拟机栈-Java-Virtual-Machine-Stacks" class="headerlink" title="3. Java虚拟机栈(Java Virtual Machine Stacks)"></a>3. Java虚拟机栈(Java Virtual Machine Stacks)</h3><ul><li>1、虚拟机栈是线程内部的、封闭的</li><li>2、虚拟机栈描述的是java方法执行的内存模型</li><li>3、每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息</li><li>4、java方法的执行就是入栈与出栈的过程</li><li>5、如果虚拟机栈深度超出了虚拟机允许深度将会抛出<code>StackOverflowError</code>异常,现代虚拟机大多数支持动态扩展(也允许固定长度),当虚拟机申   请扩展时申请不到足够的内存时,将会抛出<code>OutOfMemoryError</code>异常</li></ul><h3 id="4-本地方法栈-Native-Method-Stack"><a href="#4-本地方法栈-Native-Method-Stack" class="headerlink" title="4. 本地方法栈(Native Method Stack)"></a>4. 本地方法栈(Native Method Stack)</h3><ul><li>1、为虚拟机调用本地Native方法提供服务</li><li>2、也有虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一</li><li>3、也会抛出<code>StackOverflowError</code>异常和<code>OutOfMemoryError</code>异常</li></ul><h3 id="5-Java堆-Java-Heap-GC堆"><a href="#5-Java堆-Java-Heap-GC堆" class="headerlink" title="5. Java堆(Java Heap) GC堆"></a>5. Java堆(Java Heap) GC堆</h3><ul><li>1、线程共享的最大一块内存区域</li><li>2、此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存,虚拟机规范所有的对象实例与数据都在堆上分配</li><li>3、随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、 标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐   变得不是那么“绝对”了</li></ul><h3 id="6-方法区-Method-Area"><a href="#6-方法区-Method-Area" class="headerlink" title="6. 方法区(Method Area)"></a>6. 方法区(Method Area)</h3><ul><li>1、存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据</li><li>2、这区域的内存回收目标主要是针对常量池的回收和对类型的卸载</li></ul><h3 id="7-运行时常量池-Runtime-Constant-Pool"><a href="#7-运行时常量池-Runtime-Constant-Pool" class="headerlink" title="7. 运行时常量池(Runtime Constant Pool)"></a>7. 运行时常量池(Runtime Constant Pool)</h3><ul><li>1、Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成   的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放</li><li>2、<code>String.intern()</code>也会放入运行时常量池中</li></ul><h3 id="8-直接内存-Direct-Memory"><a href="#8-直接内存-Direct-Memory" class="headerlink" title="8. 直接内存(Direct Memory)"></a>8. 直接内存(Direct Memory)</h3><ul><li>1、NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据</li></ul><h2 id="二-Java对象"><a href="#二-Java对象" class="headerlink" title="二. Java对象"></a>二. Java对象</h2><h3 id="1-对象的创建"><a href="#1-对象的创建" class="headerlink" title="1. 对象的创建"></a>1. 对象的创建</h3><ul><li>1、指针碰撞(Bump the Pointer)</li><li>2、空闲列表(Free List)</li></ul><h3 id="2-对象再内存中的布局"><a href="#2-对象再内存中的布局" class="headerlink" title="2. 对象再内存中的布局"></a>2. 对象再内存中的布局</h3><ul><li>1、分为3块区域:对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)</li><li>2、对象头包含:轻量级锁定、 重量级锁定、 GC标记、 可偏向</li></ul><h3 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3. 对象的访问定位"></a>3. 对象的访问定位</h3><ul><li>1、句柄访问<br> <img src="/images/java/object_handle_access.png" alt="句柄访问对象"></li><li>2、直接指针访问<br> <img src="/images/java/direct_pointer_access.png" alt="直接指针访问"></li></ul><h2 id="三-垃圾回收与内存分配"><a href="#三-垃圾回收与内存分配" class="headerlink" title="三. 垃圾回收与内存分配"></a>三. 垃圾回收与内存分配</h2><h3 id="1-引用计数法-虚拟机未使用"><a href="#1-引用计数法-虚拟机未使用" class="headerlink" title="1. 引用计数法(虚拟机未使用)"></a>1. 引用计数法(虚拟机未使用)</h3><ul><li>1、互相引用将无法得到正常回收</li></ul><h3 id="2-可达性分析算法-Reachability-Analysis"><a href="#2-可达性分析算法-Reachability-Analysis" class="headerlink" title="2. 可达性分析算法(Reachability Analysis)"></a>2. 可达性分析算法(Reachability Analysis)</h3><ul><li>1、通过GC Root节点向下搜索,搜索走过的路径称为引用链(Reference Chain),当一个对象没有一个引用链经过,则表示该对象是不可用的,可以回收</li><li>2、可作为GC Root对象的有:   <ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象 </li><li>方法区中类静态属性引用的对象  </li><li>方法区中常量引用的对象  </li><li>本地方法栈中JNI(即一般说的Native方法)引用的对象</li></ul></li></ul><h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h3><ul><li>1、<strong>强引用(Strong Reference)</strong>: new 关键字</li><li>2、<strong>软引用(Soft Reference)</strong>:当要发生内存溢出时会将软引用对象加入回收队列中</li><li>3、<strong>弱引用(Weak Reference)</strong>:只能活到下次GC前</li><li>4、<strong>虚引用(Phantom Reference)</strong>:幽灵引用或者幻影引用</li></ul><h3 id="4-回收方法区"><a href="#4-回收方法区" class="headerlink" title="4. 回收方法区"></a>4. 回收方法区</h3><ul><li>1、主要回收永久代的废弃的常量和无用的类   </li><li>2、无用的类判定条件:  <ul><li>该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例.</li><li>加载该类的ClassLoader已经被回收.</li><li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用,无法在任何地方通过反射访问该类的方法.</li></ul></li></ul><h2 id="四-垃圾回收算法"><a href="#四-垃圾回收算法" class="headerlink" title="四. 垃圾回收算法"></a>四. 垃圾回收算法</h2><h3 id="1-标记-清除算法-Mark-Sweep"><a href="#1-标记-清除算法-Mark-Sweep" class="headerlink" title="1. 标记-清除算法(Mark-Sweep)"></a>1. 标记-清除算法(Mark-Sweep)</h3><ul><li>1、标记与清除2个过程</li><li>2、标记与清除效率都不高,还可能产生大量空间碎片导致大对象找不到连续可用的空间</li></ul><h3 id="2-复制算法-Copying"><a href="#2-复制算法-Copying" class="headerlink" title="2. 复制算法(Copying)"></a>2. 复制算法(Copying)</h3><ul><li>1、将堆内存分为大小相等的2块,每次只是用其中一块,当一块内存用完时将还活着的对象移动到另一块,然后清理该块内存</li><li>2、消除了内存碎片化,代价是牺牲了一半可用堆内存</li><li>3、商用虚拟机都采用这种,但并不是按1:1来划分空间而是将内存分为一块较大的Eden空间和两块较小的Survivor空间,每次使用Eden和其中   一块Survivor.当回收时,将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上,最后清理掉Eden和刚才用过的   Survivor空间. HotSpot虚拟机默认Eden和Survivor的大小比例是8:1,也就是每次新生代中可用内存空间为整个新生代容量的   90%(80%+10%),只有10%的内存会被“浪费”. 当然,98%的对象可回收只是一般场景下的数据,我们没有办法保证每次回收都只有不多于   10%的对象存活,当Survivor空间不够用时,需要依赖其他内存(这里指老年代)进行分配担保(Handle Promotion).</li><li>4、当存活率高时将会出现大量的内存复制操作还有可能导致进行分配担保</li></ul><h3 id="3-标记-整理算法-Mark-Compact"><a href="#3-标记-整理算法-Mark-Compact" class="headerlink" title="3. 标记-整理算法(Mark-Compact)"></a>3. 标记-整理算法(Mark-Compact)</h3><ul><li>1、老年代内存,标记可回收对象之后,将存活的对象移向一端,然后清理掉端边界以外的内存</li></ul><h3 id="4-分代收集算法-Generational-Collection"><a href="#4-分代收集算法-Generational-Collection" class="headerlink" title="4. 分代收集算法(Generational Collection)"></a>4. 分代收集算法(Generational Collection)</h3><ul><li>1、将堆内存分为老年代和新生代</li><li>2、老年代对象存活率高,再采用标记-清理或标记-整理算法进行GC</li><li>3、新生代存活率低,采用复制算法将少量的存活对象进行复制操作</li></ul><h2 id="五-HotSpot算法实现"><a href="#五-HotSpot算法实现" class="headerlink" title="五. HotSpot算法实现"></a>五. HotSpot算法实现</h2><h3 id="1-枚举根节点"><a href="#1-枚举根节点" class="headerlink" title="1. 枚举根节点"></a>1. 枚举根节点</h3><p>   - 1、虚拟机内OopMap存有对象引用信息，可以得到GC Root根节点</p><h3 id="2-安全点"><a href="#2-安全点" class="headerlink" title="2. 安全点"></a>2. 安全点</h3><ul><li>1、虚拟机会在如方法调用、 循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint</li><li>2、中断方式  <ul><li>抢先式中断(基本弃用): 给出中断指令，有线程发现未到达安全点则继续执行至下一个安全点</li><li>主动式中断: 给定一个中断标志，每个线程都会去轮询该标志，为真时中断</li></ul></li></ul><h3 id="3-安全区域"><a href="#3-安全区域" class="headerlink" title="3. 安全区域"></a>3. 安全区域</h3><ul><li>1、安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的</li><li>2、在线程执行到安全区域时首先会标记自己进入安全区域，出安全区域前必须等到枚举根节点或整个GC完成，没有则都等到可以出安全区域信号为止</li></ul><h2 id="六-垃圾回收器"><a href="#六-垃圾回收器" class="headerlink" title="六. 垃圾回收器"></a>六. 垃圾回收器</h2><p>   <img src="/images/java/hotspot_gc.png" alt="HotSpot虚拟机垃圾回收器"></p><h3 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1. Serial收集器"></a>1. Serial收集器</h3><ul><li>1、JDK1.3.1之前是虚拟机新生代收集的唯一选择</li><li>2、单线程、Stop The World(STW)、复制算法</li><li>3、Client模式下新生代默认的垃圾收集器</li></ul><h3 id="2-PerNew收集器"><a href="#2-PerNew收集器" class="headerlink" title="2. PerNew收集器"></a>2. PerNew收集器</h3><ul><li>1、Serial收集器的多线程版,其他一样</li><li>2、是许多虚拟机Server模式下新生代的首选收集器</li><li>3、ParNew收集器也是使用<code>-XX:+UseConcMarkSweepGC</code>选项后的默认新生代收集器,也可以使用<code>-XX:+UseParNewGC</code>选项来强制指定它</li><li>4、单核下效果不一定比Serial效果好,多核更适合,<code>-XX:ParallelGCThreads</code>参数来限制垃圾收集的线程数</li></ul><h3 id="3-Parallel-Scavenge收集器"><a href="#3-Parallel-Scavenge收集器" class="headerlink" title="3. Parallel Scavenge收集器"></a>3. Parallel Scavenge收集器</h3><ul><li>1、新生代收集器,采用复制算法,并行的多线程收集器,吞吐量优先   </li><li>2、追求可控的吞吐量, 吞吐量&#x3D;运行用户代码时间&#x2F;(运行用户代码时间+垃圾收集时间)</li><li>3、控制最大垃圾收集停顿时间的<code>-XX:MaxGCPauseMillis</code>参数以及直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>参数.</li></ul><h3 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4. Serial Old收集器"></a>4. Serial Old收集器</h3><ul><li>1、Serial老年代版本、单线程、标记-整理算法</li><li>2、给Client模式下虚拟机用</li></ul><h3 id="5-Parallel-Old收集器"><a href="#5-Parallel-Old收集器" class="headerlink" title="5. Parallel Old收集器"></a>5. Parallel Old收集器</h3><ul><li>1、Parallel Scavenge收集器的老年代版本,使用多线程和“标记-整理”算法,JDK1.6开始提供</li></ul><h3 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6. CMS收集器"></a>6. CMS收集器</h3><ul><li>1、CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器. </li><li>2、标记-清除算法实现  <ul><li>初始标记(CMS initial mark)，有短时的STW</li><li>并发标记(CMS concurrent mark)</li><li>重新标记(CMS remark)，有短时的STW</li><li>并发清除(CMS concurrent sweep)</li></ul></li><li>3、并发收集、 低停顿,Sun公司的一些官方文档中也称之为并发低停顿收集器</li><li>4、<code>-XX：+UseCMSCompactAtFullCollection</code>默认开启，表示CMS进行Full GC的时候开启内存碎片的合并整理，该过程无法并发停顿时间变长</li><li>5、<code>-XX：CMSFullGCsBeforeCompaction</code>表示执行多少次不压缩的Full GC后跟着来一次压缩的Full GC，默认是0，每次都压缩</li></ul><h3 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7. G1收集器"></a>7. G1收集器</h3><ul><li>1、G1(Garbage-First)收集器是当今收集器技术发展的最前沿成果之一,面向服务端应用 </li><li>2、特点: <ul><li>并发与并行:充分利用cpu与多核等硬件优势</li><li>分代收集:</li><li>空间整理:标记-整理算法</li><li>可预测的停顿:将堆内存分为多个区域(Region),还保留有老年代与新生代</li></ul></li><li>3、不计算维护Remembered Set的操作,G1收集器的运作大致可划分为以下几个步骤:  <ul><li>初始标记(Initial Marking)</li><li>并发标记(Concurrent Marking)</li><li>最终标记(Final Marking)</li><li>筛选回收(Live Data Counting and Evacuation)</li></ul></li></ul><h3 id="8-垃圾收集器参数"><a href="#8-垃圾收集器参数" class="headerlink" title="8. 垃圾收集器参数"></a>8. 垃圾收集器参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">UseSerialGC</td><td align="left">Client模式下默认,使用Serial+Serial Old组合</td></tr><tr><td align="left">UseParNewGC</td><td align="left">ParNew+Serial Old组合</td></tr><tr><td align="left">UseConMarkSweepGC</td><td align="left">ParNew+CMS+Serial Old组合,Serial Old作为CMS失败后备用</td></tr><tr><td align="left">UseParallelGC</td><td align="left">Server模式默认,Parallel Scavenge+Serial Old(PS Mark Sweep)组合</td></tr><tr><td align="left">UseParallelOldGC</td><td align="left">Parallel Scavenge+Parallel Old组合</td></tr><tr><td align="left">UseG1GC</td><td align="left">使用G1</td></tr></tbody></table><h2 id="七-内存分配与回收策略"><a href="#七-内存分配与回收策略" class="headerlink" title="七. 内存分配与回收策略"></a>七. 内存分配与回收策略</h2><h3 id="1-对象优先在Eden分配"><a href="#1-对象优先在Eden分配" class="headerlink" title="1. 对象优先在Eden分配"></a>1. 对象优先在Eden分配</h3><ul><li>对象优先在Eden新生代分配,内存不足将发生一次Minor GC</li></ul><h3 id="2-大对象直接进入老年代"><a href="#2-大对象直接进入老年代" class="headerlink" title="2. 大对象直接进入老年代"></a>2. 大对象直接进入老年代</h3><ul><li><code>-XX:PretenureSizeThreshold</code>参数,令大于这个设置值的对象直接在老年代分配,避免大量内存复制</li></ul><h3 id="3-长期存活的对象将进入老年代"><a href="#3-长期存活的对象将进入老年代" class="headerlink" title="3. 长期存活的对象将进入老年代"></a>3. 长期存活的对象将进入老年代</h3><ul><li>对象晋升老年代的年龄阈值,可以通过参数<code>-XX:MaxTenuringThreshold</code>设置,默认15,每次Minor GC对象没死+1</li></ul><h3 id="4-动态对象年龄判定"><a href="#4-动态对象年龄判定" class="headerlink" title="4. 动态对象年龄判定"></a>4. 动态对象年龄判定</h3><ul><li>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半,年龄大于或等于该年龄的对象就可以直接进入老年代,无须等到MaxTenuringThreshold中要求的年龄</li></ul><h3 id="5-空间分配担保"><a href="#5-空间分配担保" class="headerlink" title="5. 空间分配担保"></a>5. 空间分配担保</h3><ul><li>Minor GC前先判断老年代可用空间是否大于新生代对象总空间,如果大于则确保安全,如果小于则查看HandlePromotionFailure设置的值是否允许担保失败,若允许则会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小,如果大于,将尝试着进行一次Minor GC,尽管这次Minor GC是有风险的;如果小于,或者HandlePromotionFailure设置不允许冒险,那这时也要改为进行一次Full GC.</li></ul><h2 id="八-Minor-GC、Major-GC与Full-GC"><a href="#八-Minor-GC、Major-GC与Full-GC" class="headerlink" title="八. Minor GC、Major GC与Full GC"></a>八. Minor GC、Major GC与Full GC</h2><ul><li>Minor GC表示新生代GC、Major GC是指老年代GC、Full GC为全部堆内存GC。</li><li>往往他们之间相互影响，相互触发</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Concurrent</title>
      <link href="/2018/06/15/java-concurrent/"/>
      <url>/2018/06/15/java-concurrent/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JAVA与线程"><a href="#1-JAVA与线程" class="headerlink" title="1. JAVA与线程"></a>1. JAVA与线程</h2><h3 id="1-1-线程的实现"><a href="#1-1-线程的实现" class="headerlink" title="1.1. 线程的实现"></a>1.1. 线程的实现</h3><ol><li>实现方式:使用内核线程实现、 使用用户线程实现和使用用户线程加轻量级进程混合实现.</li><li>JDK1.2之前是基于用户线程实现的，JDK1.2及以后是基于操作系统原生线程模型实现的.</li></ol><h3 id="1-2-Java线程调度"><a href="#1-2-Java线程调度" class="headerlink" title="1.2. Java线程调度"></a>1.2. Java线程调度</h3><ol><li>线程调度是指系统为线程分配处理器使用权的过程,主要调度方式有两种,分别是协同式线程调度(Cooperative Threads-Scheduling)和抢占式线程调度(Preemptive ThreadsScheduling)</li><li>协同式线程调度:线程的执行时间由线程本身来控制,线程把自己的工作执行完了之后,要主动通知系统切换到另外一个线程上;优点是实现简单,缺点是线程执行时间不可控制,容易线程阻塞</li><li>每个线程将由系统来分配执行时间,线程的切换不由线程本身来决定(在Java中,Thread.yield()可以让出执行时间,但是要获取执行时间的话,线程本身是没有什么办法的);优点是线程的执行时间是系统可控的,也不会有一个线程导致整个进程阻塞的问题.</li><li>JAVA线程有10个优先级(Thread.MIN_PRIORITY至Thread.MAX_PRIORITY)</li></ol><h3 id="1-3-线程转换状态"><a href="#1-3-线程转换状态" class="headerlink" title="1.3. 线程转换状态"></a>1.3. 线程转换状态</h3><ol><li>JAVA线程定义了6个状态:  <ul><li>新建(New):创建后尚未启动的线程处于这种状态.</li><li>运行(Runable):Runable包括了操作系统线程状态中的Running和Ready,也就是处于此状态的线程有可能正在执行,也有可能正在等待着CPU为它分配执行时间.</li><li>无限期等待(Waiting):处于这种状态的线程不会被分配CPU执行时间,它们要等待被其他线程显式地唤醒. 以下方法会让线程陷入无限期的等待状态:<br>● 没有设置Timeout参数的Object.wait()方法.<br>● 没有设置Timeout参数的Thread.join()方法.<br>● LockSupport.park()方法.  </li><li>限期等待(Timed Waiting):处于这种状态的线程也不会被分配CPU执行时间,不过无须等待被其他线程显式地唤醒,在一定时间之后它们会由系统自动唤醒. 以下方法会让线程进入限期等待状态:<br>● Thread.sleep()方法.<br>● 设置了Timeout参数的Object.wait()方法.<br>● 设置了Timeout参数的Thread.join()方法.<br>● LockSupport.parkNanos()方法.<br>● LockSupport.parkUntil()方法 </li><li>阻塞(Blocked):该状态程序在等待获取一个排他锁，程序在同步时会在该状态 </li><li>结束(Terminated):已终止线程的线程状态,线程已经结束执行.</li></ul></li><li>线程状态转换关系图<br><img src="/images/java/thread_status_transfer.png" alt="线程状态转换关系"></li></ol><h2 id="2-线程安全与锁优化"><a href="#2-线程安全与锁优化" class="headerlink" title="2. 线程安全与锁优化"></a>2. 线程安全与锁优化</h2><h3 id="2-1-JAVA中的线程安全"><a href="#2-1-JAVA中的线程安全" class="headerlink" title="2.1. JAVA中的线程安全"></a>2.1. JAVA中的线程安全</h3><ol><li>共享数据分类<ul><li>不可变(Immutable):不可变对象一定是线程安全的,典型的final</li><li>绝对线程安全:</li><li>相对线程安全: java大部分的线程安全都是相对线程安全的</li><li>线程兼容:</li><li>线程对立:</li></ul></li></ol><h3 id="2-2-synchronized的优化"><a href="#2-2-synchronized的优化" class="headerlink" title="2.2. synchronized的优化"></a>2.2. synchronized的优化</h3><ol><li>synchronized自JDK1.6后引入偏向锁和轻量级锁后大大提升了并发的性能</li><li>synchronized锁升级<code>偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</code> 所以在锁高竞争下Lock性能更高</li></ol><h2 id="3-锁介绍"><a href="#3-锁介绍" class="headerlink" title="3. 锁介绍"></a>3. 锁介绍</h2><h3 id="3-1-自旋锁"><a href="#3-1-自旋锁" class="headerlink" title="3.1. 自旋锁"></a>3.1. 自旋锁</h3><ol><li>自旋锁可以使线程在没有取得锁的时候，不被挂起，而转去执行一个空循环，（即所谓的自旋，就是自己执行空循环），若在若干个空循环后，线程如果可以获得锁，则继续执行。若线程依然不能获得锁，才会被挂起。使用自旋锁后，线程被挂起的几率相对减少，线程执行的连贯性相对加强。因此，对于那些锁竞争不是很激烈，锁占用时间很短的并发线程，具有一定的积极意义，但对于锁竞争激烈，单线程锁占用很长时间的并发程序，自旋锁在自旋等待后，往往毅然无法获得对应的锁，不仅仅白白浪费了CPU时间，最终还是免不了被挂起的操作 ，反而浪费了系统的资源。在JDK1.6中，Java虚拟机提供<code>-XX:+UseSpinning</code>参数来开启自旋锁，使用<code>-XX:PreBlockSpin</code>参数来设置自旋锁等待的次数。在JDK1.7开始，自旋锁的参数被取消，虚拟机不再支持由用户配置自旋锁，自旋锁总是会执行，自旋锁次数也由虚拟机自动调整。  </li><li>问题：  <ul><li>可能白占用CPU时间</li><li>死锁问题，自己占用锁，还在等待锁释放</li></ul></li></ol><h3 id="3-2-阻塞锁"><a href="#3-2-阻塞锁" class="headerlink" title="3.2. 阻塞锁"></a>3.2. 阻塞锁</h3><ol><li>让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进入运行状态。JAVA中，能够进入\退出、阻塞状态或包含阻塞锁的方法有 ，<code>synchronized</code> 关键字（其中的重量锁），<code>ReentrantLock</code>，<code>Object.wait()\notify() </code></li></ol><h3 id="3-3-可重入锁"><a href="#3-3-可重入锁" class="headerlink" title="3.3. 可重入锁"></a>3.3. 可重入锁</h3><ol><li>可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。<br>在JAVA环境下 <code>ReentrantLock</code> 和<code>synchronized</code> 都是 可重入锁</li></ol><h3 id="3-4-乐观锁和悲观锁"><a href="#3-4-乐观锁和悲观锁" class="headerlink" title="3.4. 乐观锁和悲观锁"></a>3.4. 乐观锁和悲观锁</h3><ol><li>悲观锁: 每次拿数据都上锁，如行锁、表锁、读锁、写锁</li><li>乐观锁: 每次拿数据都不上锁，只是在修改前验证下数据在此期间有无更新，如版本号控制</li></ol><h3 id="3-5-轮询锁和定时锁"><a href="#3-5-轮询锁和定时锁" class="headerlink" title="3.5. 轮询锁和定时锁"></a>3.5. 轮询锁和定时锁</h3><ol><li>由tryLock实现，与无条件获取锁模式相比，它们具有更完善的错误恢复机制。可避免死锁的发生：<br> <code>boolean tryLock()</code>:仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回值true。如果锁不可用，则此方法将立即返回 值false。<code>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</code>:如果锁在给定的等待时间内空闲，并且当前 线程未被中断，则获取锁。</li></ol><h3 id="3-6-显示锁和内置锁"><a href="#3-6-显示锁和内置锁" class="headerlink" title="3.6. 显示锁和内置锁"></a>3.6. 显示锁和内置锁</h3><ol><li>显示锁用<code>Lock</code>来定义、内置锁用<code>synchronized</code>。</li></ol><h3 id="3-7-对象锁和类锁"><a href="#3-7-对象锁和类锁" class="headerlink" title="3.7. 对象锁和类锁"></a>3.7. 对象锁和类锁</h3><ol><li>对象锁是用于实例对象(可有多个实例对象)方法上的</li><li>类锁是作用于对象的静态方法和Class(一个类只有一个Class对象)对象上的</li></ol><h3 id="3-8-互斥锁"><a href="#3-8-互斥锁" class="headerlink" title="3.8. 互斥锁"></a>3.8. 互斥锁</h3><ol><li>互斥锁, 指的是一次最多只能有一个线程持有的锁。如Java的Lock</li></ol><h3 id="3-9-锁粗化"><a href="#3-9-锁粗化" class="headerlink" title="3.9 锁粗化"></a>3.9 锁粗化</h3><ol><li>将多个连续的锁操作合并成一个整体的锁</li></ol><h3 id="3-10-锁消除"><a href="#3-10-锁消除" class="headerlink" title="3.10. 锁消除"></a>3.10. 锁消除</h3><ol><li>通过逃逸分析，能证明堆上数据不会逃逸出当前线程，则认为是线程安全的，不必要加锁操作</li></ol><h2 id="4-java线程池"><a href="#4-java线程池" class="headerlink" title="4. java线程池"></a>4. java线程池</h2><h3 id="4-1-线程池实现类"><a href="#4-1-线程池实现类" class="headerlink" title="4.1. 线程池实现类"></a>4.1. 线程池实现类</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(C)ThreadPoolExecutor --&gt;  (AC)AbstractExecutorService --&gt; (I)ExecutorService --&gt; (I)Executor</span><br></pre></td></tr></table></figure><h3 id="4-2-ThreadPoolExecutor构造参数说明"><a href="#4-2-ThreadPoolExecutor构造参数说明" class="headerlink" title="4.2. ThreadPoolExecutor构造参数说明"></a>4.2. ThreadPoolExecutor构造参数说明</h3>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// corePoolSize 核心线程数，当任务多于核心线程数时会进入缓冲阻塞队列workQueue</span></span><br><span class="line"><span class="comment">// maximunPoolSize 线程池最大线程数</span></span><br><span class="line"><span class="comment">// keepAliveTime 多于核心线程数的空闲线程最长存活时间量级与unit参数配合使用</span></span><br><span class="line"><span class="comment">// unit 线程等待时间的单位级</span></span><br><span class="line"><span class="comment">// workQueue 任务缓冲队列</span></span><br><span class="line"><span class="comment">// threadFactory 线程工厂，用于创建线程</span></span><br><span class="line"><span class="comment">// handler 表示拒接处理任务的策略有一下4种：</span></span><br><span class="line"><span class="comment">//  - ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常</span></span><br><span class="line"><span class="comment">//  - ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常</span></span><br><span class="line"><span class="comment">//  - ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line"><span class="comment">//  - ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,<span class="type">int</span> maximumPoolSize,<span class="type">long</span> keepAliveTime,TimeUnit unit,</span></span><br><span class="line"><span class="params">        BlockingQueue&lt;Runnable&gt; workQueue)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,<span class="type">int</span> maximumPoolSize,<span class="type">long</span> keepAliveTime,TimeUnit unit,</span></span><br><span class="line"><span class="params">        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,<span class="type">int</span> maximumPoolSize,<span class="type">long</span> keepAliveTime,TimeUnit unit,</span></span><br><span class="line"><span class="params">        BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,<span class="type">int</span> maximumPoolSize,<span class="type">long</span> keepAliveTime,TimeUnit unit,</span></span><br><span class="line"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span>;</span><br></pre></td></tr></table></figure><h3 id="4-3-实现原理"><a href="#4-3-实现原理" class="headerlink" title="4.3. 实现原理"></a>4.3. 实现原理</h3><ol><li><p>线程池状态：<br> - <strong>RUNNING</strong>: 线程池初始化时就是RUNNING状态，表示线程池能够接受任务并处理，并且线程池中线程数默认为0(可以通过调用方法 <code>prestartAllCoreThreads() #创建核心线程</code>或者<code>prestartCoreThread() #创建一个核心线程</code>来初始化线程数) - <strong>SHUTDOWN</strong>: 线程处于SHUTDOWN状态时,不接收新任务,但能处理已添加的任务;状态切换调用<code>shutdown()</code>时从<code>RUNNING-&gt; SHUTDOWN</code> - <strong>STOP</strong>: 线程处于STOP状态时，不接收新任务，不处理已添加任务，并会终止正在执行的任务;状态切换调用<code>shutdownNow()</code>时从 <code>RUNNING or SHUTDOWN -&gt; STOP</code> - <strong>TIDYING</strong>: 当所有任务已终止，任务数量为0时，线程池会进入TIDYING状态，并且会执行钩子函数<code>terminated()</code>，用户可重载该方法 实现自己的业务逻辑;状态切换是所有任务终止就进入TIDYING状态 - <strong>TERMINATED</strong>: 线程池彻底终止状态;状态切换是TIDYING的钩子函数执行完毕后进入TERMINATED状态</p></li><li><p>任务执行过程 - 当任务提交给线程池时，线程首先判断当前池内线程数是否大于corePoolSize(核心线程数)，如果小于这值就会创建一个新的线程来执行该任务； - 当线程数大于核心线程数时，则会尝试将任务放入缓冲队列(workQueue)内，若添加成功，则该任务会被等待的空闲线程取去执行， 若添加失败，则会尝试创建新的线程去执行该任务； - 如果线程池内线程数达到了maximumPoolSize(最大线程数)时，则会采取handler(拒绝策略)处理 - 如果线程池内的线程数大于corePoolSize时，当线程空闲超时keepAliveTime时，线程将被终止，直到线程数等于corePoolSize； 如果允许核心线程数也有超时时间，则当核心线程数内的线程超时时也会被终止，直至线程数为0</p></li><li><p>线程池中的线程初始化 - <code>prestartCoreThread()</code>：初始化一个核心线程 - <code>prestartAllCoreThreads()</code>：初始化所有核心线程 - 初始化后线程会执行workQueue的<code>take()</code>方法，该方法是阻塞的，直到有任务提交</p></li><li><p>任务缓存队列及排队策略 - <strong>ArrayBlockingQueue</strong>：基于数组的FIFO阻塞队列,必须有最大容量的参数 - <strong>LinkedBlockingQueue</strong>: 基于链表的FIFO阻塞队列,容量动态扩展 - <strong>SynchronousQueue</strong>: 该队列不保存提交的任务，而是直接新建队列来执行任务</p></li><li><p>任务拒绝策略</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常</span><br><span class="line">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常</span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span><br></pre></td></tr></table></figure><ol start="6"><li><p>线程池的关闭 - <code>shutdown()</code>：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务  - <code>shutdownNow()</code>: 立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务</p></li><li><p>线程池容量动态调整 - <code>setCorePoolSize()</code>：设置核心池大小 - <code>setMaximumPoolSize()</code>：设置线程池最大能创建的线程数目大小</p></li></ol><h3 id="4-4-Executors"><a href="#4-4-Executors" class="headerlink" title="4.4. Executors"></a>4.4. Executors</h3><ul><li><strong>newFixedThreadPool</strong>: 定容量的线程池，核心线程数与最大线程数相等</li><li><strong>newSingleThreadExecutor</strong>: 单线程线程池，线程池内核心线程数与最大线程数为1</li><li><strong>newCachedThreadPool</strong>: 无线大小线程池，核心线程数为0，最大线程数为<code>Integer.MAX_VALUE</code>, 缓冲队列为<code>SynchronousQueue</code></li><li><strong>newScheduledThreadPool</strong>：创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为<code>Integer.MAX_VALUE</code>,内部是一个DelayedWorkQueue实现</li><li><strong>newSingleThreadScheduledExecutor</strong>: 创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为<code>Integer.MAX_VALUE</code>,内部是一个DelayedWorkQueue实现</li></ul><h2 id="5-AbstractQueuedSynchronizer"><a href="#5-AbstractQueuedSynchronizer" class="headerlink" title="5. AbstractQueuedSynchronizer"></a>5. AbstractQueuedSynchronizer</h2><p>   内部类：</p><ul><li>ConditionObject：</li><li>Node：存放线程信息队列</li></ul><h3 id="5-1-AQS之ReentrantLock独占锁源码分析"><a href="#5-1-AQS之ReentrantLock独占锁源码分析" class="headerlink" title="5.1. AQS之ReentrantLock独占锁源码分析"></a>5.1. AQS之ReentrantLock独占锁源码分析</h3><ul><li><a href="http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer">AbstractQueuedSynchronizer独占锁</a></li><li><code>ReentrantLock.lock()</code>保证在<code>ReentrantLock.unlock()</code>之间的代码只有一个线程在执行；ReentrantLock为可重入锁，它有一个与锁相关的获取计数器，如果拥有锁的某个线程再次得到锁，那么获取计数器就加1，然后锁需要被释放两次才能获得真正释放。</li><li>内部类<code>Syn</code>实现了<code>AbstractQueuedSynchronizer</code>接口</li><li>构造方法有公平锁和非公平锁，公平锁与非公平锁的区别在于公平锁在尝试获取锁时会放入等待队列的后面，获取锁的顺序是按先后顺序执行的，而非公平锁在尝试获取锁时首先会去尝试获取锁，若获取失败在进入等待队列按顺序执行。</li></ul><h3 id="5-2-AQS之CountDownLatch共享锁源码分析"><a href="#5-2-AQS之CountDownLatch共享锁源码分析" class="headerlink" title="5.2. AQS之CountDownLatch共享锁源码分析"></a>5.2. AQS之CountDownLatch共享锁源码分析</h3><ul><li><a href="http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer">AbstractQueuedSynchronizer共享锁</a></li><li><code>CountDownLatch.countDown()</code>实现锁计数-1，直到减至0是，唤醒<code>CountDownLatch.await()</code>等待线程</li></ul><h3 id="5-3-公平锁和非公平锁"><a href="#5-3-公平锁和非公平锁" class="headerlink" title="5.3. 公平锁和非公平锁"></a>5.3. 公平锁和非公平锁</h3><p>   公平锁是严格按照FIFO队列获得锁，但带来了大量的线程切换的消耗，非公平锁极大的降低了线程切换带来的消耗，虽然可能造成线程饥饿的情况，但也提高了吞吐量。</p><h2 id="6-synchronized与Lock比较"><a href="#6-synchronized与Lock比较" class="headerlink" title="6. synchronized与Lock比较"></a>6. synchronized与Lock比较</h2><ol><li><code>synchronized</code>是JVM层面实现的**<code>重量级锁</code>**，可通过监控工具监控<code>synchronized</code>的锁定，而且代码出现异常时会自动释放锁</li><li><code>Lock</code>是纯JAVA实现的，为多种实现留下空间，可以实现不同的调度算法、性能特性或者锁定语义，<code>Lock</code>必须自己手动的释放锁形如<code>finally{lock.unlock();}</code></li><li>当锁竞争激烈时用<code>Lock</code>,锁竞争较弱时用<code>synchronized</code></li></ol><h2 id="7-阻塞队列BlockingQueue"><a href="#7-阻塞队列BlockingQueue" class="headerlink" title="7. 阻塞队列BlockingQueue"></a>7. 阻塞队列BlockingQueue</h2><ol><li>阻塞队列是一个FIFO队列</li><li>主要方法</li></ol><table><thead><tr><th align="center">Ops</th><th align="center">Throws Exception</th><th align="center">Special Value</th><th align="center">Blocks Times Out</th></tr></thead><tbody><tr><td align="center">Insert</td><td align="center">add(o)</td><td align="center">offer(o)</td><td align="center">put(o) &amp; offer(o, timeout, timeUnit)</td></tr><tr><td align="center">Remove</td><td align="center">remove(o)</td><td align="center">poll()</td><td align="center">take()&amp; poll(timeout, timeUnit)</td></tr><tr><td align="center">Examine</td><td align="center">element()</td><td align="center">peek()</td><td align="center">-</td></tr></tbody></table><ol start="3"><li><p>主要实现<br> - <strong>ArrayBlockingQueue</strong>：基于数组的有界阻塞队列，必须指定长度 - <strong>LinkedBlockingQueue</strong>: 基于链表的有界阻塞队列，长度可指定也可动态扩张，默认长度为<code>Integer.MAX_VALUE</code> - <strong>SynchronousQueue</strong>: 无缓冲区的阻塞队列，<code>put()</code>要阻塞等待<code>take()</code> - <strong>PriorityBlockingQueue</strong>: 优先级阻塞队列，队列元素必须实现<code>Comparator</code>接口，基于数组，自动扩展长度 - <strong>DelayQueue</strong>：一个使用优先级队列实现的无界阻塞队列 - <strong>LinkedTransferQueue</strong>：一个由链表结构组成的无界阻塞队列 - <strong>LinkedBlockingDeque</strong>：一个由链表结构组成的双向阻塞队列</p></li><li><p>注意<br>   如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且使用offer方法时，该方法永远返回true。</p></li></ol><h2 id="8-ConcurrentLinkedQueue"><a href="#8-ConcurrentLinkedQueue" class="headerlink" title="8. ConcurrentLinkedQueue"></a>8. ConcurrentLinkedQueue</h2><p>   非阻塞线程安全的FIFO队列，基于单向链表实现，循环CAS操作实现，由于是根据Node.NEXT是否为NULL来判断是否为TAIL节点，因此队列的元素值不可为NULL。   </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Memory Model</title>
      <link href="/2018/06/15/java-memory-model/"/>
      <url>/2018/06/15/java-memory-model/</url>
      
        <content type="html"><![CDATA[<h2 id="1-内存模型-JMM"><a href="#1-内存模型-JMM" class="headerlink" title="1. 内存模型(JMM)"></a>1. 内存模型(JMM)</h2><p> <img src="/images/java/jmm.png" alt="内存模型"></p><h2 id="2-内存间的交互操作"><a href="#2-内存间的交互操作" class="headerlink" title="2. 内存间的交互操作"></a>2. 内存间的交互操作</h2><h3 id="2-1-定义操作"><a href="#2-1-定义操作" class="headerlink" title="2.1. 定义操作"></a>2.1. 定义操作</h3><ul><li><strong>lock(锁定)</strong>：作用于主内存的变量,它把一个变量标识为一条线程独占的状态.</li><li><strong>unlock(解锁</strong>)：作用于主内存的变量,它把一个处于锁定状态的变量释放出来,释放后的变量才可以被其他线程锁定.</li><li><strong>read(读取</strong>)：作用于主内存的变量,它把一个变量的值从主内存传输到线程的工作内存中,以便随后的load动作使用.</li><li><strong>load(载入)</strong>：作用于工作内存的变量,它把read操作从主内存中得到的变量值放入工作内存的变量副本中.</li><li><strong>use(使用)</strong>：作用于工作内存的变量,它把工作内存中一个变量的值传递给执行引擎,每当虚拟机遇到一个需要使用到 变量的值的字节码指令时将会执行这个操作.</li><li><strong>assign(赋值)</strong>：作用于工作内存的变量,它把一个从执行引擎接收到的值赋给工作内存的变量,每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作.</li><li><strong>store(存储)</strong>：作用于工作内存的变量,它把工作内存中一个变量的值传送到主内存中,以便随后的write操作使用.</li><li><strong>write(写入)</strong>：作用于主内存的变量,它把store操作从工作内存中得到的变量的值放入主内存的变量中.</li></ul><h3 id="2-2-约束条件"><a href="#2-2-约束条件" class="headerlink" title="2.2. 约束条件"></a>2.2. 约束条件</h3><ol><li>read和load、store和write必须保证顺序操作,不能单独出现,但不需要连续操作,中间可隔有其他操作</li><li>不允许一个线程丢弃它的最近的assign操作,即变量在工作内存中改变了之后必须把该变化同步回主内存.</li><li>不允许一个线程无原因地(没有发生过任何assign操作)把数据从线程的工作内存同步回主内存中.</li><li>一个新的变量只能在主内存中“诞生”,不允许在工作内存中直接使用一个未被初始化(load或assign)的变量,换句话说,就是对一个变量实施use、   store操作之前,必须先执行过了assign和load操作.</li><li>一个变量在同一个时刻只允许一条线程对其进行lock操作,但lock操作可以被同一条线程重复执行多次,多次执行lock后,只有执行相同次数的   unlock操作,变量才会被解锁</li><li>如果对一个变量执行lock操作,那将会清空工作内存中此变量的值,在执行引擎使用这个变量前,需要重新执行load或assign操作初始化变量的值.</li><li>如果一个变量事先没有被lock操作锁定,那就不允许对它执行unlock操作,也不允许去unlock一个被其他线程锁定住的变量.</li><li>对一个变量执行unlock操作之前,必须先把此变量同步回主内存中(执行store、 write操作)</li></ol><h3 id="2-3-volatile"><a href="#2-3-volatile" class="headerlink" title="2.3. volatile"></a>2.3. volatile</h3><p>   &emsp;&emsp;假定T表示一个线程,V和W分别表示两个volatile型变量,那么在进行read、 load、 use、 assign、store和write操作时需要满足如下规则:<br>   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是load的时候,线程T才能对变量V执行use动作;并且,只有当线程T对变量V执行的后一个动作是use   的时候,线程T才能对变量V执行load动作. 线程T对变量V的use动作可以认为是和线程T对变量V的load、 read动作相关联,必须连续一起出现   (这条规则要求在工作内存中,每次使用V前都必须先从主内存刷新最新的值,用于保证能看见其他线程对变量V所做的修改后的值).<br>   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是assign的时候,线程T才能对变量V执行store动作;并且,只有当线程T对变量V执行的后一个动作   是store的时候,线程T才能对变量V执行assign动作. 线程T对变量V的assign动作可以认为是和线程T对变量V的store、 write动作相关联,必须连续一   起出现(这条规则要求在工作内存中,每次修改V后都必须立刻同步回主内存中,用于保证其他线程可以看到自己对变量V所做的修改)<br>   &emsp;&emsp;假定动作A是线程T对变量V实施的use或assign动作,假定动作F是和动作A相关联的load或store动作,假定动作P是和动作F相应的对变量V   的read或write动作;类似的,假定动作B是线程T对变量W实施的use或assign动作,假定动作G是和动作B相关联的load或store动作,假定动作   Q是和动作G相应的对变量W的read或write动作. 如果A先于B,那么P先于Q(这条规则要求volatile修饰的变量不会被指令重排序优化,保证代码的执行   顺序与程序的顺序相同).<br>   &emsp;&emsp;volatile不仅保证了共享变量的可见性，还通过内存屏障保证了代码执行顺序与程序顺序相同，通过内存屏障来使变量不被指令重排优化</p><h3 id="2-4-long和double的非原子性协定"><a href="#2-4-long和double的非原子性协定" class="headerlink" title="2.4. long和double的非原子性协定"></a>2.4. long和double的非原子性协定</h3><p>  读写操作可分为2次32位操作,所以一定不是原子操作<br>  <strong>注：现在商用虚拟机本身几乎都已经实现了原子操作,所以不用volatile修饰符</strong></p><h3 id="2-5-原子性"><a href="#2-5-原子性" class="headerlink" title="2.5. 原子性"></a>2.5. 原子性</h3><p>  变量操作的read、load、use、assign、store、write不保证了原子性  通过synchronized对lock、unlock操作也保证了原子性</p><h3 id="2-6-可见性"><a href="#2-6-可见性" class="headerlink" title="2.6. 可见性"></a>2.6. 可见性</h3><p>  volatile保证在读取共享变量之前去主内存刷最新值，还保证了最新值能及时同步至主内存</p><h3 id="2-7-有序性"><a href="#2-7-有序性" class="headerlink" title="2.7. 有序性"></a>2.7. 有序性</h3><p>  在本线程内观察所有操作都是有序的，在另一个线程观察所有操作都是无序的</p><h3 id="2-8-先发性"><a href="#2-8-先发性" class="headerlink" title="2.8. 先发性"></a>2.8. 先发性</h3><p>  先发生的线程对修改了共享变量的值、发送了消息或调用了方法会被后发生的线程所观察到  </p><h3 id="2-9-先行发生-happens-before-规则"><a href="#2-9-先行发生-happens-before-规则" class="headerlink" title="2.9. 先行发生(happens-before)规则"></a>2.9. 先行发生(happens-before)规则</h3><p>   《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。 </p><ul><li>1、程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li><li>2、监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li><li>3、volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li><li>4、传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li><li>5、start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。</li><li>6、join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li></ul><h2 id="3-常见比较"><a href="#3-常见比较" class="headerlink" title="3. 常见比较"></a>3. 常见比较</h2><h3 id="3-1-volatile与synchronized比较"><a href="#3-1-volatile与synchronized比较" class="headerlink" title="3.1. volatile与synchronized比较"></a>3.1. volatile与synchronized比较</h3><ul><li>1、被volatile描述的共享变量通过内存屏障是代码不被指令重排优化，从而保证了共享变量在线程间的可见性，更新变量时会及时的将最新值  同步至主内存，读变量时会及时的去主内存获取最新值，volatile只能修饰变量，只保证可见性，不保证原子性，不能用来同步。</li><li>2、synchronized是通过对象头的锁标志位来实现加锁与释放锁，不仅保证可见性，还保证了原子性，只有获得了对象锁的线程才能进入临界区，  其他线程会阻塞等待锁释放后再争抢锁。</li></ul><h3 id="3-2-Lock-ReentrantLock-与synchronized比较"><a href="#3-2-Lock-ReentrantLock-与synchronized比较" class="headerlink" title="3.2. Lock(ReentrantLock)与synchronized比较"></a>3.2. Lock(ReentrantLock)与synchronized比较</h3><ul><li>1、synchronized是JAVA关键字，Lock是一个java接口，ReentrantLock实现了该接口</li><li>2、Lock锁需要在finally{}代码里手动释放，synchronized会自动释放锁</li><li>3、Lock根据实现不同有多种锁类型，如公平锁、非公平锁(默认非公平锁)</li><li>4、性能方面，在锁竞争很大的情况下Lock性能更优于synchronized</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> JMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA Monitor Tools</title>
      <link href="/2018/06/14/java-monitor-tools/"/>
      <url>/2018/06/14/java-monitor-tools/</url>
      
        <content type="html"><![CDATA[<h2 id="一-jps-JVM-Process-Status-Tool"><a href="#一-jps-JVM-Process-Status-Tool" class="headerlink" title="一. jps(JVM Process Status Tool)"></a>一. jps(JVM Process Status Tool)</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   类似UNIX的ps命令，列出虚拟机正在运行的进程信息</p><h3 id="2-参数"><a href="#2-参数" class="headerlink" title="2. 参数"></a>2. 参数</h3><ul><li><strong>-q</strong>: 只输出进程ID</li><li><strong>-m</strong>: 输出主类启动时的参数</li><li><strong>-l</strong>: 输出主类全名，如果是jar则输出jar路径</li><li><strong>-v</strong>: 输出虚拟机启动时的JVM参数</li></ul><h2 id="二-jstat-JVM-Statistics-Monitoring-Tool"><a href="#二-jstat-JVM-Statistics-Monitoring-Tool" class="headerlink" title="二. jstat(JVM Statistics Monitoring Tool)"></a>二. jstat(JVM Statistics Monitoring Tool)</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、 内存、 垃圾收集、 JIT编译等运行数据 </p><h3 id="2-格式"><a href="#2-格式" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jstat[option vmid[interval[s|ms][count]]]   如**<code>jstat -class 14232(PID) 520(采样率) 4(采样次数)</code>**</p><h3 id="3-参数"><a href="#3-参数" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-class</strong>: 监控类加载数量、卸载数量、总空间以及加载所用时间</li><li><strong>-gc</strong>: 监控java堆状态，包括Eden区，2个survivor区，老年代，永久代容量、已用空间、GC时间合计等</li><li><strong>-gccapacity</strong>: 与-gc基本相同，但主要关注java堆各个区域使用到的最大、最小空间</li><li><strong>-gcutil</strong>: 与-gc基本相同，但主要关注java堆各个区域使用占比</li><li><strong>-gccase</strong>: 与-gcutil一样，但会额外输出上一次GC的原因</li><li><strong>-gcnew</strong>: 监控新生代GC状态</li><li><strong>-gcnewcapacity</strong>: 与-gcnew基本相同，但主要关注的是使用到的最大、最小空间</li><li><strong>-gcold</strong>: 监控老年代GC状态</li><li><strong>-gcoldcapacity</strong>: 与-gcold基本相同，但主要关注的是使用道的最大、最小空间</li><li><strong>-gcpermcapacity</strong>: 输出永久带使用到的最大、最小空间</li><li><strong>-compiler</strong>: 输出JIT编译过的方法、耗时等信息</li><li><strong>-printcompilation</strong>: 输出已被JIT编译过的方法</li></ul><h2 id="三-jinfo-Configuration-Info-for-Java"><a href="#三-jinfo-Configuration-Info-for-Java" class="headerlink" title="三. jinfo(Configuration Info for Java)"></a>三. jinfo(Configuration Info for Java)</h2><h3 id="1-介绍-2"><a href="#1-介绍-2" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   实时地查看和调整虚拟机各项参数</p><h3 id="2-格式-1"><a href="#2-格式-1" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jinfo [option] pid 如 <code>jinfo -flags 14232</code></p><h3 id="3-参数-1"><a href="#3-参数-1" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-flag &lt;name&gt;</strong>: to print the value of the named VM flag. (输出JVM参数名为name的参数信息)</li><li><strong>-flag +&#x2F;-&lt;name&gt;</strong>: to enable or disable the named VM flag. (添加或除去JVM参数名为name的参数)</li><li><strong>-flag &lt;name&gt;&#x3D;&lt;value&gt;</strong>: to set the named VM flag to the given value. (设置JVM参数， 如-Xmx&#x3D;1024m)</li><li><strong>-flags</strong>: to print VM flags. (输出JVM启动参数信息)</li><li><strong>-sysprops</strong>: to print Java system properties. (输出<code>System.getProperties()</code>信息)</li></ul><h2 id="四-jmap-Memory-Map-for-Java"><a href="#四-jmap-Memory-Map-for-Java" class="headerlink" title="四. jmap(Memory Map for Java)"></a>四. jmap(Memory Map for Java)</h2><h3 id="1-介绍-3"><a href="#1-介绍-3" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   命令用于生成堆转储快照(一般称为heapdump或dump文件)<br>   其他生成dump文件方式:通过参数<code>-XX：+HeapDumpOnOutOfMemoryError</code>OOM时生成、<code>-XX：+HeapDumpOnCtrlBreak</code>通过   [Ctrl]+[Break]键让虚拟机生成dump文件、或者Linux通过命令kill -3 pid也能拿到dump</p><h3 id="2-格式-2"><a href="#2-格式-2" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jmap [option] vmid </p><h3 id="3-参数-2"><a href="#3-参数-2" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-dump</strong>: 生成java堆转存快照, 格式 <code>-dump:[live, ],format=b,file=&lt;filename&gt;</code>, live表示是否只导出存活的对象</li><li><strong>-finalizerinfo</strong>: 显示在F-Queen里面等待Finalizer线程执行finalize()方法的对象，只在Linux&#x2F;Solaris平台有效</li><li><strong>-heap</strong>: 显示java堆详细信息，如使用哪种GC回收器，参数配置、分代状况等信息，只在Linux&#x2F;Solaris平台有效</li><li><strong>-histo</strong>: 显示堆中对象统计信息，包括类、实例数量及合计容量等</li><li><strong>-permstat</strong>: 以ClassLoader为统计口径显示永久带内存状态，只在Linux&#x2F;Solaris平台有效</li><li><strong>-F</strong>: 当-dump没响应时，使用-F强制生成dump文件，只在Linux&#x2F;Solaris平台有效</li></ul><h2 id="五-jhat-JVM-Heap-Analysis-Tool"><a href="#五-jhat-JVM-Heap-Analysis-Tool" class="headerlink" title="五. jhat(JVM Heap Analysis Tool)"></a>五. jhat(JVM Heap Analysis Tool)</h2><h3 id="1-介绍-4"><a href="#1-介绍-4" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   分析jmap生成的堆转储快照(dump文件)</p><h3 id="2-格式-3"><a href="#2-格式-3" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jhat [-port 7001] &lt;dumpfile&gt;</p><h3 id="3-参数-3"><a href="#3-参数-3" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-port</strong>: server端口，可通过host:port访问</li><li><strong>&lt;file&gt;</strong>: dump文件</li><li><strong>-J&lt;flag&gt;</strong>: 运行参数,如: <code>-J-mx512m</code></li></ul><h2 id="六-jstack-Stack-Trace-for-Java"><a href="#六-jstack-Stack-Trace-for-Java" class="headerlink" title="六. jstack(Stack Trace for Java)"></a>六. jstack(Stack Trace for Java)</h2><h3 id="1-介绍-5"><a href="#1-介绍-5" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>   用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)<br>   线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，   如线程间死锁、 死循环、 请求外部资源导致的长时间等待等都是导致线程长时间停顿的常见原因。 线程出现停顿的时候通过   jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源</p><h3 id="2-格式-4"><a href="#2-格式-4" class="headerlink" title="2. 格式"></a>2. 格式</h3><p>   jstack [option] vmid 如<code>jstack -l 14232</code></p><h3 id="3-参数-4"><a href="#3-参数-4" class="headerlink" title="3. 参数"></a>3. 参数</h3><ul><li><strong>-F</strong>: 当正常请求无响应时，强制输出线程堆栈</li><li><strong>-l</strong>: 除堆栈外，显示关于锁的附加信息</li><li><strong>-m</strong>: 如果调用到本地方法时，显示C&#x2F;C++堆栈信息</li></ul><h3 id="4-日志分析"><a href="#4-日志分析" class="headerlink" title="4. 日志分析"></a>4. 日志分析</h3><ol><li>线程分为New、Runnable、Running、Waiting、Timed_Waiting、Blocked、Dead等状态</li></ol><ul><li><strong>New</strong>: 当线程对象创建时存在的状态，此时线程不可能执行；  </li><li><strong>Runnable</strong>：当调用thread.start()后，线程变成为Runnable状态。只要得到CPU，就可以执行；  </li><li><strong>Running</strong>：线程正在执行；  </li><li><strong>Waiting</strong>：执行thread.join()或在锁对象调用obj.wait()等情况就会进该状态，表明线程正处于等待某个资源或条件发生来唤醒自己；  </li><li><strong>Timed_Waiting</strong>：执行Thread.sleep(long)、thread.join(long)或obj.wait(long)等就会进该状态，与Waiting的区别在于Timed_Waiting的等待有时间限制；  </li><li><strong>Blocked</strong>：如果进入同步方法或同步代码块，没有获取到锁，则会进入该状态；  </li><li><strong>Dead</strong>：线程执行完毕，或者抛出了未捕获的异常之后，会进入dead状态，表示该线程结束</li></ul><ol start="2"><li>其次，对于jstack日志，我们要着重关注如下关键信息</li></ol><ul><li><strong>Deadlock</strong>：表示有死锁  </li><li><strong>Waiting on condition</strong>：等待某个资源或条件发生来唤醒自己。具体需要结合jstacktrace来分析，比如线程正在sleep，网络读写繁忙而等待  </li><li><strong>Blocked</strong>：阻塞  </li><li><strong>Waiting on monitor entry</strong>：在等待获取锁  </li><li><strong>in Object.wait()</strong>：获取锁后又执行obj.wait()放弃锁  </li><li>对于Waiting on monitor entry 和 inObject.wait()的详细描述：Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者Class的锁。每一个对象都有，也仅有一个 monitor。从下图中可以看出，每个 Monitor在某个时刻，只能被一个线程拥有，该线程就是 “Active Thread”，而其它线程都是 “Waiting Thread”，分别在两个队列 “Entry Set”和 “Wait Set”里面等候。在 “Entry Set”中等待的线程状态是”Waiting for monitor entry”，而在 “Wait Set”中等待的线程状态是 “in Object.wait()”</li></ul><h3 id="5-附录"><a href="#5-附录" class="headerlink" title="5. 附录"></a>5. 附录</h3><p>   在JDK1.5中在<code>java.lang.Thread</code>类中新增了<code>getAllStackTraces()</code>方法获取虚拟机所有的线程<code>StackTraceElement</code>   对象，实现了大部分jstack功能，实际项目中可页面展示</p><h2 id="七-VisualVM-All-in-One-Java-Troubleshooting-Tool"><a href="#七-VisualVM-All-in-One-Java-Troubleshooting-Tool" class="headerlink" title="七. VisualVM(All-in-One Java Troubleshooting Tool)"></a>七. VisualVM(All-in-One Java Troubleshooting Tool)</h2><h3 id="1-介绍-6"><a href="#1-介绍-6" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>  是到目前为止随JDK发布的功能最强大的运行监视和故障处理程序，并且可以预见在未来一段时间内都是官方主力发展的虚拟机故障处理工具。  官方在VisualVM的软件说明中写上了“All-in-One”的描述字样，预示着它除了运行监视、 故障处理外，还提供了很多其他方面的功能。</p><h3 id="2-远程监控"><a href="#2-远程监控" class="headerlink" title="2. 远程监控"></a>2. 远程监控</h3><ul><li>1、远程服务器启动jstatd服务<br>创建配置文件jstatd.policy内容为<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant codebase &quot;file:$&#123;java.home&#125;/../lib/tools.jar&quot; &#123;  </span><br><span class="line">   permission java.security.AllPermission;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>启动服务:<code>jstatd -J-Djava.security.policy=jstatd.policy -p 8701</code></li><li>2、启动应用参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Dcom.sun.management.jmxremote=true </span><br><span class="line">-Dcom.sun.management.jmxremote.port=9090 </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false </span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false</span><br><span class="line">-Djava.rmi.server.hostname=192.168.0.1</span><br></pre></td></tr></table></figure></li><li>3、启动jvisualvm,操作步骤:<br>远程 -&gt; 添加远程主机 -&gt; 添加JMX链接</li></ul><h2 id="八-案列"><a href="#八-案列" class="headerlink" title="八. 案列"></a>八. 案列</h2><h3 id="1-利用jstack调试线程堆栈信息"><a href="#1-利用jstack调试线程堆栈信息" class="headerlink" title="1. 利用jstack调试线程堆栈信息"></a>1. 利用jstack调试线程堆栈信息</h3><ol><li>jps得到PID，如14232</li><li>查看进程PID的线程耗时情况,命令<code>ps -Lfp pid</code>或<code>top -Hp pid</code>找到最耗时的线程ID 如14253</li><li>获取线程ID16进制编码<code>print &quot;%x\n&quot; 14253</code>为37ad</li><li>用jstack获取线程堆栈信息<code>jstack 14232 |grep 37ad</code>打印如下信息:<br><code>&quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007f772c00f800 nid=0x37ad waiting on condition </code><br>通过该日志分析表示该线程在等待某个资源来唤醒</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java Monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Interview Experience</title>
      <link href="/2018/05/19/interview-experience/"/>
      <url>/2018/05/19/interview-experience/</url>
      
        <content type="html"><![CDATA[<h2 id="一-JAVA基础"><a href="#一-JAVA基础" class="headerlink" title="一. JAVA基础"></a>一. JAVA基础</h2><h3 id="1-9种基本数据类型及其封装类-所占大小"><a href="#1-9种基本数据类型及其封装类-所占大小" class="headerlink" title="1. 9种基本数据类型及其封装类,所占大小"></a>1. 9种基本数据类型及其封装类,所占大小</h3><table><thead><tr><th align="center">类型</th><th align="center">包装类</th><th align="center">大小(字节)</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td><td align="center">1</td></tr><tr><td align="center">char</td><td align="center">Character</td><td align="center">2</td></tr><tr><td align="center">short</td><td align="center">Short</td><td align="center">2</td></tr><tr><td align="center">int</td><td align="center">Integer</td><td align="center">4</td></tr><tr><td align="center">float</td><td align="center">Float</td><td align="center">4</td></tr><tr><td align="center">double</td><td align="center">Double</td><td align="center">8</td></tr><tr><td align="center">long</td><td align="center">Long</td><td align="center">8</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td><td align="center">-</td></tr><tr><td align="center">void</td><td align="center">Void</td><td align="center">-</td></tr></tbody></table><h3 id="2-Object类方法"><a href="#2-Object类方法" class="headerlink" title="2. Object类方法"></a>2. Object类方法</h3><ul><li>getClass() 获取类对象Class (native)</li><li>hashCode() 获取hashCode值(native)</li><li>equals(Object) 判断是否同一对象</li><li>clone() 对象克隆(native)</li><li>wait() </li><li>wait(timeout)</li><li>wait(timeout, nanos)</li><li>notify()</li><li>notifyAll()</li><li>toString()</li><li>finalize() (protected)</li></ul><h3 id="3-equals-、hashCode、-比较"><a href="#3-equals-、hashCode、-比较" class="headerlink" title="3. equals 、hashCode、&#x3D;&#x3D; 比较"></a>3. equals 、hashCode、&#x3D;&#x3D; 比较</h3><ul><li>equals是Object类方法，内部实现的是判断对象是否相等(即 &#x3D;&#x3D;)。</li><li>hashCode是Object的native方法，返回的是类似表示对象地址的整数。</li><li>&#x3D;&#x3D;是判断2个对象是否相同。</li><li>如果2个对象相同则hashCode一定相等，若2个对象不同hashCode不一定相等。</li><li>一般地重写了equals方法建议也要重写hashCode方法。</li></ul><h3 id="4-面向对象的特性与含义"><a href="#4-面向对象的特性与含义" class="headerlink" title="4. 面向对象的特性与含义"></a>4. 面向对象的特性与含义</h3><ul><li><strong>抽象</strong>  是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</li><li><strong>封装</strong>  是指将某事物的属性和行为包装到对象中，这个对象只对外公布需要公开的属性和行为，而这个公布也是可以有选择性的公布给其它对象，private、protected、public三种修饰符或不用(即默认default)对外部对象访问该对象的属性和行为进行限制。</li><li><strong>继承</strong>  是子对象可以继承父对象的属性和行为，亦即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为。</li><li><strong>多态</strong>  是指父对象中的同一个行为能在其多个子对象中有不同的表现。也就是说子对象可以使用重写父对象中的行为,使其拥有不同于     父对象和其它子对象的表现,这就是overriding(重写)。实现多态的技术称为：动态绑定(dynamic binding)，是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</li></ul><h3 id="5-Override与Overload"><a href="#5-Override与Overload" class="headerlink" title="5. Override与Overload"></a>5. Override与Overload</h3><ul><li><strong>Override</strong>是重写:方法名称、参数个数，类型，顺序，返回值类型都是必须和父类方法一致的。它的关系是父子关系。</li><li><strong>Overload</strong>是重载:方法名称不变，方法参数个数、类型、顺序至少一个不同。它的关系是同一个类，同一个方法名。</li></ul><h3 id="6-wait与sleep"><a href="#6-wait与sleep" class="headerlink" title="6. wait与sleep"></a>6. wait与sleep</h3><ul><li>wait是Object类的方法；而sleep是Thread类的静态方法。</li><li>当线程执行到wait方法时，他就会进入到该对象相关的等待池中，同时释放对象的机锁，其他线程可访问，直到超时或该对象调用notify或notifyAll；而当线程执行sleep方法时，线程进入阻塞状态，让出CPU资源，但在Synchronized同步块中不能释放对象的锁。</li><li>wait方法必须放在synchronized代码块中，否则会在时抛出<code>java.lang.IllegalMonitorStateException</code>异常。</li><li>wait和sleep都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException(但不建议使用该方法)。</li></ul><h3 id="7-java并发"><a href="#7-java并发" class="headerlink" title="7. java并发"></a>7. java并发</h3><blockquote><p><a href="/2018/06/15/java-concurrent">Java并发编程</a>   </p></blockquote><h3 id="8-interface与abstract类"><a href="#8-interface与abstract类" class="headerlink" title="8. interface与abstract类"></a>8. interface与abstract类</h3><ul><li>抽象类是包含有抽象方法的类(也可以拥有成员变量和普通成员方法)，抽象方法是只有方法声明没有具体实现的方法，所以抽象类不能实例化，是为了继承而存的，抽象类与普通类有3点区别：<ul><li>1.抽象方法必须是public或protected，缺损情况下默认为public;</li><li>2.抽象类不能被实例化；</li><li>3.如果一个类继承了抽象类，则子类必须实现父类的抽象方法，若没有实现父类抽象方法，则子类也必须定义为抽象类。</li></ul></li><li>接口是泛指供别人调用的方法或函数，接口中可以有变量和方法，变量被隐式地指定为<code>public static final</code>，方法被隐式地指定为<code>public abstract</code>,接口中的方法不能有具体的实现(JDK8之后接口可以有default方法)。</li><li>接口与抽象类比较: <ul><li>1.语法层面上:<ul><li>1).抽象类可以提供成员方法的实现细节而接口中只能存在public abstract方法</li><li>2).抽象类中的成员变量可以是各种类型，而接口中的成员变量只能是public static final类型</li><li>3).接口中不能存在静态代码块和静态方法，而抽象类中可以</li><li>4).一个类只能继承一个抽象类而可以实现多个接口</li></ul></li><li>2.设计层面上: <ul><li>1).抽象类是对一种事物对象的抽象，而接口是对事物行为的抽象，抽象类是对整个类整体的抽象，包括属性、行为，而接口是对类的局部(行为)的抽象。继承抽象类是”是不是”的关系，实现接口是”有没有”的关系。</li><li>2).设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计，而接口是一种行为规范，它是一种辐射式设计</li></ul></li></ul></li></ul><h3 id="9-fail-fast"><a href="#9-fail-fast" class="headerlink" title="9. fail-fast"></a>9. fail-fast</h3><ul><li>fail-fast：机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出异常: <code>ConcurrentModificationException</code>，产生fail-fast事件。</li></ul><h3 id="10-JDK和CGLIB动态代理"><a href="#10-JDK和CGLIB动态代理" class="headerlink" title="10. JDK和CGLIB动态代理"></a>10. JDK和CGLIB动态代理</h3><ul><li>JDK动态代理只能针对实现了接口的类生成代理(实例化一个类)。此时代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，具体接口实现中，可以在调用目标对象相应方法前后加上其他业务处理逻辑。</li><li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类(没有实例化一个类)，覆盖其中的方法。</li></ul><h2 id="二-JVM"><a href="#二-JVM" class="headerlink" title="二. JVM"></a>二. JVM</h2><h3 id="1-内存模型"><a href="#1-内存模型" class="headerlink" title="1. 内存模型"></a>1. 内存模型</h3><ul><li><strong>堆内存(Heap)</strong> 是线程间共享内存，主要存放java的对象及数组</li><li><strong>栈内存(Stack)</strong> 是线程间不共享的，主要存放基本数据类型和对象及数组的引用等   </li><li><strong>方法区(Method Area)</strong> 是存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据</li><li><strong>本地方法栈(Native Method Stack)</strong> 为虚拟机调用本地Native方法提供服务,有的虚拟机与虚拟机栈合二为一</li><li><strong>程序计数器(Program Counter Register)</strong> 是当前虚拟机执行指令的地址，当执行到Native方法时其值为空(Undefined)</li><li><strong>运行时常量池(Runtime Constant Pool)</strong> 用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放</li><li><strong>直接内存(Direct Memory)</strong> NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据</li></ul><h3 id="2-GC的2种判定方法"><a href="#2-GC的2种判定方法" class="headerlink" title="2. GC的2种判定方法"></a>2. GC的2种判定方法</h3><ul><li><strong>引用计数</strong>: 实现简单、高效，但会出现循环引用的时候对象将无法得到回收</li><li><strong>引用链</strong>：即可达性分析，以GC Roots为根节点开始向下搜索，所走的路径叫做引用链(Reference Chain)，当一个对象到GC Roots对象没有任何引用链时说明该对象不可用，可作为GC Roots的对象：<ul><li>1.虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>2.方法区中的类静态属性引用的对象或者常量引用的对象。</li><li>3.本地方法栈中JNI（就是native方法）引用的对象。</li></ul></li></ul><h3 id="3-java自动内存管理"><a href="#3-java自动内存管理" class="headerlink" title="3. java自动内存管理"></a>3. java自动内存管理</h3><blockquote><p><a href="/2018/06/15/java-gc">Java自动内存管理</a>   </p></blockquote><h2 id="三-其他"><a href="#三-其他" class="headerlink" title="三. 其他"></a>三. 其他</h2><h3 id="1-OSI网络模型"><a href="#1-OSI网络模型" class="headerlink" title="1. OSI网络模型"></a>1. OSI网络模型</h3><table><thead><tr><th align="center">层级</th><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">应用层</td><td align="left">指网络操作系统和具体的应用程序，对应WWW服务器、FTP服务器等应用软件</td></tr><tr><td align="center">2</td><td align="left">表示层</td><td align="left">数据语法的转换、数据的传送等</td></tr><tr><td align="center">3</td><td align="left">会话层</td><td align="left">建立起两端之间的会话关系，并负责数据的传送</td></tr><tr><td align="center">4</td><td align="left">传输层</td><td align="left">负责错误的检查与修复，以确保传送的质量，是TCP&#x2F;UDP工作的地方。（报文）</td></tr><tr><td align="center">5</td><td align="left">网络层</td><td align="left">提供了编址方案,IP协议工作的地方(数据包）</td></tr><tr><td align="center">6</td><td align="left">数据链路层</td><td align="left">将由物理层传来的未经处理的位数据包装成数据帧</td></tr><tr><td align="center">7</td><td align="left">物理层</td><td align="left">对应网线、网卡、接口等物理设备(位)</td></tr></tbody></table><h3 id="2-TCP-IP协议"><a href="#2-TCP-IP协议" class="headerlink" title="2. TCP&#x2F;IP协议"></a>2. TCP&#x2F;IP协议</h3><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>链路层</li></ul><h3 id="3-IP分类"><a href="#3-IP分类" class="headerlink" title="3. IP分类"></a>3. IP分类</h3><ul><li>A类地址（1.0.0.0-126.255.255.255）用于最大型的网络，该网络的节点数可达16,777,216个。</li><li>B类地址（128.0.0.0-191.255.255.255）用于中型网络，节点数可达65,536个。</li><li>C类地址（192.0.0.0-223.255.255.255）用于256个节点以下的小型网络的单点网络通信。</li><li>D类地址（224.0.0.0-239.255.255.255）并不反映网络的大小，只是用于组播，用来指定所分配的接收组播的节点组，这个节点组由组播订阅成员组成。D类地址的范围为</li><li>E类（240.0.0.0-255.255.255.254）地址用于试验。</li></ul><h3 id="4-TCP与UDP"><a href="#4-TCP与UDP" class="headerlink" title="4. TCP与UDP"></a>4. TCP与UDP</h3><ul><li>TCP、UDP都是传输层协议</li><li>TCP(Transmission Control Protocol, 传输控制协议) 是面向连接的协议(即在收发数据前必须和对方建立可靠连接)，TCP建立连接要3次握手，TCP断开连接需要4次挥手，保证了数据通信的可靠性；TCP包头最小长度为20个字节数。</li><li>UDP(User Data Protocol, 用户数据报协议) 是一个非连接的协议(即传输数据之前源端和终端不建立连接)，只是简单的把应用程序的数据尽快地扔到网络上，因此UDP传输速度只受应用程序生成数据速度、计算机的能力和传输带宽的限制，接收端，UDP把每个消息段放入队列中应用程序读取使用；UDP可以一台服务器同时向多台客户机传输相同数据；UDP消息头很短只有8个字节；UDP尽可能快的发送数据，但不保证数据的可靠性(丢包，顺序等)；UDP是面向报文的，发送方的报文只是添加首部后就向下交付给IP层，既不拆分也不合并，这些需要接收端应用程序自己实现。</li></ul><h3 id="5-死锁的必要条件"><a href="#5-死锁的必要条件" class="headerlink" title="5. 死锁的必要条件"></a>5. 死锁的必要条件</h3><ul><li><strong>互斥条件</strong>：资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源被另一进程占有时，则申请者等待直到资源被占有者释放。</li><li><strong>不可剥夺条件</strong>：进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。</li><li><strong>请求和保持条件</strong>：进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。</li><li><strong>循环等待条件</strong>：在发生死锁时必然存在一个进程等待队列{P1,P2,…,Pn},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所深情地资源。</li></ul><h3 id="6-MySQL索引-5-5之前默认MyISAM引擎，5-5之后默认InnoDB"><a href="#6-MySQL索引-5-5之前默认MyISAM引擎，5-5之后默认InnoDB" class="headerlink" title="6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)"></a>6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)</h3><ul><li>MyISAM使用B-Tree实现主键索引、唯一索引和非主键索引。</li><li>InnoDB中非主键索引使用的是B-Tree数据结构，而主键索引使用的是B+Tree。</li></ul><h3 id="7-进程与线程"><a href="#7-进程与线程" class="headerlink" title="7. 进程与线程"></a>7. 进程与线程</h3><ul><li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元</li><li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li><li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束   </li><li>线程是轻量级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li><li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li><li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志</li></ul><h3 id="8-IPC通信方式"><a href="#8-IPC通信方式" class="headerlink" title="8. IPC通信方式"></a>8. IPC通信方式</h3><ul><li><strong>管道(Pipe)</strong>：匿名管道（pipe亲缘关系的进程通信）、命名管道（mkfifo&#x2F;mknod）</li><li><strong>消息队列</strong>：是基于消息的、用无亲缘关系的进程间通信，主要函数：msgget、msgsend、msgrecv、msgctl</li><li><strong>信号量</strong>：相当于一把互斥锁，通过p、v操作，主要函数：semget、semop、semctl</li><li><strong>共享内存</strong>：是进程间通信速度最快的，所以用经常是集合信号量或互斥锁来实现同步，shmget、shmat、shmdt、shmctl</li></ul><h3 id="9-虚拟内存"><a href="#9-虚拟内存" class="headerlink" title="9. 虚拟内存"></a>9. 虚拟内存</h3><ul><li>是将进程部分装入内存中，从而能实现一个很大的程序能在一个比它小的内存中运行，它的主要实现是靠程序的换进换出来实现的，因为内存中0-3G是用户使用，3-4G才是内存使用，通过映射来实现来进行逻辑地址到物理地址的映射</li></ul><h3 id="10-设计原则"><a href="#10-设计原则" class="headerlink" title="10. 设计原则"></a>10. 设计原则</h3><ul><li>依赖倒置原则 － Dependency Inversion Principle (DIP) </li><li>里氏替换原则 － Liskov Substitution Principle (LSP) </li><li>接口分隔原则 － Interface Segregation Principle (ISP) </li><li>单一职责原则 － Single Responsibility Principle (SRP) </li><li>开闭原则 － The Open-Closed Principle (OCP)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel4J</title>
      <link href="/2018/04/16/Excel4J/"/>
      <url>/2018/04/16/Excel4J/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/Crab2died/Excel4J">Excel4J Github</a></p></blockquote><p><img src="https://img.shields.io/badge/version-3.0.0--Alpha-green.svg" alt="version"> <img src="https://img.shields.io/github/license/Crab2died/Excel4J.svg" alt="GitHub license"><img src="https://img.shields.io/maven-central/v/org.apache.maven/apache-maven.svg" alt="Maven Central"></p><blockquote><p>紧急修复以绝对路径指定模板来导出会导致模板被修改的BUG,以及读取Excel数据会修改原Excel文件,建议升级至2.1.4-Final2及以上版本  </p></blockquote><h2 id="一-更新记录"><a href="#一-更新记录" class="headerlink" title="一. 更新记录"></a>一. 更新记录</h2><h3 id="1-v3-x"><a href="#1-v3-x" class="headerlink" title="1. v3.x"></a>1. v3.x</h3><ol><li>新增CSV(包含基于ExcelField注解)的导出支持</li><li>新增CSV(包含基于ExcelField注解)的导入支持</li></ol><h3 id="2-v2-x"><a href="#2-v2-x" class="headerlink" title="2. v2.x"></a>2. v2.x</h3><ol><li>Excel读取支持部分类型转换了(如转为Integer,Long,Date(部分)等) v2.0.0之前只能全部内容转为String</li><li>Excel支持非注解读取Excel内容了,内容存于<code>List&lt;List&lt;String&gt;&gt;</code>对象内</li><li>现在支持<code>List&lt;List&lt;String&gt;&gt;</code>导出Excel了(可以不基于模板)</li><li>Excel新增了Map数据样式映射功能(模板可为每个key设置一个样式,定义为:&amp;key, 导出Map数据的样式将与key值映射)</li><li>新增读取Excel数据转换器接口<code>com.github.converter.ReadConvertible</code></li><li>新增写入Excel数据转换器接口<code>com.github.converter.WriteConvertible</code></li><li>支持多sheet一键导出，多sheet导出封装Wrapper详见<code>com.github.sheet.wrapper</code>包内包装类</li><li>修复以绝对路径指定模板来导出会导致模板被修改的BUG,以及读取Excel数据会修改原Excel文件,建议升级至2.1.4-Final2版本</li><li>修复已知bug及代码与注释优化</li></ol><h2 id="二-基于注解-src-test-java-modules-Student2-java"><a href="#二-基于注解-src-test-java-modules-Student2-java" class="headerlink" title="二. 基于注解(&#x2F;src&#x2F;test&#x2F;java&#x2F;modules&#x2F;Student2.java)"></a>二. 基于注解(&#x2F;src&#x2F;test&#x2F;java&#x2F;modules&#x2F;Student2.java)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExcelField(title = &quot;学号&quot;, order = 1)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExcelField(title = &quot;姓名&quot;, order = 2)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入数据转换器 Student2DateConverter</span></span><br><span class="line"><span class="meta">@ExcelField(title = &quot;入学日期&quot;, order = 3, writeConverter = Student2DateConverter.class)</span></span><br><span class="line"><span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExcelField(title = &quot;班级&quot;, order = 4)</span></span><br><span class="line"><span class="keyword">private</span> Integer classes;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数据转换器 Student2ExpelConverter</span></span><br><span class="line"><span class="meta">@ExcelField(title = &quot;是否开除&quot;, order = 5, readConverter = Student2ExpelConverter.class)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> expel;</span><br></pre></td></tr></table></figure><h2 id="三-读取Excel快速实现"><a href="#三-读取Excel快速实现" class="headerlink" title="三. 读取Excel快速实现"></a>三. 读取Excel快速实现</h2><h3 id="1-待读取Excel-截图"><a href="#1-待读取Excel-截图" class="headerlink" title="1.待读取Excel(截图)"></a>1.待读取Excel(截图)</h3><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.0.0/students_02.png" alt="待读取Excel截图"></p><h3 id="2-读取转换器-src-test-java-converter-Student2ExpelConverter-java"><a href="#2-读取转换器-src-test-java-converter-Student2ExpelConverter-java" class="headerlink" title="2. 读取转换器(&#x2F;src&#x2F;test&#x2F;java&#x2F;converter&#x2F;Student2ExpelConverter.java)"></a>2. 读取转换器(&#x2F;src&#x2F;test&#x2F;java&#x2F;converter&#x2F;Student2ExpelConverter.java)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel是否开除 列数据转换器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student2ExpelConverter</span> <span class="keyword">implements</span> <span class="title class_">ReadConvertible</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">execRead</span><span class="params">(String object)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object.equals(<span class="string">&quot;是&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-读取函数-src-test-java-base-Excel2Module-java-excel2Object2"><a href="#3-读取函数-src-test-java-base-Excel2Module-java-excel2Object2" class="headerlink" title="3. 读取函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Excel2Module.java#excel2Object2)"></a>3. 读取函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Excel2Module.java#excel2Object2)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">excel2Object2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\JProject\\Excel4J\\src\\test\\resources\\students_02.xlsx&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1)</span></span><br><span class="line">        <span class="comment">// 不基于注解,将Excel内容读至List&lt;List&lt;String&gt;&gt;对象内</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; lists = ExcelUtils.getInstance().readExcel2List(path, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取Excel至String数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; list : lists) &#123;</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2)</span></span><br><span class="line">        <span class="comment">// 基于注解,将Excel内容读至List&lt;Student2&gt;对象内</span></span><br><span class="line">        <span class="comment">// 验证读取转换函数Student2ExpelConverter </span></span><br><span class="line">        <span class="comment">// 注解 `@ExcelField(title = &quot;是否开除&quot;, order = 5, readConverter =  Student2ExpelConverter.class)`</span></span><br><span class="line">        List&lt;Student2&gt; students = ExcelUtils.getInstance().readExcel2Objects(path, Student2.class, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取Excel至对象数组(支持类型转换)：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Student2 st : students) &#123;</span><br><span class="line">            System.out.println(st);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-读取结果"><a href="#4-读取结果" class="headerlink" title="4. 读取结果"></a>4. 读取结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">读取Excel至String数组：</span><br><span class="line">[10000000000001, 张三, 2016/01/19, 101, 是]</span><br><span class="line">[10000000000002, 李四, 2017-11-17 10:19:10, 201, 否]</span><br><span class="line">读取Excel至对象数组(支持类型转换)：</span><br><span class="line">Student2&#123;id=10000000000001, name=&#x27;张三&#x27;, date=Tue Jan 19 00:00:00 CST 2016, classes=101, expel=&#x27;true&#x27;&#125;</span><br><span class="line">Student2&#123;id=10000000000002, name=&#x27;李四&#x27;, date=Fri Nov 17 10:19:10 CST 2017, classes=201, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=10000000000004, name=&#x27;王二&#x27;, date=Fri Nov 17 00:00:00 CST 2017, classes=301, expel=&#x27;false&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="四-导出Excel"><a href="#四-导出Excel" class="headerlink" title="四. 导出Excel"></a>四. 导出Excel</h2><h3 id="1-不基于模板快速导出"><a href="#1-不基于模板快速导出" class="headerlink" title="1. 不基于模板快速导出"></a>1. 不基于模板快速导出</h3><h4 id="1-导出函数-src-test-java-base-Module2Excel-java-testList2Excel"><a href="#1-导出函数-src-test-java-base-Module2Excel-java-testList2Excel" class="headerlink" title="1) 导出函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Module2Excel.java#testList2Excel)"></a>1) 导出函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Module2Excel.java#testList2Excel)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList2Excel</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;List&lt;String&gt;&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; header = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        List&lt;String&gt; _list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            _list.add(i + <span class="string">&quot; -- &quot;</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line">        list2.add(_list);</span><br><span class="line">        header.add(i + <span class="string">&quot;---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ExcelUtils.getInstance().exportObjects2Excel(list2, header, <span class="string">&quot;D:/D.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-导出效果-截图"><a href="#2-导出效果-截图" class="headerlink" title="2) 导出效果(截图)"></a>2) 导出效果(截图)</h4><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.0.0/list_export.png" alt="无模板导出截图"></p><h3 id="2-带有写入转换器函数的导出"><a href="#2-带有写入转换器函数的导出" class="headerlink" title="2. 带有写入转换器函数的导出"></a>2. 带有写入转换器函数的导出</h3><h4 id="1-转换器-src-test-java-converter-Student2DateConverter-java"><a href="#1-转换器-src-test-java-converter-Student2DateConverter-java" class="headerlink" title="1) 转换器(&#x2F;src&#x2F;test&#x2F;java&#x2F;converter&#x2F;Student2DateConverter.java)"></a>1) 转换器(&#x2F;src&#x2F;test&#x2F;java&#x2F;converter&#x2F;Student2DateConverter.java)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出excel日期数据转换器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student2DateConverter</span> <span class="keyword">implements</span> <span class="title class_">WriteConvertible</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">execWrite</span><span class="params">(Object object)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> (Date) object;</span><br><span class="line">        <span class="keyword">return</span> DateUtils.date2Str(date, DateUtils.DATE_FORMAT_MSEC_T_Z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2）导出函数-src-test-java-base-Module2Excel-java-testWriteConverter"><a href="#2）导出函数-src-test-java-base-Module2Excel-java-testWriteConverter" class="headerlink" title="2）导出函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Module2Excel.java#testWriteConverter)"></a>2）导出函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Module2Excel.java#testWriteConverter)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证日期转换函数 Student2DateConverter</span></span><br><span class="line"><span class="comment">// 注解 `@ExcelField(title = &quot;入学日期&quot;, order = 3, writeConverter = Student2DateConverter.class)`</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWriteConverter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Student2&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">10000L</span> + i, <span class="string">&quot;学生&quot;</span> + i, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">201</span>, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ExcelUtils.getInstance().exportObjects2Excel(list, Student2.class, <span class="literal">true</span>, <span class="string">&quot;sheet0&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;D:/D.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-导出效果-截图"><a href="#3-导出效果-截图" class="headerlink" title="3) 导出效果(截图)"></a>3) 导出效果(截图)</h4><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.0.0/converter_export.png" alt="无模板导出截图"></p><h3 id="3-基于模板List导出"><a href="#3-基于模板List导出" class="headerlink" title="3. 基于模板List&lt;Oject&gt;导出"></a>3. 基于模板<code>List&lt;Oject&gt;</code>导出</h3><h4 id="1-导出函数-src-test-java-base-Module2Excel-java-testObject2Excel"><a href="#1-导出函数-src-test-java-base-Module2Excel-java-testObject2Excel" class="headerlink" title="1) 导出函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Module2Excel.java#testObject2Excel)"></a>1) 导出函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Module2Excel.java#testObject2Excel)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testObject2Excel</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">tempPath</span> <span class="operator">=</span> <span class="string">&quot;/normal_template.xlsx&quot;</span>;</span><br><span class="line">    List&lt;Student1&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010001&quot;</span>, <span class="string">&quot;盖伦&quot;</span>, <span class="string">&quot;六年级三班&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010002&quot;</span>, <span class="string">&quot;古尔丹&quot;</span>, <span class="string">&quot;一年级三班&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010003&quot;</span>, <span class="string">&quot;蒙多(被开除了)&quot;</span>, <span class="string">&quot;六年级一班&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010004&quot;</span>, <span class="string">&quot;萝卜特&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010005&quot;</span>, <span class="string">&quot;奥拉基&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010006&quot;</span>, <span class="string">&quot;得嘞&quot;</span>, <span class="string">&quot;四年级二班&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010007&quot;</span>, <span class="string">&quot;瓜娃子&quot;</span>, <span class="string">&quot;五年级一班&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010008&quot;</span>, <span class="string">&quot;战三&quot;</span>, <span class="string">&quot;二年级一班&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010009&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;一年级一班&quot;</span>));</span><br><span class="line">    Map&lt;String, String&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;战争学院花名册&quot;</span>);</span><br><span class="line">    data.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;学校统一花名册&quot;</span>);</span><br><span class="line">    <span class="comment">// 基于模板导出Excel</span></span><br><span class="line">    ExcelUtils.getInstance().exportObjects2Excel(tempPath, <span class="number">0</span>, list, data, Student1.class, <span class="literal">false</span>, <span class="string">&quot;D:/A.xlsx&quot;</span>);</span><br><span class="line">    <span class="comment">// 不基于模板导出Excel</span></span><br><span class="line">    ExcelUtils.getInstance().exportObjects2Excel(list, Student1.class, <span class="literal">true</span>, <span class="literal">null</span>, <span class="literal">true</span>, <span class="string">&quot;D:/B.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-导出模板-截图"><a href="#2-导出模板-截图" class="headerlink" title="2) 导出模板(截图)"></a>2) 导出模板(截图)</h4><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.0.0/normal_template.png" alt="导出模板截图"></p><h4 id="3-基于模板导出结果-截图"><a href="#3-基于模板导出结果-截图" class="headerlink" title="3) 基于模板导出结果(截图)"></a>3) 基于模板导出结果(截图)</h4><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.0.0/normal_export.png" alt="基于模板导出结果图"></p><h4 id="4-不基于模板导出结果-截图"><a href="#4-不基于模板导出结果-截图" class="headerlink" title="4) 不基于模板导出结果(截图)"></a>4) 不基于模板导出结果(截图)</h4><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.0.0/object_export.png" alt="不基于模板导出结果图"></p><h3 id="4-基于模板Map导出"><a href="#4-基于模板Map导出" class="headerlink" title="4. 基于模板Map&lt;String, Collection&lt;Object.toString&gt;&gt;导出"></a>4. 基于模板<code>Map&lt;String, Collection&lt;Object.toString&gt;&gt;</code>导出</h3><h4 id="1-导出函数-src-test-java-base-Module2Excel-java-testMap2Excel"><a href="#1-导出函数-src-test-java-base-Module2Excel-java-testMap2Excel" class="headerlink" title="1) 导出函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Module2Excel.java#testMap2Excel)"></a>1) 导出函数(&#x2F;src&#x2F;test&#x2F;java&#x2F;base&#x2F;Module2Excel.java#testMap2Excel)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMap2Excel</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, List&gt; classes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;战争学院花名册&quot;</span>);</span><br><span class="line">    data.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;学校统一花名册&quot;</span>);</span><br><span class="line"></span><br><span class="line">    classes.put(<span class="string">&quot;class_one&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student1&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010009&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;一年级一班&quot;</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010002&quot;</span>, <span class="string">&quot;古尔丹&quot;</span>, <span class="string">&quot;一年级三班&quot;</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    classes.put(<span class="string">&quot;class_two&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student1&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010008&quot;</span>, <span class="string">&quot;战三&quot;</span>, <span class="string">&quot;二年级一班&quot;</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    classes.put(<span class="string">&quot;class_three&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student1&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010004&quot;</span>, <span class="string">&quot;萝卜特&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010005&quot;</span>, <span class="string">&quot;奥拉基&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    classes.put(<span class="string">&quot;class_four&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student1&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010006&quot;</span>, <span class="string">&quot;得嘞&quot;</span>, <span class="string">&quot;四年级二班&quot;</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    classes.put(<span class="string">&quot;class_six&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student1&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010001&quot;</span>, <span class="string">&quot;盖伦&quot;</span>, <span class="string">&quot;六年级三班&quot;</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010003&quot;</span>, <span class="string">&quot;蒙多&quot;</span>, <span class="string">&quot;六年级一班&quot;</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line"></span><br><span class="line">    ExcelUtils.getInstance().exportObject2Excel(<span class="string">&quot;/map_template.xlsx&quot;</span>,</span><br><span class="line">            <span class="number">0</span>, classes, data, Student1.class, <span class="literal">false</span>, <span class="string">&quot;D:/C.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-导出模板-截图-1"><a href="#2-导出模板-截图-1" class="headerlink" title="2) 导出模板(截图)"></a>2) 导出模板(截图)</h4><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.0.0/map_export_template.png" alt="导出模板截图"></p><h4 id="3-导出结果-截图"><a href="#3-导出结果-截图" class="headerlink" title="3) 导出结果(截图)"></a>3) 导出结果(截图)</h4><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.0.0/map_export.png" alt="导出结果图"></p><h2 id="五-Excel模板自定义属性-不区分大小写"><a href="#五-Excel模板自定义属性-不区分大小写" class="headerlink" title="五. Excel模板自定义属性,不区分大小写"></a>五. Excel模板自定义属性,不区分大小写</h2><h3 id="1-具体代码定义详见-src-main-java-com-github-crab2died-handler-HandlerConstant"><a href="#1-具体代码定义详见-src-main-java-com-github-crab2died-handler-HandlerConstant" class="headerlink" title="1)  具体代码定义详见(&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;crab2died&#x2F;handler&#x2F;HandlerConstant)"></a>1)  具体代码定义详见(&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;crab2died&#x2F;handler&#x2F;HandlerConstant)</h3><h3 id="2-Excel模板自定义属性-不区分大小写"><a href="#2-Excel模板自定义属性-不区分大小写" class="headerlink" title="2)  Excel模板自定义属性,不区分大小写"></a>2)  Excel模板自定义属性,不区分大小写</h3><table><thead><tr><th align="left">定义符</th><th align="left">描述</th><th align="center">优先级(大到小)</th></tr></thead><tbody><tr><td align="left">$appoint_line_style</td><td align="left">当前行样式</td><td align="center">3</td></tr><tr><td align="left">$single_line_style</td><td align="left">单行样式</td><td align="center">2</td></tr><tr><td align="left">$double_line_style</td><td align="left">双行样式</td><td align="center">2</td></tr><tr><td align="left">$default_style</td><td align="left">默认样式</td><td align="center">1</td></tr><tr><td align="left">$data_index</td><td align="left">数据插入的起始位置</td><td align="center">-</td></tr><tr><td align="left">$serial_number</td><td align="left">插入序号标记</td><td align="center">-</td></tr></tbody></table><h2 id="六-多sheet数据导出"><a href="#六-多sheet数据导出" class="headerlink" title="六. 多sheet数据导出"></a>六. 多sheet数据导出</h2><h3 id="1-多sheet数据导出包装类-详见com-github-sheet-wrapper包内包装类"><a href="#1-多sheet数据导出包装类-详见com-github-sheet-wrapper包内包装类" class="headerlink" title="1. 多sheet数据导出包装类,详见com.github.sheet.wrapper包内包装类"></a>1. 多sheet数据导出包装类,详见<code>com.github.sheet.wrapper</code>包内包装类</h3><p>   多sheet数据导出只需将待导出数据封装入<code>com.github.sheet.wrapper</code>包内的Wrapper类即可实现多sheet一键导出</p><h3 id="2-无模板、无注解的多sheet导出com-github-sheet-wrapper-SimpleSheetWrapper"><a href="#2-无模板、无注解的多sheet导出com-github-sheet-wrapper-SimpleSheetWrapper" class="headerlink" title="2. 无模板、无注解的多sheet导出com.github.sheet.wrapper.SimpleSheetWrapper"></a>2. 无模板、无注解的多sheet导出<code>com.github.sheet.wrapper.SimpleSheetWrapper</code></h3><h4 id="1-调用方法"><a href="#1-调用方法" class="headerlink" title="1) 调用方法"></a>1) 调用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多sheet无模板、无注解导出</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBatchSimple2Excel</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成sheet数据</span></span><br><span class="line">    List&lt;SimpleSheetWrapper&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//表格内容数据</span></span><br><span class="line">        List&lt;String[]&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 行数据(此处是数组) 也可以是List数据</span></span><br><span class="line">            String[] rows = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; <span class="number">5</span>; r++) &#123;</span><br><span class="line">                rows[r] = <span class="string">&quot;sheet_&quot;</span> + i + <span class="string">&quot;row_&quot;</span> + j + <span class="string">&quot;column_&quot;</span> + r;</span><br><span class="line">            &#125;</span><br><span class="line">            data.add(rows);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表头数据</span></span><br><span class="line">        List&lt;String&gt; header = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; <span class="number">5</span>; h++) &#123;</span><br><span class="line">            header.add(<span class="string">&quot;column_&quot;</span> + h);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">SimpleSheetWrapper</span>(data, header, <span class="string">&quot;sheet_&quot;</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line">    ExcelUtils.getInstance().simpleSheet2Excel(list, <span class="string">&quot;K.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-导出结果-截图"><a href="#2-导出结果-截图" class="headerlink" title="2) 导出结果(截图)"></a>2) 导出结果(截图)</h4><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/simple_wrapper.png" alt="导出结果截图"></p><h3 id="3-无模板、基于注解的多sheet导出com-github-sheet-wrapper-NoTemplateSheetWrapper"><a href="#3-无模板、基于注解的多sheet导出com-github-sheet-wrapper-NoTemplateSheetWrapper" class="headerlink" title="3. 无模板、基于注解的多sheet导出com.github.sheet.wrapper.NoTemplateSheetWrapper"></a>3. 无模板、基于注解的多sheet导出<code>com.github.sheet.wrapper.NoTemplateSheetWrapper</code></h3><h4 id="1-调用方法-1"><a href="#1-调用方法-1" class="headerlink" title="1) 调用方法"></a>1) 调用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多sheet无模板、基于注解的导出</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBatchNoTemplate2Excel</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;NoTemplateSheetWrapper&gt; sheets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>; s &lt; <span class="number">3</span>; s++) &#123;</span><br><span class="line">        List&lt;Student2&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">10000L</span> + i, <span class="string">&quot;学生&quot;</span> + i, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">201</span>, <span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        sheets.add(<span class="keyword">new</span> <span class="title class_">NoTemplateSheetWrapper</span>(list, Student2.class, <span class="literal">true</span>, <span class="string">&quot;sheet_&quot;</span> + s));</span><br><span class="line">    &#125;</span><br><span class="line">    ExcelUtils.getInstance().noTemplateSheet2Excel(sheets, <span class="string">&quot;EE.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-导出结果-截图-1"><a href="#2-导出结果-截图-1" class="headerlink" title="2) 导出结果(截图)"></a>2) 导出结果(截图)</h3><p><img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/no_template_wrapper.png" alt="导出结果截图"></p><h3 id="4-基于模板、注解的多sheet导出com-github-sheet-wrapper-NormalSheetWrapper"><a href="#4-基于模板、注解的多sheet导出com-github-sheet-wrapper-NormalSheetWrapper" class="headerlink" title="4. 基于模板、注解的多sheet导出com.github.sheet.wrapper.NormalSheetWrapper"></a>4. 基于模板、注解的多sheet导出<code>com.github.sheet.wrapper.NormalSheetWrapper</code></h3><h4 id="1-调用方法-注-为了测试方便，各个sheet数据相同"><a href="#1-调用方法-注-为了测试方便，各个sheet数据相同" class="headerlink" title="1) 调用方法(注:为了测试方便，各个sheet数据相同)"></a>1) 调用方法(注:为了测试方便，各个sheet数据相同)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于模板、注解的多sheet导出</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testObject2BatchSheet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;NormalSheetWrapper&gt; sheets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        List&lt;Student1&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010001&quot;</span>, <span class="string">&quot;盖伦&quot;</span>, <span class="string">&quot;六年级三班&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010002&quot;</span>, <span class="string">&quot;古尔丹&quot;</span>, <span class="string">&quot;一年级三班&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010003&quot;</span>, <span class="string">&quot;蒙多(被开除了)&quot;</span>, <span class="string">&quot;六年级一班&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010004&quot;</span>, <span class="string">&quot;萝卜特&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010005&quot;</span>, <span class="string">&quot;奥拉基&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010006&quot;</span>, <span class="string">&quot;得嘞&quot;</span>, <span class="string">&quot;四年级二班&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010007&quot;</span>, <span class="string">&quot;瓜娃子&quot;</span>, <span class="string">&quot;五年级一班&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010008&quot;</span>, <span class="string">&quot;战三&quot;</span>, <span class="string">&quot;二年级一班&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010009&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;一年级一班&quot;</span>));</span><br><span class="line">        Map&lt;String, String&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;战争学院花名册&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;学校统一花名册&quot;</span>);</span><br><span class="line">        sheets.add(<span class="keyword">new</span> <span class="title class_">NormalSheetWrapper</span>(i, list, data, Student1.class, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">tempPath</span> <span class="operator">=</span> <span class="string">&quot;/normal_batch_sheet_template.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于模板导出Excel</span></span><br><span class="line">    ExcelUtils.getInstance().normalSheet2Excel(sheets, tempPath, <span class="string">&quot;AA.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-导出模板-截图-注-为了测试方便，模板样式大致相同，单元格颜色有区别"><a href="#2-导出模板-截图-注-为了测试方便，模板样式大致相同，单元格颜色有区别" class="headerlink" title="2) 导出模板(截图) (注:为了测试方便，模板样式大致相同，单元格颜色有区别)"></a>2) 导出模板(截图) (注:为了测试方便，模板样式大致相同，单元格颜色有区别)</h4><ol><li>sheet1模板<br>   <img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/normal_template_sheet1.png" alt="sheet1模板截图"></li><li>sheet2模板<br>   <img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/normal_template_sheet2.png" alt="sheet2模板截图"></li></ol><h4 id="3-导出结果-截图-1"><a href="#3-导出结果-截图-1" class="headerlink" title="3) 导出结果(截图)"></a>3) 导出结果(截图)</h4><ol><li>sheet1导出结果<br>   <img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/normal_wrapper_sheet1.png" alt="sheet1导出结果截图"></li><li>sheet2导出结果<br>   <img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/normal_wrapper_sheet2.png" alt="sheet2导出结果截图"></li></ol><h3 id="5-形如Map数据基于模板、注解的多sheet导出com-github-sheet-wrapper-MapSheetWrapper"><a href="#5-形如Map数据基于模板、注解的多sheet导出com-github-sheet-wrapper-MapSheetWrapper" class="headerlink" title="5. 形如Map&lt;String, Collection&lt;Object.toString&gt;&gt;数据基于模板、注解的多sheet导出com.github.sheet.wrapper.MapSheetWrapper"></a>5. 形如<code>Map&lt;String, Collection&lt;Object.toString&gt;&gt;</code>数据基于模板、注解的多sheet导出<code>com.github.sheet.wrapper.MapSheetWrapper</code></h3><h4 id="1-调用方法-注-为了测试方便，各个sheet数据相同-1"><a href="#1-调用方法-注-为了测试方便，各个sheet数据相同-1" class="headerlink" title="1) 调用方法(注:为了测试方便，各个sheet数据相同)"></a>1) 调用方法(注:为了测试方便，各个sheet数据相同)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map数据的多sheet导出</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMap2BatchSheet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;MapSheetWrapper&gt; sheets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        Map&lt;String, List&lt;?&gt;&gt; classes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;战争学院花名册&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;学校统一花名册&quot;</span>);</span><br><span class="line"></span><br><span class="line">        classes.put(<span class="string">&quot;class_one&quot;</span>, Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010009&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;一年级一班&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010002&quot;</span>, <span class="string">&quot;古尔丹&quot;</span>, <span class="string">&quot;一年级三班&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">        classes.put(<span class="string">&quot;class_two&quot;</span>, Collections.singletonList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010008&quot;</span>, <span class="string">&quot;战三&quot;</span>, <span class="string">&quot;二年级一班&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">        classes.put(<span class="string">&quot;class_three&quot;</span>, Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010004&quot;</span>, <span class="string">&quot;萝卜特&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010005&quot;</span>, <span class="string">&quot;奥拉基&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">        classes.put(<span class="string">&quot;class_four&quot;</span>, Collections.singletonList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010006&quot;</span>, <span class="string">&quot;得嘞&quot;</span>, <span class="string">&quot;四年级二班&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">        classes.put(<span class="string">&quot;class_six&quot;</span>, Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010001&quot;</span>, <span class="string">&quot;盖伦&quot;</span>, <span class="string">&quot;六年级三班&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&quot;1010003&quot;</span>, <span class="string">&quot;蒙多&quot;</span>, <span class="string">&quot;六年级一班&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        sheets.add(<span class="keyword">new</span> <span class="title class_">MapSheetWrapper</span>(i, classes, data, Student1.class, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ExcelUtils.getInstance().mapSheet2Excel(sheets, <span class="string">&quot;/map_batch_sheet_template.xlsx&quot;</span>, <span class="string">&quot;CC.xlsx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-导出模板-截图-注-为了测试方便，模板样式大致相同，单元格颜色有区别-1"><a href="#2-导出模板-截图-注-为了测试方便，模板样式大致相同，单元格颜色有区别-1" class="headerlink" title="2) 导出模板(截图) (注:为了测试方便，模板样式大致相同，单元格颜色有区别)"></a>2) 导出模板(截图) (注:为了测试方便，模板样式大致相同，单元格颜色有区别)</h3><ol><li>sheet1模板<br>   <img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/map_template_sheet1.png" alt="sheet1模板截图"></li><li>sheet2模板<br>   <img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/map_template_sheet2.png" alt="sheet2模板截图"></li></ol><h4 id="3-导出结果-截图-2"><a href="#3-导出结果-截图-2" class="headerlink" title="3) 导出结果(截图)"></a>3) 导出结果(截图)</h4><ol><li>sheet1导出结果<br>   <img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/map_wrapper_sheet1.png" alt="sheet1导出结果截图"></li><li>sheet2导出结果<br>   <img src="https://raw.githubusercontent.com/Crab2died/Excel4J/master/src/test/resources/image/v2.1.4/map_wrapper_sheet2.png" alt="sheet2导出结果截图"></li></ol><h2 id="七-CSV文件的操作-完全支持ExcelField注解的所有配置"><a href="#七-CSV文件的操作-完全支持ExcelField注解的所有配置" class="headerlink" title="七. CSV文件的操作(完全支持ExcelField注解的所有配置)"></a>七. CSV文件的操作(完全支持ExcelField注解的所有配置)</h2><h3 id="1-基于注解读取CSV文件"><a href="#1-基于注解读取CSV文件" class="headerlink" title="1. 基于注解读取CSV文件"></a>1. 基于注解读取CSV文件</h3><h4 id="1-调用方法-2"><a href="#1-调用方法-2" class="headerlink" title="1) 调用方法"></a>1) 调用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试读取CSV文件</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadCSV</span><span class="params">()</span> <span class="keyword">throws</span> Excel4JException &#123;</span><br><span class="line">    List&lt;Student2&gt; list = ExcelUtils.getInstance().readCSV2Objects(<span class="string">&quot;J.csv&quot;</span>, Student2.class);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="2-读取结果"><a href="#2-读取结果" class="headerlink" title="2) 读取结果"></a>2) 读取结果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Student2&#123;id=1000001, name=&#x27;张三&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=1, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=1010002, name=&#x27;古尔丹&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=2, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=1010003, name=&#x27;蒙多(被开除了)&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=6, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=1010004, name=&#x27;萝卜特&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=3, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=1010005, name=&#x27;奥拉基&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=4, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=1010006, name=&#x27;得嘞&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=4, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=1010007, name=&#x27;瓜娃子&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=5, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=1010008, name=&#x27;战三&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=4, expel=&#x27;false&#x27;&#125;</span><br><span class="line">Student2&#123;id=1010009, name=&#x27;李四&#x27;, date=Wed Nov 28 15:11:12 CST 2018, classes=2, expel=&#x27;false&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-基于注解导出CSV文件"><a href="#2-基于注解导出CSV文件" class="headerlink" title="2. 基于注解导出CSV文件"></a>2. 基于注解导出CSV文件</h3><h4 id="1-调用方法-3"><a href="#1-调用方法-3" class="headerlink" title="1) 调用方法"></a>1) 调用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出csv</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExport2CSV</span><span class="params">()</span> <span class="keyword">throws</span> Excel4JException &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Student2&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1000001L</span>, <span class="string">&quot;张三&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">1</span>, <span class="literal">true</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1010002L</span>, <span class="string">&quot;古尔丹&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">2</span>, <span class="literal">false</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1010003L</span>, <span class="string">&quot;蒙多(被开除了)&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">6</span>, <span class="literal">true</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1010004L</span>, <span class="string">&quot;萝卜特&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">3</span>, <span class="literal">false</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1010005L</span>, <span class="string">&quot;奥拉基&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">4</span>, <span class="literal">false</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1010006L</span>, <span class="string">&quot;得嘞&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">4</span>, <span class="literal">false</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1010007L</span>, <span class="string">&quot;瓜娃子&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">5</span>, <span class="literal">true</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1010008L</span>, <span class="string">&quot;战三&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">4</span>, <span class="literal">false</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1010009L</span>, <span class="string">&quot;李四&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">2</span>, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">    ExcelUtils.getInstance().exportObjects2CSV(list, Student2.class, <span class="string">&quot;J.csv&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 超大数据量导出csv</span></span><br><span class="line"><span class="comment">// 9999999数据本地测试小于1min</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExport2CSV2</span><span class="params">()</span> <span class="keyword">throws</span> Excel4JException &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Student2&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9999999</span>; i++) &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="number">1000001L</span> + i, <span class="string">&quot;路人 -&quot;</span> + i, <span class="keyword">new</span> <span class="title class_">Date</span>(), i % <span class="number">6</span>, <span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ExcelUtils.getInstance().exportObjects2CSV(list, Student2.class, <span class="string">&quot;L.csv&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-导出结果"><a href="#2-导出结果" class="headerlink" title="2) 导出结果"></a>2) 导出结果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 以下为导出CSV文件内容</span><br><span class="line"></span><br><span class="line">学号,姓名,入学日期,班级,是否开除</span><br><span class="line">1000001,张三,2018-11-28T15:11:12.815Z,1,true</span><br><span class="line">1010002,古尔丹,2018-11-28T15:11:12.815Z,2,false</span><br><span class="line">1010003,蒙多(被开除了),2018-11-28T15:11:12.815Z,6,true</span><br><span class="line">1010004,萝卜特,2018-11-28T15:11:12.815Z,3,false</span><br><span class="line">1010005,奥拉基,2018-11-28T15:11:12.815Z,4,false</span><br><span class="line">1010006,得嘞,2018-11-28T15:11:12.815Z,4,false</span><br><span class="line">1010007,瓜娃子,2018-11-28T15:11:12.815Z,5,true</span><br><span class="line">1010008,战三,2018-11-28T15:11:12.815Z,4,false</span><br><span class="line">1010009,李四,2018-11-28T15:11:12.815Z,2,false</span><br></pre></td></tr></table></figure><h2 id="八-使用-JDK1-7及以上"><a href="#八-使用-JDK1-7及以上" class="headerlink" title="八. 使用(JDK1.7及以上)"></a>八. 使用(JDK1.7及以上)</h2><h4 id="1-github拷贝项目"><a href="#1-github拷贝项目" class="headerlink" title="1) github拷贝项目"></a>1) github拷贝项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt; git <span class="built_in">clone</span> https://github.com/Crab2died/Excel4J.git Excel4J</span><br><span class="line">&gt;&gt; package.cmd</span><br></pre></td></tr></table></figure><h4 id="2-最新版本maven引用："><a href="#2-最新版本maven引用：" class="headerlink" title="2) 最新版本maven引用："></a>2) 最新版本maven引用：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.crab2died<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Excel4J<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0-Alpha<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Excel4J </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Excel4J </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
